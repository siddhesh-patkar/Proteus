
ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 1





       MCS-51 Family Cross Assembler   A S E M - 5 1   V 1.2
       =====================================================



	Source File:	BASIC-52.ASM
	Object File:	BASIC-52.HEX
	List File:	BASIC-52.LST



 Line  I  Addr  Code            Source

    1:				;  December 18, 1986
    2:				;  MS-DOS compatible Source code for MCS BASIC-52 (tm)
    3:				;  Assembles with ASM51 Macro Assembler Version 2.2
    4:				;
    5:				;  The following source code does not include the floating point math
    6:				;  routines. These are seperately compiled using FP52.SRC.
    7:				;
    8:				;  Both the BASIC.SRC and FP52.SRC programs assemble into ABSOLUTE
    9:				;  object files, and do not need to be relocated or linked. The FP52
   10:				;  object code and the BASIC object code, when compiled without modification
   11:				;  of the source listings, create the same object code that is found on
   12:				;  the MCS BASIC-52 Version 1.1 microcontrollers.
   13:				;
   14:				;  The original source code had 7 "include" files that have been incorporated
   15:				;  into this file for ease of assembly.
   16:				;  These 7 files are: LOOK52.SRC, BAS52.RST, BAS52.PGM, BAS52.TL, BAS52.OUT,
   17:				;  BAS52.PWM, and BAS52.CLK.
   18:				;
   19:				;
   20:				;                       Intel Corporation, Embedded Controller Operations
   21:
   22:				$EJECT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 2



 Line  I  Addr  Code            Source

   23:					;**************************************************************
   24:					;
   25:					; TRAP VECTORS TO MONITOR
   26:					;
   27:					; RESET TAG (0AAH) ---------2001H
   28:					;
   29:					; TAG LOCATION (5AH) ------ 2002H
   30:					;
   31:					; EXTERNAL INTERRUPT 0 ---- 2040H
   32:					;
   33:					; COMMAND MODE ENTRY ------ 2048H
   34:					;
   35:					; SERIAL PORT ------------- 2050H
   36:					;
   37:					; MONITOR (BUBBLE) OUTPUT - 2058H
   38:					;
   39:					; MONITOR (BUBBLE) INPUT -- 2060H
   40:					;
   41:					; MONITOR (BUBBLE) CSTS --- 2068H
   42:					;
   43:					; GET USER JUMP VECTOR ---- 2070H
   44:					;
   45:					; GET USER LOOKUP VECTOR -- 2078H
   46:					;
   47:					; PRINT AT VECTOR --------- 2080H
   48:					;
   49:					; INTERRUPT PWM ----------- 2088H
   50:					;
   51:					; EXTERNAL RESET ---------- 2090H
   52:					;
   53:					; USER OUTPUT-------------- 4030H
   54:					;
   55:					; USER INPUT -------------- 4033H
   56:					;
   57:					; USER CSTS --------------- 4036H
   58:					;
   59:					; USER RESET -------------- 4039H
   60:					;
   61:					; USER DEFINED PRINT @ ---  403CH
   62:					;
   63:					;***************************************************************
   64:					;
   65:				$EJECT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 3



 Line  I  Addr  Code            Source

   66:					;***************************************************************
   67:					;
   68:					; MCS - 51  -  8K BASIC VERSION 1.1
   69:					;
   70:					;***************************************************************
   71:					;
   72:	  0000	61 87			AJMP	CRST		;START THE PROGRAM
   73:					;
   74:		N      0003		ORG	3H
   75:					;
   76:					;***************************************************************
   77:					;
   78:					;EXTERNAL INTERRUPT 0
   79:					;
   80:					;***************************************************************
   81:					;
   82:	  0003	20 31 2D		JB	DRQ,STQ		;SEE IF DMA IS SET
   83:	  0006	C0 D0			PUSH	PSW		;SAVE THE STATUS
   84:	  0008	02 40 03		LJMP	4003H		;JUMP TO USER IF NOT SET
   85:					;
   86:		N      000B		ORG	0BH
   87:					;
   88:					;***************************************************************
   89:					;
   90:					;TIMER 0 OVERFLOW INTERRUPT
   91:					;
   92:					;***************************************************************
   93:					;
   94:	  000B	C0 D0			PUSH	PSW		;SAVE THE STATUS
   95:	  000D	20 2E 10		JB	C_BIT,STJ	;SEE IF USER WANTS INTERRUPT
   96:	  0010	02 40 0B		LJMP	400BH		;EXIT IF USER WANTS INTERRUPTS
   97:					;
   98:		N      0013		ORG	13H
   99:					;
  100:					;***************************************************************
  101:					;
  102:					;EXTERNAL INTERRUPT 1
  103:					;
  104:					;***************************************************************
  105:					;
  106:	  0013	20 12 2B		JB	INTBIT,STK
  107:	  0016	C0 D0			PUSH	PSW
  108:	  0018	02 40 13		LJMP	4013H
  109:					;
  110:				$EJECT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 4



 Line  I  Addr  Code            Source

  111:					;
  112:		N      001B		ORG	1BH
  113:					;
  114:					;***************************************************************
  115:					;
  116:					;TIMER 1 OVERFLOW INTERRUPT
  117:					;
  118:					;***************************************************************
  119:					;
  120:	  001B	C0 D0			PUSH	PSW
  121:	  001D	02 1F 78		LJMP	CKS_I
  122:					;
  123:	  0020	02 19 03	STJ:	LJMP	I_DR		;DO THE INTERRUPT
  124:					;
  125:					;***************************************************************
  126:					;
  127:					;SERIAL PORT INTERRUPT
  128:					;
  129:					;***************************************************************
  130:					;
  131:		N      0023		ORG	23H
  132:					;
  133:	  0023	C0 D0			PUSH	PSW
  134:	  0025	20 1F 1C		JB	SPINT,STU	;SEE IF MONITOR EANTS INTERRUPT
  135:	  0028	02 40 23		LJMP	4023H
  136:					;
  137:		N      002B		ORG	2BH
  138:					;
  139:					;**************************************************************
  140:					;
  141:					;TIMER 2 OVERFLOW INTERRUPT
  142:					;
  143:					;**************************************************************
  144:					;
  145:	  002B	C0 D0			PUSH	PSW
  146:	  002D	02 40 2B		LJMP	402BH
  147:					;
  148:				$EJECT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 5



 Line  I  Addr  Code            Source

  149:					;**************************************************************
  150:					;
  151:					;USER ENTRY
  152:					;
  153:					;**************************************************************
  154:					;
  155:		N      0030		ORG	30H
  156:					;
  157:	  0030	02 19 3D		LJMP	IBLK		;LINK TO USER BLOCK
  158:					;
  159:	  0033	20 26 08	STQ:	JB	I_T0,STS	;SEE IF MONITOR WANTS IT
  160:	  0036	C2 96			CLR	DACK
  161:	  0038	30 B2 FD		JNB	P3.2,$		;WAIT FOR DMA TO END
  162:	  003B	D2 96			SETB	DACK
  163:	  003D	32			RETI
  164:					;
  165:	  003E	02 20 40	STS:	LJMP	2040H		;GO TO THE MONITOR
  166:					;
  167:	  0041	D2 16		STK:	SETB	INTPEN		;TELL BASIC AN INTERRUPT WAS RECEIVED
  168:	  0043	32			RETI
  169:					;
  170:	  0044	02 20 50	STU:	LJMP	2050H		;SERIAL PORT INTERRUPT
  171:					;
  172:				$EJECT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 6



 Line  I  Addr  Code            Source

  173:
  174:				;$INCLUDE(:F2:LOOK52.SRC)
  175:				; INCLUDED BELOW
  176:
  177:					;
  178:					;**************************************************************
  179:					;
  180:					; This is the equate table for 8052 basic.
  181:					;
  182:					;**************************************************************
  183:					;
  184:					; The register to direct equates for CJNE instructions.
  185:					;
  186:		N      0000	R0B0	EQU	0
  187:		N      0001	R1B0	EQU	1
  188:		N      0002	R2B0	EQU	2
  189:		N      0003	R3B0	EQU	3
  190:		N      0004	R4B0	EQU	4
  191:		N      0005	R5B0	EQU	5
  192:		N      0006	R6B0	EQU	6
  193:		N      0007	R7B0	EQU	7
  194:					;
  195:					; Register bank 1 contains the text pointer
  196:					; and the arg stack pointer.
  197:					;
  198:		N      0008	TXAL	EQU	8		;R0 BANK 1 = TEXT POINTER LOW
  199:		N      0009	ASTKA	EQU	9		;R1 BANK 1 = ARG STACK
  200:		N      000A	TXAH	EQU	10		;R2 BANK 1 = TEXT POINTER HIGH
  201:					;
  202:					; Now five temporary locations that are used by basic.
  203:					;
  204:		N      000B	TEMP1	EQU	11
  205:		N      000C	TEMP2	EQU	12
  206:		N      000D	TEMP3	EQU	13
  207:		N      000E	TEMP4	EQU	14
  208:		N      000F	TEMP5	EQU	15
  209:					;
  210:				$EJECT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 7



 Line  I  Addr  Code            Source

  211:					; Register bank 2 contains the read text pointer
  212:					; and the control stack pointer.
  213:					;
  214:		N      0010	RTXAL	EQU	16		;R0 BANK 2 = READ TEXT POINTER LOW
  215:		N      0011	CSTKA	EQU	17		;R1 BANK 2 = CONTROL STACK POINTER
  216:		N      0012	RTXAH	EQU	18		;R2 BANK 2 = READ TEXT POINTER HIGH
  217:					;
  218:					; Now some internal system equates.
  219:					;
  220:		N      0013	BOFAH	EQU	19		;START OF THE BASIC PROGRAM, HIGH BYTE
  221:		N      0014	BOFAL	EQU	20		;START OF THE BASIC PROGRAM, LOW BYTE
  222:		N      0015	NULLCT	EQU	21		;NULL COUNT
  223:		N      0016	PHEAD	EQU	22		;PRINT HEAD POSITION
  224:		N      0017	FORMAT	EQU	23
  225:					;
  226:					; Register bank 3 is for the user and can be loaded
  227:					; by basic
  228:					;
  229:					;
  230:					;
  231:					; Now everything else is used by basic.
  232:					; First the bit locations, these use bytes 34, 35, 36, 37 and 38
  233:					;
  234:				$EJECT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 8



 Line  I  Addr  Code            Source

  235:		N	 10	OTS		BIT	16	;34.0-ON TIME INSTRUCTION EXECUTED
  236:		N	 11	INPROG		BIT	17	;34.1-INTERRUPT IN PROCESS
  237:		N	 12	INTBIT		BIT	18	;34.2-INTERRUPT SET BIT
  238:		N	 13	ON_ERR		BIT	19	;34.3-ON ERROR EXECUTED
  239:		N	 14	OTI		BIT	20	;34.4-ON TIME INTERRUPT IN PROGRESS
  240:		N	 15	LINEB		BIT	21	;34.5-LINE CHANGE OCCURED
  241:		N	 16	INTPEN		BIT	22	;34.6-INTERRUPT PENDING BIT
  242:		N	 17	CONB		BIT	23	;34.7-CAN CONTINUE IF SET
  243:		N	 18	GTRD		BIT	24	;35.0-READ GET LOCATION
  244:		N	 19	LPB		BIT	25	;35.1-PRINT TO LINE PRINTER PORT
  245:		N	 1A	CKS_B		BIT	26	;35.2-FOR PWM INTERRUPT
  246:		N	 1B	COB		BIT	27	;35.3-CONSOLE OUT BIT
  247:								;     0 = SERIAL PORT
  248:								;     1 = LINE PRINTER
  249:		N	 1C	COUB		BIT	28	;35.4-USER CONSOLE OUT BIT
  250:								;     0 = SERIAL PORT
  251:								;     1 = USER DRIVER
  252:		N	 1D	INBIT		BIT	29	;35.5-INITIALIZATION BIT
  253:		N	 1E	CIUB		BIT	30	;35.6-USER CONSOLE IN BIT
  254:								;     0 = SERIAL PORT
  255:								;     1 = USER ROUTINE
  256:		N	 1F	SPINT		BIT	31	;35.7-SERIAL PORT INTERRUPT
  257:		N	 20	STOPBIT		BIT	32	;36.0-PROGRAM STOP ENCOUNTERED
  258:		N	 21	U_IDL		BIT	33	;36.1-USER IDLE BREAK
  259:		N	 22	INP_B		BIT	34	;36.2-SET DURING INPUT INSTRUCTION
  260:				;DCMPXZ		BIT	35	;36.3-DCMPX ZERO FLAG
  261:		N	 24	ARGF		BIT	36	;36.4-ARG STACK HAS A VALUE
  262:		N	 25	RETBIT		BIT	37	;36.5-RET FROM INTERRUPT EXECUTED
  263:		N	 26	I_T0		BIT	38	;36.6-TRAP INTERRUPT ZERO TO MON
  264:		N	 27	UPB		BIT	39	;36.7-SET WHEN @ IS VALID
  265:		N	 28	JKBIT		BIT	40	;37.0-WB TRIGGER
  266:		N	 29	ENDBIT		BIT	41	;37.1-GET END OF PROGRAM
  267:		N	 2A	UBIT		BIT	42	;37.2-FOR DIM STATEMENT
  268:		N	 2B	ISAV		BIT	43	;37.3-SAVE INTERRUPT STATUS
  269:		N	 2C	BO		BIT	44	;37.4-BUBBLE OUTPUT
  270:		N	 2D	XBIT		BIT	45	;37.5-EXTERNAL PROGRAM PRESENT
  271:		N	 2E	C_BIT		BIT	46	;37.6-SET WHEN CLOCK RUNNING
  272:		N	 2F	DIRF		BIT	47	;37.7-DIRECT INPUT MODE
  273:		N	 30	NO_C		BIT	48	;38.0-NO CONTROL C
  274:		N	 31	DRQ		BIT	49	;38.1-DMA ENABLED
  275:		N	 32	BI		BIT	50	;38.2-BUBBLE INPUT
  276:		N	 33	INTELB		BIT	51	;38.3-INTELLIGENT PROM PROGRAMMING
  277:		N	 34	C0ORX1		BIT	52	;38.4-PRINT FROM ROM OR RAM
  278:		N	 35	CNT_S		BIT	53	;38.5-CONTROL S ENCOUNTERED
  279:		N	 36	ZSURP		BIT	54	;38.6-ZERO SUPRESS
  280:		N	 37	HMODE		BIT	55	;38.7-HEX MODE PRINT
  281:		B	 97	LP		BIT	P1.7	;SOFTWARE LINE PRINTER
  282:		B	 96	DACK		BIT	P1.6	;DMA ACK
  283:		B	 95	PROMV		BIT	P1.5	;TURN ON PROM VOLTAGE
  284:		B	 94	PROMP		BIT	P1.4	;PROM PULSE
  285:		B	 93	ALED		BIT	P1.3	;ALE DISABLE
  286:		B	 92	T_BIT		BIT	P1.2	;I/O TOGGLE BIT
  287:					;
  288:				$EJECT

ASEM-51 V1.2                                         Copyright (c) 1996 by W.W. Heinz                                         PAGE 9



 Line  I  Addr  Code            Source

  289:					;
  290:					; The next location is a bit addressable byte counter
  291:					;
  292:		N      0027	BABC	EQU	39
  293:					;
  294:					; Now floating point and the other temps
  295:					;
  296:					; FP Uses to locations 03CH
  297:					;
  298:					; Now the stack designators.
  299:					;
  300:		N      003E	SPSAV	EQU	3EH
  301:		N      003F	S_LEN	EQU	3FH
  302:		N      0040	T_HH	EQU	40H
  303:		N      0041	T_LL	EQU	41H
  304:		N      0042	INTXAH	EQU	42H
  305:		N      0043	INTXAL	EQU	43H
  306:		N      0045	MT1	EQU	45H
  307:		N      0046	MT2	EQU	46H
  308:		N      0047	MILLIV	EQU	47H		;TIMER LOCATIONS
  309:		N      0048	TVH	EQU	48H
  310:		N      0049	TVL	EQU	49H
  311:		N      004A	SAVE_T	EQU	4AH
  312:		N      004B	SP_H	EQU	4BH		;SERIAL PORT TIME OUT
  313:		N      004C	SP_L	EQU	4CH
  314:		N      004D	CMNDSP	EQU	4DH		;SYSTEM STACK POINTER
  315:		N      00FF	IRAMTOP	EQU	0FFH		;TOP OF RAM
  316:		N      00FE	STACKTP	EQU	0FEH		;ARG AND CONTROL STACK TOPS
  317:					;
  318:					; The character equates
  319:					;
  320:		N      000D	CR	EQU	0DH		;CARRIAGE RETURN
  321:		N      000A	LF	EQU	0AH		;LINE FEED
  322:		N      0007	BELL	EQU	07H		;BELL CHARACTER
  323:		N      0008	BS	EQU	08H		;BACK SPACE
  324:		N      0003	CNTRLC	EQU	03H		;CONTROL C
  325:		N      0004	CNTRLD	EQU	04H		;CONTROL D
  326:		N      0000	NULL	EQU	00H		;NULL
  327:					;
  328:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 10



 Line  I  Addr  Code            Source

  329:					;
  330:					; The internal system equates
  331:					;
  332:		N      0049	LINLEN	EQU	73		;THE LENGTH OF AN INPUT LINE
  333:		N      0001	EOF	EQU	01		;END OF FILE CHARACTER
  334:		N      0001	ASTKAH	EQU	01		;ASTKA IS IN PAGE 1 OF RAM
  335:		N      0000	CSTKAH	EQU	00		;CSTKA IS IN PAGE 0 OF RAM
  336:		N      0001	FTYPE	EQU	01		;CONTROL STACK "FOR"
  337:		N      0002	GTYPE	EQU	02		;CONTROL STACK "GOSUB"
  338:		N      0003	DTYPE	EQU	03		;DO-WHILE/UNTIL TYPE
  339:		N      8000	ROMADR	EQU	8000H		;LOCATION OF ROM
  340:					;
  341:					; The floating point equates
  342:					;
  343:		N      0006	FPSIZ	EQU	6		;NO. OF BYTES IN A FLOATING NUM
  344:		N      0004	DIGIT	EQU	FPSIZ-2		;THE MANTISSA OF A FLOATING NUM
  345:		N      0009	STESIZ	EQU	FPSIZ+3		;SIZE OF SYMBOL ADJUSTED TABLE ELEMENT
  346:		N      1993	FP_BASE	EQU	1993H		;BASE OF FLOATING POINT ROUTINES
  347:		N      0200	PSTART	EQU	512		;START OF A PROGRAM IN RAM
  348:		N      0011	FSIZE	EQU	FPSIZ+FPSIZ+2+2+1
  349:					;
  350:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 11



 Line  I  Addr  Code            Source

  351:					;**************************************************************
  352:					;
  353:	  0047			USENT:	; User entry jump table
  354:					;
  355:					;**************************************************************
  356:					;
  357:	  0047	17 85			DW	CMND1		;(00, 00H)COMMAND MODE JUMP
  358:	  0049	12 15			DW	IFIX		;(01, 01H)CONVERT FP TO INT
  359:	  004B	0F E6			DW	PUSHAS		;(02, 02H)PUSH VALUE ONTO ARG STACK
  360:	  004D	0F DC			DW	POPAS		;(03, 03H)POP VALUE OFF ARG STACK
  361:	  004F	04 95			DW	PG1		;(04, 04H)PROGRAM A PROM
  362:	  0051	06 D0			DW	INLINE		;(05, 05H)INPUT A LINE
  363:	  0053	06 B7			DW	UPRNT		;(06, 06H)PRINT A LINR
  364:	  0055	06 9D			DW	CRLF		;(07, 07H)OUTPUT A CRLF
  365:					;
  366:					;**************************************************************
  367:					;
  368:					; This is the operation jump table for arithmetics
  369:					;
  370:					;**************************************************************
  371:					;
  372:	  0057	13 9E		OPTAB:	DW	ALPAR		;(08, 08H)LEFT PAREN
  373:	  0059	13 1D			DW	AEXP		;(09, 09H)EXPONENTAION
  374:	  005B	11 A2			DW	AMUL		;(10, 0AH)FP MUL
  375:	  005D	17 3F			DW	AADD		;(11, 0BH)FLOATING POINT ADD
  376:	  005F	13 FC			DW	ADIV		;(12, 0CH)FLOATING POINT DIVIDE
  377:	  0061	17 1A			DW	ASUB		;(13, 0DH)FLOATING POINT SUBTRACTION
  378:	  0063	14 8A			DW	AXRL		;(14, 0EH)XOR
  379:	  0065	14 76			DW	AANL		;(15, 0FH)AND
  380:	  0067	14 7F			DW	AORL		;(16, 10H)OR
  381:	  0069	13 93			DW	ANEG		;(17, 11H)NEGATE
  382:	  006B	13 CD			DW	AEQ		;(18, 12H)EQUAL
  383:	  006D	13 D9			DW	AGE		;(19, 13H)GREATER THAN OR EQUAL
  384:	  006F	13 DD			DW	ALE		;(20, 14H)LESS THAN OR EQUAL
  385:	  0071	13 D3			DW	ANE		;(21, 15H)NOT EQUAL
  386:	  0073	13 C8			DW	ALT		;(22, 16H)LESS THAN
  387:	  0075	13 B7			DW	AGT		;(23, 17H)GREATER THAN
  388:					;
  389:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 12



 Line  I  Addr  Code            Source

  390:					;***************************************************************
  391:					;
  392:					; This is the jump table for unary operators
  393:					;
  394:					;***************************************************************
  395:					;
  396:	  0077	13 81			DW	AABS		;(24, 18H)ABSOLUTE VALUE
  397:	  0079	13 5F			DW	AINT		;(25, 19H)INTEGER OPERATOR
  398:	  007B	13 87			DW	ASGN		;(26, 1AH)SIGN OPERATOR
  399:	  007D	14 88			DW	ANOT		;(27, 1BH)ONE'S COMPLEMENT
  400:	  007F	11 5F			DW	ACOS		;(28, 1CH)COSINE
  401:	  0081	11 C2			DW	ATAN		;(29, 1DH)TANGENT
  402:	  0083	11 63			DW	ASIN		;(30, 1EH)SINE
  403:	  0085	12 7F			DW	ASQR		;(31, 1FH)SQUARE ROOT
  404:	  0087	13 9F			DW	ACBYTE		;(32, 20H)READ CODE
  405:	  0089	13 19			DW	AETOX		;(33, 21H)E TO THE X
  406:	  008B	11 D2			DW	AATAN		;(34, 22H)ARC TANGENT
  407:	  008D	12 B2			DW	ALN		;(35, 23H)NATURAL LOG
  408:	  008F	13 A8			DW	ADBYTE		;(36, 24H)READ DATA MEMORY
  409:	  0091	13 B0			DW	AXBYTE		;(37, 25H)READ EXTERNAL MEMORY
  410:	  0093	14 71			DW	PIPI		;(38, 26H)PI
  411:	  0095	13 E3			DW	ARND		;(39, 27H)RANDOM NUMBER
  412:	  0097	14 9B			DW	AGET		;(40, 28H)GET INPUT CHARACTER
  413:	  0099	17 0F			DW	AFREE		;(41, 29H)COMPUTE #BYTES FREE
  414:	  009B	17 1F			DW	ALEN		;(42, 2AH) COMPUTE LEN OF PORGRAM
  415:	  009D	0F E2			DW	AXTAL		;(43, 2BH) CRYSTAL
  416:	  009F	16 41			DW	PMTOP		;(44, 2CH)TOP OF MEMORY
  417:	  00A1	17 27			DW	ATIME		;(45, 2DH) TIME
  418:	  00A3	14 AB			DW	A_IE		;(46, 2EH) IE
  419:	  00A5	14 AF			DW	A_IP		;(47, 2FH) IP
  420:	  00A7	14 B3			DW	ATIM0		;(48, 30H) TIMER 0
  421:	  00A9	14 B9			DW	ATIM1		;(49, 31H) TIMER 1
  422:	  00AB	14 BF			DW	ATIM2		;(50, 32H) TIMER 2
  423:	  00AD	14 C5			DW	AT2CON		;(51, 33H) T2CON
  424:	  00AF	14 C9			DW	ATCON		;(52, 34H) TCON
  425:	  00B1	14 CD			DW	ATMOD		;(53, 35H) ATMOD
  426:	  00B3	14 D1			DW	ARCAP2		;(54, 36H) RCAP2
  427:	  00B5	14 D7			DW	AP1		;(55, 37H) P1
  428:	  00B7	14 DB			DW	APCON		;(56, 38H) PCON
  429:	  00B9	0F 4C			DW	EXPRB		;(57, 39H) EVALUATE AN EXPRESSION
  430:	  00BB	16 4E			DW	AXTAL1		;(58, 3AH) CALCULATE CRYSTAL
  431:	  00BD	14 E2			DW	LINE		;(59, 3BH) EDIT A LINE
  432:	  00BF	15 AC			DW	PP		;(60, 3CH) PROCESS A LINE
  433:	  00C1	10 8C			DW	UPPL-3		;(61, 3DH) UNPROCESS A LINE
  434:	  00C3	0D 6E			DW	VAR		;(62, 3EH) FIND A VARIABLE
  435:	  00C5	0E D6			DW	GC		;(63, 3FH) GET A CHARACTER
  436:	  00C7	0E DE			DW	GCI		;(64, 40H) GET CHARACTER AND INCREMENT
  437:	  00C9	07 89			DW	INCHAR		;(65, 41H) INPUT A CHARACTER
  438:	  00CB	08 06			DW	CRUN		;(66, 42H) RUN A PROGRAM
  439:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 13



 Line  I  Addr  Code            Source

  440:	  00CD	01		OPBOL:	DB	1		;
  441:					;
  442:	  00CE	0F			DB	15		;LEFT PAREN
  443:	  00CF	0E			DB	14		;EXPONENTIAN **
  444:	  00D0	0A			DB	10		;MUL
  445:	  00D1	08			DB	8		;ADD
  446:	  00D2	0A			DB	10		;DIVIDE
  447:	  00D3	08			DB	8		;SUB
  448:	  00D4	03			DB	3		;XOR
  449:	  00D5	05			DB	5		;AND
  450:	  00D6	04			DB	4		;OR
  451:	  00D7	0C			DB	12		;NEGATE
  452:	  00D8	06			DB	6		;EQ
  453:	  00D9	06			DB	6		;GT
  454:	  00DA	06			DB	6		;LT
  455:	  00DB	06			DB	6		;NE
  456:	  00DC	06			DB	6		;LE
  457:	  00DD	06			DB	6		;GE
  458:					;
  459:	  00DE	0F		UOPBOL:	DB	15		;AABS
  460:	  00DF	0F			DB	15		;AAINT
  461:	  00E0	0F			DB	15		;ASGN
  462:	  00E1	0F			DB	15		;ANOT
  463:	  00E2	0F			DB	15		;ACOS
  464:	  00E3	0F			DB	15		;ATAN
  465:	  00E4	0F			DB	15		;ASIN
  466:	  00E5	0F			DB	15		;ASQR
  467:	  00E6	0F			DB	15		;ACBYTE
  468:	  00E7	0F			DB	15		;E TO THE X
  469:	  00E8	0F			DB	15		;AATAN
  470:	  00E9	0F			DB	15		;NATURAL LOG
  471:	  00EA	0F			DB	15		;DBYTE
  472:	  00EB	0F			DB	15		;XBYTE
  473:					;
  474:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 14



 Line  I  Addr  Code            Source

  475:					;***************************************************************
  476:					;
  477:					; The ASCII printed messages.
  478:					;
  479:					;***************************************************************
  480:					;
  481:	  00EC	53 54 4F 50	STP:	DB	'STOP"'
	  00F0	22
  482:					;
  483:	  00F1	54 52 59 20	IAN:	DB	'TRY AGAIN"'
	  00F5	41 47 41 49
	  00F9	4E 22
  484:					;
  485:	  00FB	52 45 41 44	RDYS:	DB	'READY"'
	  00FF	59 22
  486:					;
  487:	  0101	20 2D 20 49	INS:	DB	' - IN LINE "'
	  0105	4E 20 4C 49
	  0109	4E 45 20 22
  488:					;
  489:					;**************************************************************
  490:					;
  491:					; This is the command jump table
  492:					;
  493:					;**************************************************************
  494:					;
  495:	  010D	08 06		CMNDD:	DW	CRUN		;RUN
  496:	  010F	10 3A			DW	CLIST		;LIST
  497:	  0111	0B 10			DW	CNULL		;NULL
  498:	  0113	06 54			DW	CNEW		;NEW
  499:	  0115	18 3F			DW	CCONT		;CONTINUE
  500:	  0117	04 61			DW	CPROG		;PROGRAM A PROM
  501:	  0119	17 71			DW	CXFER		;TRANSFER FROM ROM TO RAM
  502:	  011B	17 7D			DW	CRAM		;RAM MODE
  503:	  011D	05 36			DW	CROM		;ROM MODE
  504:	  011F	04 5A			DW	CIPROG		;INTELLIGENT PROM PROGRAMMING
  505:					;
  506:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 15



 Line  I  Addr  Code            Source

  507:					;***************************************************************
  508:					;
  509:					; This is the statement jump table.
  510:					;
  511:					;**************************************************************
  512:					;
  513:	  0121			STATD:	;
  514:	  0121	09 76			DW	SLET		;LET		80H
  515:	  0123	06 87			DW	SCLR		;CLEAR		81H
  516:	  0125	0A 7E			DW	SPUSH		;PUSH VAR	82H
  517:	  0127	0A B2			DW	SGOTO		;GO TO		83H
  518:	  0129	16 84			DW	STONE		;TONE		84H
  519:	  012B	0C 31			DW	SPH0		;PRINT MODE 0	85H
  520:	  012D	19 2C			DW	SUI		;USER INPUT	86H
  521:	  012F	19 31			DW	SUO		;USER OUTPUT	87H
  522:	  0131	0A 85			DW	SPOP		;POP VAR	88H
  523:	  0133	0C 35			DW	SPRINT		;PRINT		89H
  524:	  0135	0E 6C			DW	SCALL		;CALL		8AH
  525:	  0137	0D 6A			DW	SDIMX		;DIMENSION	8BH
  526:	  0139	06 04			DW	STRING		;STRING ALLO	8CH
  527:	  013B	16 F7			DW	SBAUD		;SET BAUD	8DH
  528:	  013D	19 19			DW	SCLOCK		;CLOCK		8EH
  529:	  013F	0C 33			DW	SPH1		;PRINT MODE 1   8FH
  530:					;
  531:					; No direct mode from here on
  532:					;
  533:	  0141	08 5C			DW	SSTOP		;STOP		90H
  534:	  0143	0E 5F			DW	SOT		;ON TIME	91H
  535:	  0145	14 0B			DW	SONEXT		;ON EXT INT	92H
  536:	  0147	0B 16			DW	SRETI		;RET FROM INT	93H
  537:	  0149	0F 0E			DW	S_DO		;DO		94H
  538:	  014B	0B D6			DW	SRESTR		;RESTOR		95H
  539:	  014D	0F 05			DW	WCR		;REM		96H
  540:	  014F	0B 67			DW	SNEXT		;NEXT		97H
  541:	  0151	14 01			DW	SONERR		;ON ERROR	98H
  542:	  0153	0C F4			DW	S_ON		;ON		99H
  543:	  0155	0D FE			DW	SINPUT		;INPUT		9AH
  544:	  0157	0B EB			DW	SREAD		;READ		9BH
  545:	  0159	0E F5			DW	FINDCR		;DATA		9CH
  546:	  015B	0B 18			DW	SRETRN		;RETURN		9DH
  547:	  015D	0A 8E			DW	SIF		;IF		9EH
  548:	  015F	0B 35			DW	SGOSUB		;GOSUB		9FH
  549:	  0161	0A 44			DW	SFOR		;FOR		A0H
  550:	  0163	0B 04			DW	SWHILE		;WHILE		A1H
  551:	  0165	0B 09			DW	SUNTIL		;UNTIL		A2H
  552:	  0167	17 85			DW	CMND1		;END		A3H
  553:	  0169	18 5C			DW	I_DL		;IDLE		A4H
  554:	  016B	0F EE			DW	ST_A		;STORE AT	A5H
  555:	  016D	0F F2			DW	LD_A		;LOAD AT	A6H
  556:	  016F	05 0C			DW	PGU		;PGM		A7H
  557:	  0171	07 BC			DW	RROM		;RUN A ROM	A9H
  558:					;
  559:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 16



 Line  I  Addr  Code            Source

  560:					;**************************************************************
  561:					;
  562:	  0173			TOKTAB:	; This is the basic token table
  563:					;
  564:					;**************************************************************
  565:					;
  566:					; First the tokens for statements
  567:					;
  568:	  0173	80			DB	80H		;LET TOKEN
  569:	  0174	4C 45 54		DB	'LET'
  570:					;
  571:	  0177	81			DB	81H		;CLEAR TOKEN
  572:	  0178	43 4C 45 41		DB	'CLEAR'
	  017C	52
  573:					;
  574:	  017D	82			DB	82H		;PUSH TOKEN
  575:	  017E	50 55 53 48		DB	'PUSH'
  576:					;
  577:		N      0083	T_GOTO	EQU	83H
  578:					;
  579:	  0182	83			DB	83H		;GO TO TOKEN
  580:	  0183	47 4F 54 4F		DB	'GOTO'
  581:					;
  582:	  0187	84			DB	84H		;TOGGLE TOKEN
  583:	  0188	50 57 4D		DB	'PWM'
  584:					;
  585:	  018B	85			DB	85H		;PRINT HEX MODE 0
  586:	  018C	50 48 30 2E		DB	'PH0.'
  587:					;
  588:	  0190	86			DB	86H		;USER IN TOKEN
  589:	  0191	55 49			DB	'UI'
  590:					;
  591:	  0193	87			DB	87H		;USER OUT TOKEN
  592:	  0194	55 4F			DB	'UO'
  593:					;
  594:	  0196	88			DB	88H		;POP TOKEN
  595:	  0197	50 4F 50		DB	'POP'
  596:					;
  597:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 17



 Line  I  Addr  Code            Source

  598:	  019A	89			DB	89H		;PRINT TOKEN
  599:	  019B	50 52 49 4E		DB	'PRINT'
	  019F	54
  600:	  01A0	89			DB	89H
  601:	  01A1	50 2E			DB	'P.'		;P. ALSO MEANS PRINT
  602:	  01A3	89			DB	89H		;? ALSO
  603:	  01A4	3F			DB	'?'
  604:					;
  605:	  01A5	8A			DB	8AH		;CALL TOKEN
  606:	  01A6	43 41 4C 4C		DB	'CALL'
  607:					;
  608:	  01AA	8B			DB	8BH		;DIMENSION TOKEN
  609:	  01AB	44 49 4D		DB	'DIM'
  610:					;
  611:	  01AE	8C			DB	8CH		;STRING TOKEN
  612:	  01AF	53 54 52 49		DB	'STRING'
	  01B3	4E 47
  613:					;
  614:	  01B5	8D			DB	8DH		;SET BAUD RATE
  615:	  01B6	42 41 55 44		DB	'BAUD'
  616:					;
  617:	  01BA	8E			DB	8EH		;CLOCK
  618:	  01BB	43 4C 4F 43		DB	'CLOCK'
	  01BF	4B
  619:					;
  620:	  01C0	8F			DB	8FH		;PRINT HEX MODE 1
  621:	  01C1	50 48 31 2E		DB	'PH1.'
  622:					;
  623:		N      0090	T_STOP	EQU	90H		;STOP TOKEN
  624:	  01C5	90			DB	T_STOP
  625:	  01C6	53 54 4F 50		DB	'STOP'
  626:					;
  627:		N      0090	T_DIR	EQU	T_STOP		;NO DIRECT FROM HERE ON
  628:					;
  629:	  01CA	91			DB	T_STOP+1	;ON TIMER INTERRUPT
  630:	  01CB	4F 4E 54 49		DB	'ONTIME'
	  01CF	4D 45
  631:					;
  632:	  01D1	92			DB	T_STOP+2	;ON EXTERNAL INTERRUPT
  633:	  01D2	4F 4E 45 58		DB	'ONEX1'
	  01D6	31
  634:					;
  635:	  01D7	93			DB	T_STOP+3	;RETURN FROM INTERRUPT
  636:	  01D8	52 45 54 49		DB	'RETI'
  637:					;
  638:	  01DC	94			DB	T_STOP+4	;DO TOKEN
  639:	  01DD	44 4F			DB	'DO'
  640:					;
  641:	  01DF	95			DB	T_STOP+5	;RESTORE TOKEN
  642:	  01E0	52 45 53 54		DB	'RESTORE'
	  01E4	4F 52 45
  643:					;
  644:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 18



 Line  I  Addr  Code            Source

  645:		N      0096	T_REM	EQU	T_STOP+6	;REMARK TOKEN
  646:	  01E7	96			DB	T_REM
  647:	  01E8	52 45 4D		DB	'REM'
  648:					;
  649:	  01EB	97			DB	T_REM+1		;NEXT TOKEN
  650:	  01EC	4E 45 58 54		DB	'NEXT'
  651:					;
  652:	  01F0	98			DB	T_REM+2		;ON ERROR TOKEN
  653:	  01F1	4F 4E 45 52		DB	'ONERR'
	  01F5	52
  654:					;
  655:	  01F6	99			DB	T_REM+3		;ON TOKEN
  656:	  01F7	4F 4E			DB	'ON'
  657:					;
  658:	  01F9	9A			DB	T_REM+4		;INPUT
  659:	  01FA	49 4E 50 55		DB	'INPUT'
	  01FE	54
  660:					;
  661:	  01FF	9B			DB	T_REM+5		;READ
  662:	  0200	52 45 41 44		DB	'READ'
  663:					;
  664:		N      009C	T_DATA	EQU	T_REM+6		;DATA
  665:	  0204	9C			DB	T_DATA
  666:	  0205	44 41 54 41		DB	'DATA'
  667:					;
  668:	  0209	9D			DB	T_DATA+1	;RETURN
  669:	  020A	52 45 54 55		DB	'RETURN'
	  020E	52 4E
  670:					;
  671:	  0210	9E			DB	T_DATA+2	;IF
  672:	  0211	49 46			DB	'IF'
  673:					;
  674:		N      009F	T_GOSB	EQU	T_DATA+3	;GOSUB
  675:	  0213	9F			DB	T_GOSB
  676:	  0214	47 4F 53 55		DB	'GOSUB'
	  0218	42
  677:					;
  678:	  0219	A0			DB	T_GOSB+1	;FOR
  679:	  021A	46 4F 52		DB	'FOR'
  680:					;
  681:	  021D	A1			DB	T_GOSB+2	;WHILE
  682:	  021E	57 48 49 4C		DB	'WHILE'
	  0222	45
  683:					;
  684:	  0223	A2			DB	T_GOSB+3	;UNTIL
  685:	  0224	55 4E 54 49		DB	'UNTIL'
	  0228	4C
  686:					;
  687:	  0229	A3			DB	T_GOSB+4	;END
  688:	  022A	45 4E 44		DB	'END'
  689:					;
  690:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 19



 Line  I  Addr  Code            Source

  691:		N      00A4	T_LAST	EQU	T_GOSB+5	;LAST INITIAL TOKEN
  692:					;
  693:		N      00A4	T_TAB	EQU	T_LAST		;TAB TOKEN
  694:	  022D	A4			DB	T_TAB
  695:	  022E	54 41 42		DB	'TAB'
  696:					;
  697:		N      00A5	T_THEN	EQU	T_LAST+1	;THEN TOKEN
  698:	  0231	A5			DB	T_THEN
  699:	  0232	54 48 45 4E		DB	'THEN'
  700:					;
  701:		N      00A6	T_TO	EQU	T_LAST+2	;TO TOKEN
  702:	  0236	A6			DB	T_TO
  703:	  0237	54 4F			DB	'TO'
  704:					;
  705:		N      00A7	T_STEP	EQU	T_LAST+3	;STEP TOKEN
  706:	  0239	A7			DB	T_STEP
  707:	  023A	53 54 45 50		DB	'STEP'
  708:					;
  709:		N      00A8	T_ELSE	EQU	T_LAST+4	;ELSE TOKEN
  710:	  023E	A8			DB	T_ELSE
  711:	  023F	45 4C 53 45		DB	'ELSE'
  712:					;
  713:		N      00A9	T_SPC	EQU	T_LAST+5	;SPACE TOKEN
  714:	  0243	A9			DB	T_SPC
  715:	  0244	53 50 43		DB	'SPC'
  716:					;
  717:		N      00AA	T_CR	EQU	T_LAST+6
  718:	  0247	AA			DB	T_CR
  719:	  0248	43 52			DB	'CR'
  720:					;
  721:	  024A	AB			DB	T_CR+1
  722:	  024B	49 44 4C 45		DB	'IDLE'
  723:					;
  724:	  024F	AC			DB	T_CR+2
  725:	  0250	53 54 40		DB	'ST@'
  726:					;
  727:	  0253	AD			DB	T_CR+3
  728:	  0254	4C 44 40		DB	'LD@'
  729:					;
  730:	  0257	AE			DB	T_CR+4
  731:	  0258	50 47 4D		DB	'PGM'
  732:					;
  733:	  025B	AF			DB	T_CR+5
  734:	  025C	52 52 4F 4D		DB	'RROM'
  735:					;
  736:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 20



 Line  I  Addr  Code            Source

  737:					; Operator tokens
  738:					;
  739:		N      00E0	T_LPAR	EQU	0E0H		;LEFT PAREN
  740:	  0260	E0			DB	T_LPAR
  741:	  0261	28			DB	'('
  742:					;
  743:	  0262	E1			DB	T_LPAR+1	;EXPONENTIAN
  744:	  0263	2A 2A			DB	'**'
  745:					;
  746:	  0265	E2			DB	T_LPAR+2	;FP MULTIPLY
  747:	  0266	2A			DB	'*'
  748:					;
  749:		N      00E3	T_ADD	EQU	T_LPAR+3
  750:	  0267	E3			DB	T_LPAR+3	;ADD TOKEN
  751:	  0268	2B			DB	'+'
  752:					;
  753:	  0269	E4			DB	T_LPAR+4	;DIVIDE TOKEN
  754:	  026A	2F			DB	'/'
  755:					;
  756:		N      00E5	T_SUB	EQU	T_LPAR+5	;SUBTRACT TOKEN
  757:	  026B	E5			DB	T_SUB
  758:	  026C	2D			DB	'-'
  759:					;
  760:	  026D	E6			DB	T_LPAR+6	;LOGICAL EXCLUSIVE OR
  761:	  026E	2E 58 4F 52		DB	'.XOR.'
	  0272	2E
  762:					;
  763:	  0273	E7			DB	T_LPAR+7	;LOGICAL AND
  764:	  0274	2E 41 4E 44		DB	'.AND.'
	  0278	2E
  765:					;
  766:	  0279	E8			DB	T_LPAR+8	;LOGICAL OR
  767:	  027A	2E 4F 52 2E		DB	'.OR.'
  768:					;
  769:		N      00E9	T_NEG	EQU	T_LPAR+9
  770:					;
  771:		N      00EA	T_EQU	EQU	T_LPAR+10	;EQUAL
  772:	  027E	EA			DB	T_EQU
  773:	  027F	3D			DB	'='
  774:					;
  775:	  0280	EB			DB	T_LPAR+11	;GREATER THAN OR EQUAL
  776:	  0281	3E 3D			DB	'>='
  777:					;
  778:	  0283	EC			DB	T_LPAR+12	;LESS THAN OR EQUAL
  779:	  0284	3C 3D			DB	'<='
  780:					;
  781:	  0286	ED			DB	T_LPAR+13	;NOT EQUAL
  782:	  0287	3C 3E			DB	'<>'
  783:					;
  784:	  0289	EE			DB	T_LPAR+14	;LESS THAN
  785:	  028A	3C			DB	'<'
  786:					;
  787:	  028B	EF			DB	T_LPAR+15	;GREATER THAN
  788:	  028C	3E			DB	'>'
  789:					;
  790:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 21



 Line  I  Addr  Code            Source

  791:		N      00B0	T_UOP	EQU	0B0H		;UNARY OP BASE TOKEN
  792:					;
  793:	  028D	B0			DB	T_UOP		;ABS TOKEN
  794:	  028E	41 42 53		DB	'ABS'
  795:					;
  796:	  0291	B1			DB	T_UOP+1		;INTEGER TOKEN
  797:	  0292	49 4E 54		DB	'INT'
  798:					;
  799:	  0295	B2			DB	T_UOP+2		;SIGN TOKEN
  800:	  0296	53 47 4E		DB	'SGN'
  801:					;
  802:	  0299	B3			DB	T_UOP+3		;GET TOKEN
  803:	  029A	4E 4F 54		DB	'NOT'
  804:					;
  805:	  029D	B4			DB	T_UOP+4		;COSINE TOKEN
  806:	  029E	43 4F 53		DB	'COS'
  807:					;
  808:	  02A1	B5			DB	T_UOP+5		;TANGENT TOKEN
  809:	  02A2	54 41 4E		DB	'TAN'
  810:					;
  811:	  02A5	B6			DB	T_UOP+6		;SINE TOKEN
  812:	  02A6	53 49 4E		DB	'SIN'
  813:					;
  814:	  02A9	B7			DB	T_UOP+7		;SQUARE ROOT TOKEN
  815:	  02AA	53 51 52		DB	'SQR'
  816:					;
  817:	  02AD	B8			DB	T_UOP+8		;CBYTE TOKEN
  818:	  02AE	43 42 59		DB	'CBY'
  819:					;
  820:	  02B1	B9			DB	T_UOP+9		;EXP (E TO THE X) TOKEN
  821:	  02B2	45 58 50		DB	'EXP'
  822:					;
  823:	  02B5	BA			DB	T_UOP+10
  824:	  02B6	41 54 4E		DB	'ATN'
  825:					;
  826:	  02B9	BB			DB	T_UOP+11
  827:	  02BA	4C 4F 47		DB	'LOG'
  828:					;
  829:	  02BD	BC			DB	T_UOP+12	;DBYTE TOKEN
  830:	  02BE	44 42 59		DB	'DBY'
  831:					;
  832:	  02C1	BD			DB	T_UOP+13	;XBYTE TOKEN
  833:	  02C2	58 42 59		DB	'XBY'
  834:					;
  835:		N      00BE	T_ULAST	EQU	T_UOP+14	;LAST OPERATOR NEEDING PARENS
  836:					;
  837:	  02C5	BE			DB	T_ULAST
  838:	  02C6	50 49			DB	'PI'
  839:					;
  840:	  02C8	BF			DB	T_ULAST+1	;RND TOKEN
  841:	  02C9	52 4E 44		DB	'RND'
  842:					;
  843:	  02CC	C0			DB	T_ULAST+2	;GET TOKEN
  844:	  02CD	47 45 54		DB	'GET'
  845:					;
  846:	  02D0	C1			DB	T_ULAST+3	;FREE TOKEN

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 22



 Line  I  Addr  Code            Source

  847:	  02D1	46 52 45 45		DB	'FREE'
  848:					;
  849:	  02D5	C2			DB	T_ULAST+4	;LEN TOKEN
  850:	  02D6	4C 45 4E		DB	'LEN'
  851:					;
  852:		N      00C3	T_XTAL	EQU	T_ULAST+5	;CRYSTAL TOKEN
  853:	  02D9	C3			DB	T_XTAL
  854:	  02DA	58 54 41 4C		DB	'XTAL'
  855:					;
  856:		N      00C4	T_MTOP	EQU	T_ULAST+6	;MTOP
  857:	  02DE	C4			DB	T_MTOP
  858:	  02DF	4D 54 4F 50		DB	'MTOP'
  859:					;
  860:		N      00C6	T_IE	EQU	T_ULAST+8	;IE REGISTER
  861:	  02E3	C6			DB	T_IE
  862:	  02E4	49 45			DB	'IE'
  863:					;
  864:		N      00C7	T_IP	EQU	T_ULAST+9	;IP REGISTER
  865:	  02E6	C7			DB	T_IP
  866:	  02E7	49 50			DB	'IP'
  867:					;
  868:		N      00C8	TMR0	EQU	T_ULAST+10	;TIMER 0
  869:	  02E9	C8			DB	TMR0
  870:	  02EA	54 49 4D 45		DB	'TIMER0'
	  02EE	52 30
  871:					;
  872:		N      00C9	TMR1	EQU	T_ULAST+11	;TIMER 1
  873:	  02F0	C9			DB	TMR1
  874:	  02F1	54 49 4D 45		DB	'TIMER1'
	  02F5	52 31
  875:					;
  876:		N      00CA	TMR2	EQU	T_ULAST+12	;TIMER 2
  877:	  02F7	CA			DB	TMR2
  878:	  02F8	54 49 4D 45		DB	'TIMER2'
	  02FC	52 32
  879:					;
  880:		N      00C5	T_TIME	EQU	T_ULAST+7	;TIME
  881:	  02FE	C5			DB	T_TIME
  882:	  02FF	54 49 4D 45		DB	'TIME'
  883:					;
  884:		N      00CB	TT2C	EQU	T_ULAST+13	;T2CON
  885:	  0303	CB			DB	TT2C
  886:	  0304	54 32 43 4F		DB	'T2CON'
	  0308	4E
  887:					;
  888:		N      00CC	TTC	EQU	T_ULAST+14	;TCON
  889:	  0309	CC			DB	TTC
  890:	  030A	54 43 4F 4E		DB	'TCON'
  891:					;
  892:		N      00CD	TTM	EQU	T_ULAST+15	;TMOD
  893:	  030E	CD			DB	TTM
  894:	  030F	54 4D 4F 44		DB	'TMOD'
  895:					;
  896:		N      00CE	TRC2	EQU	T_ULAST+16	;RCAP2
  897:	  0313	CE			DB	TRC2
  898:	  0314	52 43 41 50		DB	'RCAP2'

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 23



 Line  I  Addr  Code            Source

	  0318	32
  899:					;
  900:		N      00CF	T_P1	EQU	T_ULAST+17	;P1
  901:	  0319	CF			DB	T_P1
  902:	  031A	50 4F 52 54		DB	'PORT1'
	  031E	31
  903:					;
  904:		N      00D0	T_PC	EQU	T_ULAST+18	;PCON
  905:	  031F	D0			DB	T_PC
  906:	  0320	50 43 4F 4E		DB	'PCON'
  907:					;
  908:		N      00D1	T_ASC	EQU	T_ULAST+19	;ASC TOKEN
  909:	  0324	D1			DB	T_ASC
  910:	  0325	41 53 43 28		DB	'ASC('
  911:					;
  912:		N      00D2	T_USE	EQU	T_ULAST+20	;USING TOKEN
  913:	  0329	D2			DB	T_USE
  914:	  032A	55 53 49 4E		DB	'USING('
	  032E	47 28
  915:	  0330	D2			DB	T_USE
  916:	  0331	55 2E 28		DB	'U.('
  917:					;
  918:		N      00D3	T_CHR	EQU	T_ULAST+21	;CHR TOKEN
  919:	  0334	D3			DB	T_CHR
  920:	  0335	43 48 52 28		DB	'CHR('
  921:					;
  922:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 24



 Line  I  Addr  Code            Source

  923:		N      00F0	T_CMND	EQU	0F0H		;COMMAND BASE
  924:					;
  925:	  0339	F0			DB	0F0H		;RUN TOKEN
  926:	  033A	52 55 4E		DB	'RUN'
  927:					;
  928:	  033D	F1			DB	0F1H		;LIST TOKEN
  929:	  033E	4C 49 53 54		DB	'LIST'
  930:					;
  931:	  0342	F2			DB	0F2H		;NULL TOKEN
  932:	  0343	4E 55 4C 4C		DB	'NULL'
  933:					;
  934:	  0347	F3			DB	0F3H		;NEW TOKEN
  935:	  0348	4E 45 57		DB	'NEW'
  936:					;
  937:	  034B	F4			DB	0F4H		;CONTINUE TOKEN
  938:	  034C	43 4F 4E 54		DB	'CONT'
  939:					;
  940:	  0350	F5			DB	0F5H		;PROGRAM TOKEN
  941:	  0351	50 52 4F 47		DB	'PROG'
  942:					;
  943:	  0355	F6			DB	0F6H		;TRANSFER TOKEN
  944:	  0356	58 46 45 52		DB	'XFER'
  945:					;
  946:	  035A	F7			DB	0F7H		;RAM MODE
  947:	  035B	52 41 4D		DB	'RAM'
  948:					;
  949:	  035E	F8			DB	0F8H		;ROM MODE
  950:	  035F	52 4F 4D		DB	'ROM'
  951:					;
  952:	  0362	F9			DB	0F9H		;INTELLIGENT PROM PROGRAMMING
  953:	  0363	46 50 52 4F		DB	'FPROG'
	  0367	47
  954:					;
  955:	  0368	FF			DB	0FFH		;END OF TABLE
  956:					;
  957:
  958:				; END OF INCLUDE LOOK52
  959:				;$INCLUDE(:F2:LOOK52.SRC)
  960:					;
  961:	  0369	45 58 54 52	EIG:	DB	'EXTRA IGNORED"'
	  036D	41 20 49 47
	  0371	4E 4F 52 45
	  0375	44 22
  962:					;
  963:	  0377	41 2D 53 54	EXA:	DB	'A-STACK"'
	  037B	41 43 4B 22
  964:					;
  965:	  037F	43 2D 53 54	EXC:	DB	'C-STACK"'
	  0383	41 43 4B 22
  966:					;
  967:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 25



 Line  I  Addr  Code            Source

  968:				;$INCLUDE(:F2:BAS52.RST)
  969:				; BEGINNING
  970:
  971:					;**************************************************************
  972:					;
  973:	  0387			CRST:	; This performs system initialzation, it was moved here so the
  974:					; new power on reset functions could be tested in an 8751.
  975:					;
  976:					;**************************************************************
  977:					;
  978:					; First, initialize SFR's
  979:					;
  980:	  0387	75 98 5A		MOV	SCON,#5AH	;INITIALIZE SFR'S
  981:	  038A	75 89 10		MOV	TMOD,#10H
  982:	  038D	75 88 54		MOV	TCON,#54H
  983:	  0390	75			DB	75H		;MOV DIRECT, # OP CODE
  984:	  0391	C8			DB	0C8H		;T2CON LOCATION
  985:	  0392	34			DB	34H		;CONFIGURATION BYTE
  986:					;
  987:	  0393	90 20 01		MOV	DPTR,#2001H	;READ CODE AT 2001H
  988:	  0396	E4			CLR	A
  989:	  0397	93			MOVC	A,@A+DPTR
  990:	  0398	B4 AA 03		CJNE	A,#0AAH,$+6	;IF IT IS AN AAH, DO USER RESET
  991:	  039B	12 20 90		LCALL	2090H
  992:					;
  993:	  039E	78 FF			MOV	R0,#IRAMTOP	;PUT THE TOP OF RAM IN R0
  994:	  03A0	E4			CLR	A		;ZERO THE ACC
  995:					;
  996:	  03A1	F6			MOV	@R0,A		;CLEAR INTERNAL MEMORY
  997:	  03A2	D8 FD			DJNZ	R0,$-1		;LOOP TIL DONE
  998:					;
  999:					; Now, test the external memory
 1000:					;
 1001:	  03A4	75 3E 4D		MOV	SPSAV,#CMNDSP	;SET UP THE STACK
 1002:	  03A7	85 3E 81		MOV	SP,SPSAV
 1003:					;
 1004:	  03AA	75 13 80		MOV	BOFAH,#HIGH ROMADR
 1005:	  03AD	75 14 11		MOV	BOFAL,#LOW ROMADR+17
 1006:	  03B0	90 80 00		MOV	DPTR,#ROMADR	;GET THE BYTE AT 8000H
 1007:	  03B3	E0			MOVX	A,@DPTR
 1008:	  03B4	C3			CLR	C
 1009:	  03B5	94 31			SUBB	A,#31H		;FOR BIAS
 1010:	  03B7	F5 45			MOV	MT1,A		;SAVE IN DIRECT MATH LOC
 1011:	  03B9	C2 E2			CLR	ACC.2		;SAVE FOR RESET
 1012:	  03BB	FF			MOV	R7,A		;SAVE IT IN R7
 1013:	  03BC	A3			INC	DPTR
 1014:	  03BD	B1 B2			ACALL	L31DPI		;GET SAVED BAUD RATE
 1015:	  03BF	12 08 89	     	LCALL	RCL
 1016:	  03C2	A3			INC	DPTR		;GET MEMTOP
 1017:	  03C3	B1 B2			ACALL	L31DPI
 1018:	  03C5	90 00 5F		MOV	DPTR,#5FH	;READ THE EXTERNAL BYTE
 1019:	  03C8	E0			MOVX	A,@DPTR
 1020:	  03C9	90 00 00		MOV	DPTR,#0		;ESTABLISH BASE FOR CLEAR
 1021:	  03CC	B4 A5 08		CJNE	A,#0A5H,CRS
 1022:	  03CF	E5 45			MOV	A,MT1
 1023:	  03D1	C2 E0			CLR	ACC.0		;CLEAR BIT ONE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 26



 Line  I  Addr  Code            Source

 1024:	  03D3	64 04			XRL	A,#4H
 1025:	  03D5	60 29			JZ	CR2
 1026:					;
 1027:	  03D7	BF 02 02	CRS:	CJNE	R7,#2,$+5
 1028:	  03DA	80 03			SJMP	$+5
 1029:	  03DC	BF 03 04		CJNE	R7,#3,$+7
 1030:	  03DF	D1 75			ACALL	CL_1
 1031:	  03E1	80 11			SJMP	CR1
 1032:					;
 1033:	  03E3	AB 83		CR0:	MOV	R3,DPH		;SAVE THE DPTR
 1034:	  03E5	A9 82			MOV	R1,DPL
 1035:	  03E7	A3			INC	DPTR
 1036:	  03E8	74 5A			MOV	A,#5AH
 1037:	  03EA	F0			MOVX	@DPTR,A
 1038:	  03EB	E0			MOVX	A,@DPTR
 1039:	  03EC	B4 5A 05		CJNE	A,#5AH,CR1
 1040:	  03EF	E4			CLR	A
 1041:	  03F0	F0			MOVX	@DPTR,A
 1042:	  03F1	BB E0 EF		CJNE	R3,#0E0H,CR0
 1043:					;
 1044:	  03F4	BB 03 00	CR1:	CJNE	R3,#03H,$+3	;NEED THIS MUCH RAM
 1045:	  03F7	40 8E			JC	CRST
 1046:	  03F9	90 01 0A		MOV	DPTR,#MEMTOP	;SAVE MEMTOP
 1047:	  03FC	B1 FB			ACALL	S31DP2		;SAVE MEMTOP AND SEED RCELL
 1048:	  03FE	D1 54			ACALL	CNEW		;CLEAR THE MEMORY AND SET UP POINTERS
 1049:					;
 1050:	  0400	D1 67		CR2:	ACALL	RC1		;SET UP STACKS IF NOT DONE
 1051:					;
 1052:	  0402	12 16 49		LCALL	AXTAL0		;DO THE CRYSTAL
 1053:	  0405	E5 45			MOV	A,MT1		;GET THE RESET BYTE
 1054:	  0407	B4 05 03		CJNE	A,#5,$+6
 1055:	  040A	12 40 39		LCALL	4039H
 1056:	  040D	50 0D			JNC	BG1		;CHECK FOR 0,1,2,3, OR 4
 1057:	  040F	30 E0 25		JNB	ACC.0,BG3	;NO RUN IF WRONG TYPE
 1058:	  0412	90 80 10		MOV	DPTR,#ROMADR+16
 1059:	  0415	E0			MOVX	A,@DPTR		;READ THE BYTE
 1060:	  0416	B4 55 1E		CJNE	A,#55H,BG3
 1061:	  0419	02 08 06		LJMP	CRUN
 1062:					;
 1063:	  041C	E4		BG1:	CLR	A		;DO BAUD RATE
 1064:	  041D	FB			MOV	R3,A
 1065:	  041E	F9			MOV	R1,A
 1066:	  041F	78 04			MOV	R0,#4
 1067:	  0421	20 B0 FD		JB	RXD,$		;LOOP UNTIL A CHARACTER IS RECEIVED
 1068:					;
 1069:	  0424	D8 FE		BG2:	DJNZ	R0,$		;FOUR CLOCKS, IN LOOP
 1070:	  0426	12 15 81		CALL	DEC3210+4	;NINE CLOCKS
 1071:	  0429	78 02			MOV	R0,#2		;ONE CLOCK
 1072:	  042B	30 B0 F6		JNB	RXD,BG2		;TWO CLOCKS, LOOP UNTIL DONE
 1073:	  042E	20 B0 FD		JB	RXD,$		;WAIT FOR STOP CHARACTER TO END
 1074:	  0431	30 B0 FD		JNB	RXD,$
 1075:	  0434	12 08 89		CALL	RCL		;LOAD THE TIMER
 1076:					;
 1077:	  0437	90 1F D3	BG3:	MOV	DPTR,#S_N	;GET THE MESSAGE
 1078:	  043A	D1 A5			ACALL	CRP		;PRINT IT
 1079:	  043C	02 17 7D		LJMP	CRAM

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 27



 Line  I  Addr  Code            Source

 1080:
 1081:				; END
 1082:				;$INCLUDE(:F2:BAS52.RST)
 1083:					;
 1084:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 28



 Line  I  Addr  Code            Source

 1085:					;***************************************************************
 1086:					;
 1087:					; CIPROG AND CPROG - Program a prom
 1088:					;
 1089:					;***************************************************************
 1090:					;
 1091:				;$INCLUDE(:F2:BAS52.PGM)
 1092:				;BEGINNING
 1093:
 1094:	  043F	7F 00		PG8:	MOV	R7,#00H		;PROGRAM ONE BYTE AT A TIME
 1095:	  0441	7E 01			MOV	R6,#01H
 1096:	  0443	7A 7F			MOV	R2,#HIGH ROMADR-1
 1097:	  0445	78 FF			MOV	R0,#LOW ROMADR-1;LOAD PROM ADDRESS
 1098:	  0447	91 98			ACALL	PG1+3
 1099:	  0449	0E			INC	R6
 1100:	  044A	E5			DB	0E5H		;MOV A DIRECT OP CODE
 1101:	  044B	CB			DB	0CBH		;ADDRESS OF R2CAP HIGH
 1102:	  044C	91 98			ACALL	PG1+3
 1103:	  044E	E5			DB	0E5H		;MOV A, DIRECT OP CODE
 1104:	  044F	CA			DB	0CAH		;R2CAP LOW
 1105:	  0450	7E 03			MOV	R6,#3
 1106:	  0452	79 09			MOV	R1,#LOW MEMTOP-1
 1107:	  0454	7B 01			MOV	R3,#HIGH MEMTOP
 1108:	  0456	91 98			ACALL	PG1+3		;SAVE MEMTOP
 1109:	  0458	80 37			SJMP	PGR
 1110:					;
 1111:	  045A	90 01 2A	CIPROG:	MOV	DPTR,#IPROGS	;LOAD IPROG LOCATION
 1112:	  045D	D2 33			SETB	INTELB
 1113:	  045F	80 05			SJMP	$+7		;GO DO PROG
 1114:					;
 1115:	  0461	90 01 28	CPROG:	MOV	DPTR,#PROGS	;LOAD PROG LOCATION
 1116:	  0464	C2 33			CLR	INTELB
 1117:					;
 1118:	  0466	B1 7A			ACALL	LD_T		;LOAD THE TIMER
 1119:	  0468	C2 95			CLR	PROMV		;TURN ON THE PROM VOLTAGE
 1120:	  046A	12 0E EA		CALL	DELTST		;SEE IF A CR
 1121:	  046D	70 D0			JNZ	PG8		;SAVE TIMER IF SO
 1122:	  046F	7C FE			MOV	R4,#0FEH
 1123:	  0471	D2 1D			SETB	INBIT
 1124:	  0473	B1 53			ACALL	ROMFD		;GET THE ROM ADDRESS OF THE LAST LOCATION
 1125:	  0475	12 18 55		CALL	TEMPD		;SAVE THE ADDRESS
 1126:	  0478	EC			MOV	A,R4		;GET COUNT
 1127:	  0479	F4			CPL	A
 1128:	  047A	12 14 A3		CALL	TWO_R2		;PUT IT ON THE STACK
 1129:	  047D	12 19 A1		CALL	FP_BASE+14	;OUTPUT IT
 1130:	  0480	B1 16			ACALL	CCAL		;GET THE PROGRAM
 1131:	  0482	D1 9D			ACALL	CRLF		;DO CRLF
 1132:	  0484	A8 0E			MOV	R0,TEMP4	;GET ADDRESS
 1133:	  0486	AA 0F			MOV	R2,TEMP5
 1134:	  0488	74 55			MOV	A,#55H		;LOAD SIGNIFIER
 1135:	  048A	0E			INC	R6		;LOAD LEN + 1
 1136:	  048B	BE 00 01		CJNE	R6,#00,$+4
 1137:	  048E	0F			INC	R7
 1138:	  048F	91 9B			ACALL	PG2-2
 1139:					;
 1140:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 29



 Line  I  Addr  Code            Source

 1141:	  0491	D2 95		PGR:	SETB	PROMV
 1142:	  0493	A1 3A			AJMP	C_K
 1143:					;
 1144:	  0495	8B A0		PG1:	MOV	P2,R3		;GET THE BYTE TO PROGRAM
 1145:	  0497	E3			MOVX	A,@R1
 1146:	  0498	12 15 68		LCALL	INC3210		;BUMP POINTERS
 1147:	  049B	7D 01			MOV	R5,#1		;SET UP INTELLIGENT COUMTER
 1148:					;
 1149:	  049D	FC		PG2:	MOV	R4,A		;SAVE THE BYTE IN R4
 1150:	  049E	91 D6			ACALL	PG7		;PROGRAM THE BYTE
 1151:	  04A0	91 F0			ACALL	PG9
 1152:	  04A2	20 33 0C		JB	INTELB,PG4	;SEE IF INTELLIGENT PROGRAMMING
 1153:					;
 1154:	  04A5	6C		PG3:	XRL	A,R4
 1155:	  04A6	70 20			JNZ	PG6		;ERROR IF NOT THE SAME
 1156:	  04A8	12 16 39		CALL	DEC76		;BUMP THE COUNTERS
 1157:	  04AB	70 E8			JNZ	PG1		;LOOP IF NOT DONE
 1158:	  04AD	53 D0 E7		ANL	PSW,#11100111B	;INSURE RB0
 1159:	  04B0	22			RET
 1160:					;
 1161:	  04B1	6C		PG4:	XRL	A,R4		;SEE IF PROGRAMMED
 1162:	  04B2	70 0F			JNZ	PG5		;JUMP IF NOT
 1163:	  04B4	EC			MOV	A,R4		;GET THE DATA BACK
 1164:	  04B5	91 D6			ACALL	PG7		;PROGRAM THE LOCATION
 1165:	  04B7	91 E0			ACALL	ZRO		;AGAIN
 1166:	  04B9	91 E0			ACALL	ZRO		;AND AGAIN
 1167:	  04BB	91 E0			ACALL	ZRO		;AND AGAIN
 1168:	  04BD	DD F8			DJNZ	R5,$-6		;KEEP DOING IT
 1169:	  04BF	91 F0			ACALL	PG9		;RESET PROG
 1170:	  04C1	80 E2			SJMP	PG3		;FINISH THE LOOP
 1171:					;
 1172:	  04C3	0D		PG5:	INC	R5		;BUMP THE COUNTER
 1173:	  04C4	EC			MOV	A,R4		;GET THE BYTE
 1174:	  04C5	BD 19 D5		CJNE	R5,#25,PG2	;SEE IF TRIED 25 TIMES
 1175:					;
 1176:	  04C8	D2 95		PG6:	SETB	PROMV		;TURN OFF PROM VOLTAGE
 1177:	  04CA	75 D0 00		MOV	PSW,#0		;INSURE RB0
 1178:	  04CD	30 2F E0		JNB	DIRF,PG4-1	;EXIT IF IN RUN MODE
 1179:	  04D0	90 1F 9A		MOV	DPTR,#E16X	;PROGRAMMING ERROR
 1180:					;
 1181:	  04D3	02 18 90	ERRLK:	LJMP	ERROR		;PROCESS THE ERROR
 1182:					;
 1183:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 30



 Line  I  Addr  Code            Source

 1184:	  04D6	88 80		PG7:	MOV	P0,R0		;SET UP THE PORTS
 1185:	  04D8	8A A0			MOV	P2,R2		;LATCH LOW ORDER ADDRESS
 1186:	  04DA	B1 05			ACALL	PG11		;DELAY FOR 8748/9
 1187:	  04DC	C2 93			CLR	ALED
 1188:	  04DE	F5 80			MOV	P0,A		;PUT DATA ON THE PORT
 1189:					;
 1190:	  04E0	00		ZRO:	NOP			;SETTLEING TIME + FP ZERO
 1191:	  04E1	00			NOP
 1192:	  04E2	00			NOP
 1193:	  04E3	00			NOP
 1194:	  04E4	00			NOP
 1195:	  04E5	00			NOP
 1196:	  04E6	B1 05			ACALL	PG11		;DELAY A WHILE
 1197:	  04E8	C2 94			CLR	PROMP		;START PROGRAMMING
 1198:	  04EA	B1 27			ACALL	TIMER_LOAD	;START THE TIMER
 1199:	  04EC	30 8F FD		JNB	TF1,$		;WAIT FOR PART TO PROGRAM
 1200:	  04EF	22			RET			;EXIT
 1201:					;
 1202:	  04F0	D2 94		PG9:	SETB	PROMP
 1203:	  04F2	B1 05			ACALL	PG11		;DELAY FOR A WHILE
 1204:	  04F4	30 B2 FD		JNB	P3.2,$		;LOOP FOR EEPROMS
 1205:	  04F7	75 80 FF		MOV	P0,#0FFH
 1206:	  04FA	C2 B7			CLR	P3.7		;LOWER READ
 1207:	  04FC	B1 05			ACALL	PG11
 1208:	  04FE	E5 80			MOV	A,P0		;READ THE PORT
 1209:	  0500	D2 B7			SETB	P3.7
 1210:	  0502	D2 93			SETB	ALED
 1211:	  0504	22			RET
 1212:					;
 1213:	  0505	75 0F 0C	PG11:	MOV	TEMP5,#12	;DELAY 30uS AT 12 MHZ
 1214:	  0508	D5 0F FD		DJNZ	TEMP5,$
 1215:	  050B	22			RET
 1216:					;
 1217:
 1218:				;END
 1219:				;$INCLUDE(:F2:BAS52.PGM)
 1220:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 31



 Line  I  Addr  Code            Source

 1221:					;**************************************************************
 1222:					;
 1223:	  050C			PGU:	;PROGRAM A PROM FOR THE USER
 1224:					;
 1225:					;**************************************************************
 1226:					;
 1227:	  050C	C2 95			CLR	PROMV		;TURN ON THE VOLTAGE
 1228:	  050E	75 D0 18		MOV	PSW,#00011000B	;SELECT RB3
 1229:	  0511	91 95			ACALL	PG1		;DO IT
 1230:	  0513	D2 95			SETB	PROMV		;TURN IT OFF
 1231:	  0515	22			RET
 1232:					;
 1233:					;
 1234:					;*************************************************************
 1235:					;
 1236:	  0516			CCAL:	; Set up for prom moves
 1237:					; R3:R1 gets source
 1238:					; R7:R6 gets # of bytes
 1239:					;
 1240:					;*************************************************************
 1241:					;
 1242:	  0516	B1 82			ACALL	GETEND		;GET THE LAST LOCATION
 1243:	  0518	A3			INC	DPTR		;BUMP TO LOAD EOF
 1244:	  0519	AB 13			MOV	R3,BOFAH
 1245:	  051B	A9 14			MOV	R1,BOFAL	;RESTORE START
 1246:	  051D	C3			CLR	C		;PREPARE FOR SUBB
 1247:	  051E	E5 82			MOV	A,DPL		;SUB DPTR - BOFA > R7:R6
 1248:	  0520	99			SUBB	A,R1
 1249:	  0521	FE			MOV	R6,A
 1250:	  0522	E5 83			MOV	A,DPH
 1251:	  0524	9B			SUBB	A,R3
 1252:	  0525	FF			MOV	R7,A
 1253:	  0526	22			RET
 1254:					;
 1255:					;
 1256:				;$INCLUDE(:F2:BAS52.TL)
 1257:				;BEGINNING
 1258:
 1259:					;**************************************************************
 1260:					;
 1261:	  0527			TIMER_LOAD:; Load the timer
 1262:					;
 1263:					;*************************************************************
 1264:					;
 1265:	  0527	B1 26			ACALL	$-1		;DELAY FOUR CLOCKS
 1266:	  0529	C2 8E			CLR	TR1		;STOP IT WHILE IT'S LOADED
 1267:	  052B	85 40 8D		MOV	TH1,T_HH
 1268:	  052E	85 41 8B		MOV	TL1,T_LL
 1269:	  0531	C2 8F			CLR	TF1		;CLEAR THE OVERFLOW FLAG
 1270:	  0533	D2 8E			SETB	TR1		;START IT NOW
 1271:	  0535	22			RET
 1272:					;
 1273:
 1274:				;END
 1275:				;$INCLUDE(:F2:BAS52.TL)
 1276:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 32



 Line  I  Addr  Code            Source

 1277:					;***************************************************************
 1278:					;
 1279:	  0536			CROM:	; The command action routine - ROM - Run out of rom
 1280:					;
 1281:					;***************************************************************
 1282:					;
 1283:	  0536	C2 17			CLR	CONB		;CAN'T CONTINUE IF MODE CHANGE
 1284:	  0538	B1 3D			ACALL	RO1		;DO IT
 1285:					;
 1286:	  053A	02 10 7E	C_K:	LJMP	CL3		;EXIT
 1287:					;
 1288:	  053D	12 0F 3E	RO1:	CALL	INTGER		;SEE IF INTGER PRESENT
 1289:	  0540	AC 00			MOV	R4,R0B0		;SAVE THE NUMBER
 1290:	  0542	50 02			JNC	$+4
 1291:	  0544	7C 01			MOV	R4,#01H		;ONE IF NO INTEGER PRESENT
 1292:	  0546	B1 53			ACALL	ROMFD		;FIND THE PROGRAM
 1293:	  0548	BC 00 11		CJNE	R4,#0,RFX	;EXIT IF R4 <> 0
 1294:	  054B	A3			INC	DPTR		;BUMP PAST TAG
 1295:	  054C	85 83 13		MOV	BOFAH,DPH	;SAVE THE ADDRESS
 1296:	  054F	85 82 14		MOV	BOFAL,DPL
 1297:	  0552	22			RET
 1298:					;
 1299:	  0553	90 80 10	ROMFD:	MOV	DPTR,#ROMADR+16	;START OF USER PROGRAM
 1300:					;
 1301:	  0556	E0		RF1:	MOVX	A,@DPTR		;GET THE BYTE
 1302:	  0557	B4 55 09		CJNE	A,#55H,RF3	;SEE IF PROPER TAG
 1303:	  055A	DC 01			DJNZ	R4,RF2		;BUMP COUNTER
 1304:					;
 1305:	  055C	22		RFX:	RET			;DPTR HAS THE START ADDRESS
 1306:					;
 1307:	  055D	A3		RF2:	INC	DPTR		;BUMP PAST TAG
 1308:	  055E	B1 A4			ACALL	G5
 1309:	  0560	A3			INC	DPTR		;BUMP TO NEXT PROGRAM
 1310:	  0561	80 F3			SJMP	RF1		;DO IT AGAIN
 1311:					;
 1312:	  0563	10 1D F6	RF3:	JBC	INBIT,RFX	;EXIT IF SET
 1313:					;
 1314:	  0566	90 1F C9	NOGO:	MOV	DPTR,#NOROM
 1315:	  0569	81 D3			AJMP	ERRLK
 1316:					;
 1317:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 33



 Line  I  Addr  Code            Source

 1318:					;***************************************************************
 1319:					;
 1320:	  056B			L20DPI:	; load R2:R0 with the location the DPTR is pointing to
 1321:					;
 1322:					;***************************************************************
 1323:					;
 1324:	  056B	E0			MOVX	A,@DPTR
 1325:	  056C	FA			MOV	R2,A
 1326:	  056D	A3			INC	DPTR
 1327:	  056E	E0			MOVX	A,@DPTR
 1328:	  056F	F8			MOV	R0,A
 1329:	  0570	22			RET			;DON'T BUMP DPTR
 1330:					;
 1331:					;***************************************************************
 1332:					;
 1333:	  0571			X31DP:	; swap R3:R1 with DPTR
 1334:					;
 1335:					;***************************************************************
 1336:					;
 1337:	  0571	CB			XCH	A,R3
 1338:	  0572	C5 83			XCH	A,DPH
 1339:	  0574	CB			XCH	A,R3
 1340:	  0575	C9			XCH	A,R1
 1341:	  0576	C5 82			XCH	A,DPL
 1342:	  0578	C9			XCH	A,R1
 1343:	  0579	22			RET
 1344:					;
 1345:					;***************************************************************
 1346:					;
 1347:	  057A			LD_T:	; Load the timer save location with the value the DPTR is
 1348:					; pointing to.
 1349:					;
 1350:					;****************************************************************
 1351:					;
 1352:	  057A	E0			MOVX	A,@DPTR
 1353:	  057B	F5 40			MOV	T_HH,A
 1354:	  057D	A3			INC	DPTR
 1355:	  057E	E0			MOVX	A,@DPTR
 1356:	  057F	F5 41			MOV	T_LL,A
 1357:	  0581	22			RET
 1358:					;
 1359:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 34



 Line  I  Addr  Code            Source

 1360:					;
 1361:					;***************************************************************
 1362:					;
 1363:					;GETLIN - FIND THE LOCATION OF THE LINE NUMBER IN R3:R1
 1364:					;         IF ACC = 0 THE LINE WAS NOT FOUND I.E. R3:R1
 1365:					;         WAS TOO BIG, ELSE ACC <> 0 AND THE DPTR POINTS
 1366:					;         AT THE LINE THAT IS GREATER THAN OR EQUAL TO THE
 1367:					;         VALUE IN R3:R1.
 1368:					;
 1369:					;***************************************************************
 1370:					;
 1371:	  0582	D2 29		GETEND:	SETB	ENDBIT		;GET THE END OF THE PROGRAM
 1372:					;
 1373:	  0584	12 0E A4	GETLIN:	CALL	DP_B		;GET BEGINNING ADDRESS
 1374:					;
 1375:	  0587	12 0A AC	G1:	CALL	B_C
 1376:	  058A	60 12			JZ	G3		;EXIT WITH A ZERO IN A IF AT END
 1377:	  058C	A3			INC	DPTR		;POINT AT THE LINE NUMBER
 1378:	  058D	20 29 0A		JB	ENDBIT,G2	;SEE IF WE WANT TO FIND THE END
 1379:	  0590	B1 C4			ACALL	DCMPX		;SEE IF (DPTR) = R3:R1
 1380:	  0592	B1 BA			ACALL	DECDP		;POINT AT LINE COUNT
 1381:	  0594	E0			MOVX	A,@DPTR		;PUT LINE LENGTH INTO ACC
 1382:	  0595	20 2A 06		JB	UBIT,G3		;EXIT IF EQUAL
 1383:	  0598	40 04			JC	G3		;SEE IF LESS THAN OR ZERO
 1384:					;
 1385:	  059A	B1 D6		G2:	ACALL	ADDPTR		;ADD IT TO DPTR
 1386:	  059C	80 E9			SJMP	G1		;LOOP
 1387:					;
 1388:	  059E	C2 29		G3:	CLR	ENDBIT		;RESET ENDBIT
 1389:	  05A0	22			RET			;EXIT
 1390:					;
 1391:	  05A1	90 02 00	G4:	MOV	DPTR,#PSTART	;DO RAM
 1392:					;
 1393:	  05A4	D2 29		G5:	SETB	ENDBIT
 1394:	  05A6	80 DF			SJMP	G1		;NOW DO TEST
 1395:					;
 1396:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 35



 Line  I  Addr  Code            Source

 1397:					;***************************************************************
 1398:					;
 1399:					; LDPTRI - Load the DATA POINTER with the value it is pointing
 1400:					;          to - DPH = (DPTR) , DPL = (DPTR+1)
 1401:					;
 1402:					; acc gets wasted
 1403:					;
 1404:					;***************************************************************
 1405:					;
 1406:	  05A8	E0		LDPTRI:	MOVX	A,@DPTR		;GET THE HIGH BYTE
 1407:	  05A9	C0 E0			PUSH	ACC		;SAVE IT
 1408:	  05AB	A3			INC	DPTR		;BUMP THE POINTER
 1409:	  05AC	E0			MOVX	A,@DPTR		;GET THE LOW BYTE
 1410:	  05AD	F5 82			MOV	DPL,A		;PUT IT IN DPL
 1411:	  05AF	D0 83			POP	DPH		;GET THE HIGH BYTE
 1412:	  05B1	22			RET			;GO BACK
 1413:					;
 1414:					;***************************************************************
 1415:					;
 1416:					;L31DPI - LOAD R3 WITH (DPTR) AND R1 WITH (DPTR+1)
 1417:					;
 1418:					;ACC GETS CLOBBERED
 1419:					;
 1420:					;***************************************************************
 1421:					;
 1422:	  05B2	E0		L31DPI:	MOVX	A,@DPTR		;GET THE HIGH BYTE
 1423:	  05B3	FB			MOV	R3,A		;PUT IT IN THE REG
 1424:	  05B4	A3			INC	DPTR		;BUMP THE POINTER
 1425:	  05B5	E0			MOVX	A,@DPTR		;GET THE NEXT BYTE
 1426:	  05B6	F9			MOV	R1,A		;SAVE IT
 1427:	  05B7	22			RET
 1428:					;
 1429:					;***************************************************************
 1430:					;
 1431:					;DECDP - DECREMENT THE DATA POINTER - USED TO SAVE SPACE
 1432:					;
 1433:					;***************************************************************
 1434:					;
 1435:	  05B8	B1 BA		DECDP2:	ACALL	DECDP
 1436:					;
 1437:	  05BA	C5 82		DECDP:	XCH	A,DPL		;GET DPL
 1438:	  05BC	70 02			JNZ	$+4		;BUMP IF ZERO
 1439:	  05BE	15 83			DEC	DPH
 1440:	  05C0	14			DEC	A		;DECREMENT IT
 1441:	  05C1	C5 82			XCH	A,DPL		;GET A BACK
 1442:	  05C3	22			RET			;EXIT
 1443:					;
 1444:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 36



 Line  I  Addr  Code            Source

 1445:					;***************************************************************
 1446:					;
 1447:					;DCMPX - DOUBLE COMPARE - COMPARE (DPTR) TO R3:R1
 1448:					;R3:R1 - (DPTR) = SET CARRY FLAG
 1449:					;
 1450:					;IF R3:R1 > (DPTR) THEN C = 0
 1451:					;IF R3:R1 < (DPTR) THEN C = 1
 1452:					;IF R3:R1 = (DPTR) THEN C = 0
 1453:					;
 1454:					;***************************************************************
 1455:					;
 1456:	  05C4	C2 2A		DCMPX:	CLR	UBIT		;ASSUME NOT EQUAL
 1457:	  05C6	E0			MOVX	A,@DPTR		;GET THE BYTE
 1458:	  05C7	B5 03 0A		CJNE	A,R3B0,D1	;IF A IS GREATER THAN R3 THEN NO CARRY
 1459:								;WHICH IS R3<@DPTR = NO CARRY AND
 1460:								;R3>@DPTR CARRY IS SET
 1461:	  05CA	A3			INC	DPTR		;BUMP THE DATA POINTER
 1462:	  05CB	E0			MOVX	A,@DPTR		;GET THE BYTE
 1463:	  05CC	B1 BA			ACALL	DECDP		;PUT DPTR BACK
 1464:	  05CE	B5 01 03		CJNE	A,R1B0,D1	;DO THE COMPARE
 1465:	  05D1	B3			CPL	C		;FLIP CARRY
 1466:					;
 1467:	  05D2	B2 2A			CPL	UBIT		;SET IT
 1468:	  05D4	B3		D1:	CPL	C		;GET THE CARRY RIGHT
 1469:	  05D5	22			RET			;EXIT
 1470:					;
 1471:					;***************************************************************
 1472:					;
 1473:					; ADDPTR - Add acc to the dptr
 1474:					;
 1475:					; acc gets wasted
 1476:					;
 1477:					;***************************************************************
 1478:					;
 1479:	  05D6	25 82		ADDPTR:	ADD	A,DPL		;ADD THE ACC TO DPL
 1480:	  05D8	F5 82			MOV	DPL,A		;PUT IT IN DPL
 1481:	  05DA	50 02			JNC	$+4		;JUMP IF NO CARRY
 1482:	  05DC	05 83			INC	DPH		;BUMP DPH
 1483:	  05DE	22			RET			;EXIT
 1484:					;
 1485:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 37



 Line  I  Addr  Code            Source

 1486:					;*************************************************************
 1487:					;
 1488:	  05DF			LCLR:	; Set up the storage allocation
 1489:					;
 1490:					;*************************************************************
 1491:					;
 1492:	  05DF	D1 92			ACALL	ICLR		;CLEAR THE INTERRUPTS
 1493:	  05E1	B1 A1			ACALL	G4		;PUT END ADDRESS INTO DPTR
 1494:	  05E3	74 06			MOV	A,#6		;ADJUST MATRIX SPACE
 1495:	  05E5	B1 D6			ACALL	ADDPTR		;ADD FOR PROPER BOUNDS
 1496:	  05E7	B1 71			ACALL	X31DP		;PUT MATRIX BOUNDS IN R3:R1
 1497:	  05E9	90 01 08		MOV	DPTR,#MT_ALL	;SAVE R3:R1 IN MATRIX FREE SPACE
 1498:	  05EC	B1 FD			ACALL	S31DP		;DPTR POINTS TO MEMTOP
 1499:	  05EE	B1 B2			ACALL	L31DPI		;LOAD MEMTOP INTO R3:R1
 1500:	  05F0	90 01 22		MOV	DPTR,#STR_AL	;GET MEMORY ALLOCATED FOR STRINGS
 1501:	  05F3	B1 A8			ACALL	LDPTRI
 1502:	  05F5	12 0A 0A		CALL	DUBSUB		;R3:R1 = MEMTOP - STRING ALLOCATION
 1503:	  05F8	90 01 04		MOV	DPTR,#VARTOP	;SAVE R3:R1 IN VARTOP
 1504:					;
 1505:					; FALL THRU TO S31DP2
 1506:					;
 1507:					;***************************************************************
 1508:					;
 1509:					;S31DP - STORE R3 INTO (DPTR) AND R1 INTO (DPTR+1)
 1510:					;
 1511:					;ACC GETS CLOBBERED
 1512:					;
 1513:					;***************************************************************
 1514:					;
 1515:	  05FB	B1 FD		S31DP2:	ACALL	S31DP		;DO IT TWICE
 1516:					;
 1517:	  05FD	EB		S31DP:	MOV	A,R3		;GET R3 INTO ACC
 1518:	  05FE	F0			MOVX	@DPTR,A		;STORE IT
 1519:	  05FF	A3			INC	DPTR		;BUMP DPTR
 1520:	  0600	E9			MOV	A,R1		;GET R1
 1521:	  0601	F0			MOVX	@DPTR,A		;STORE IT
 1522:	  0602	A3			INC	DPTR		;BUMP IT AGAIN TO SAVE PROGRAM SPACE
 1523:	  0603	22			RET			;GO BACK
 1524:					;
 1525:					;
 1526:					;***************************************************************
 1527:					;
 1528:	  0604			STRING:	; Allocate memory for strings
 1529:					;
 1530:					;***************************************************************
 1531:					;
 1532:	  0604	12 0E 8E		LCALL	TWO		;R3:R1 = NUMBER, R2:R0 = LEN
 1533:	  0607	90 01 22		MOV	DPTR,#STR_AL	;SAVE STRING ALLOCATION
 1534:	  060A	B1 FD			ACALL	S31DP
 1535:	  060C	0E			INC	R6		;BUMP
 1536:	  060D	8E 3F			MOV	S_LEN,R6	;SAVE STRING LENGTH
 1537:	  060F	C1 5C			AJMP	RCLEAR		;CLEAR AND SET IT UP
 1538:					;
 1539:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 38



 Line  I  Addr  Code            Source

 1540:					;***************************************************************
 1541:					;
 1542:					; F_VAR - Find  the variable in symbol table
 1543:					;         R7:R6 contain the variable name
 1544:					;         If not found create a zero entry and set the carry
 1545:					;         R2:R0 has the address of variable on return
 1546:					;
 1547:					;***************************************************************
 1548:					;
 1549:	  0611	90 01 04	F_VAR:	MOV	DPTR,#VARTOP	;PUT VARTOP IN DPTR
 1550:	  0614	B1 A8			ACALL	LDPTRI
 1551:	  0616	B1 B8			ACALL	DECDP2		;ADJUST DPTR FOR LOOKUP
 1552:					;
 1553:	  0618	E0		F_VAR0:	MOVX	A,@DPTR		;LOAD THE VARIABLE
 1554:	  0619	60 20			JZ	F_VAR2		;TEST IF AT THE END OF THE TABLE
 1555:	  061B	A3			INC	DPTR		;BUMP FOR NEXT BYTE
 1556:	  061C	B5 07 0F		CJNE	A,R7B0,F_VAR1	;SEE IF MATCH
 1557:	  061F	E0			MOVX	A,@DPTR		;LOAD THE NAME
 1558:	  0620	B5 06 0B		CJNE	A,R6B0,F_VAR1
 1559:					;
 1560:					; Found the variable now adjust and put in R2:R0
 1561:					;
 1562:	  0623	E5 82		DLD:	MOV	A,DPL		;R2:R0 = DPTR-2
 1563:	  0625	94 02			SUBB	A,#2
 1564:	  0627	F8			MOV	R0,A
 1565:	  0628	E5 83			MOV	A,DPH
 1566:	  062A	94 00			SUBB	A,#0		;CARRY IS CLEARED
 1567:	  062C	FA			MOV	R2,A
 1568:	  062D	22			RET
 1569:					;
 1570:	  062E	E5 82		F_VAR1:	MOV	A,DPL		;SUBTRACT THE STACK SIZE+ADJUST
 1571:	  0630	C3			CLR	C
 1572:	  0631	94 09			SUBB	A,#STESIZ
 1573:	  0633	F5 82			MOV	DPL,A		;RESTORE DPL
 1574:	  0635	50 E1			JNC	F_VAR0
 1575:	  0637	15 83			DEC	DPH
 1576:	  0639	80 DD			SJMP	F_VAR0		;CONTINUE COMPARE
 1577:					;
 1578:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 39



 Line  I  Addr  Code            Source

 1579:					;
 1580:					; Add the entry to the symbol table
 1581:					;
 1582:	  063B	12 0D F8	F_VAR2:	LCALL	R76S		;SAVE R7 AND R6
 1583:	  063E	C3			CLR	C
 1584:	  063F	D1 23			ACALL	DLD		;BUMP THE POINTER TO GET ENTRY ADDRESS
 1585:					;
 1586:					; Adjust pointer and save storage allocation
 1587:					; and make sure we aren't wiping anything out
 1588:					; First calculate new storage allocation
 1589:					;
 1590:	  0641	E8			MOV	A,R0
 1591:	  0642	94 06			SUBB	A,#STESIZ-3	;NEED THIS MUCH RAM
 1592:	  0644	F9			MOV	R1,A
 1593:	  0645	EA			MOV	A,R2
 1594:	  0646	94 00			SUBB	A,#0
 1595:	  0648	FB			MOV	R3,A
 1596:					;
 1597:					; Now save the new storage allocation
 1598:					;
 1599:	  0649	90 01 06		MOV	DPTR,#ST_ALL
 1600:	  064C	B1 FD			CALL	S31DP		;SAVE STORAGE ALLOCATION
 1601:					;
 1602:					; Now make sure we didn't blow it, by wiping out MT_ALL
 1603:					;
 1604:	  064E	B1 C4			ACALL	DCMPX		;COMPARE STORAGE ALLOCATION
 1605:	  0650	40 32			JC	CCLR3		;ERROR IF CARRY
 1606:	  0652	D3			SETB	C		;DID NOT FIND ENTRY
 1607:	  0653	22			RET			;EXIT IF TEST IS OK
 1608:					;
 1609:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 40



 Line  I  Addr  Code            Source

 1610:					;***************************************************************
 1611:					;
 1612:					; Command action routine - NEW
 1613:					;
 1614:					;***************************************************************
 1615:					;
 1616:	  0654	90 02 00	CNEW:	MOV	DPTR,#PSTART	;SAVE THE START OF PROGRAM
 1617:	  0657	74 01			MOV	A,#EOF		;END OF FILE
 1618:	  0659	F0			MOVX	@DPTR,A		;PUT IT IN MEMORY
 1619:					;
 1620:					; falls thru
 1621:					;
 1622:					;*****************************************************************
 1623:					;
 1624:					; The statement action routine - CLEAR
 1625:					;
 1626:					;*****************************************************************
 1627:					;
 1628:	  065A	C2 15			CLR	LINEB		;SET UP FOR RUN AND GOTO
 1629:					;
 1630:	  065C	B1 DF		RCLEAR:	ACALL	LCLR		;CLEAR THE INTERRUPTS, SET UP MATRICES
 1631:	  065E	90 01 0A		MOV	DPTR,#MEMTOP	;PUT MEMTOP IN R3:R1
 1632:	  0661	B1 B2			ACALL	L31DPI
 1633:	  0663	B1 A1			ACALL	G4		;DPTR GETS END ADDRESS
 1634:	  0665	D1 75			ACALL	CL_1		;CLEAR THE MEMORY
 1635:					;
 1636:	  0667	90 00 FE	RC1:	MOV	DPTR,#STACKTP	;POINT AT CONTROL STACK TOP
 1637:	  066A	E4			CLR	A		;CONTROL UNDERFLOW
 1638:					;
 1639:	  066B	F0		RC2:	MOVX	@DPTR,A		;SAVE IN MEMORY
 1640:	  066C	75 11 FE		MOV	CSTKA,#STACKTP
 1641:	  066F	75 09 FE		MOV	ASTKA,#STACKTP
 1642:	  0672	C2 17			CLR	CONB		;CAN'T CONTINUE
 1643:	  0674	22			RET
 1644:					;
 1645:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 41



 Line  I  Addr  Code            Source

 1646:					;***************************************************************
 1647:					;
 1648:					; Loop until the memory is cleared
 1649:					;
 1650:					;***************************************************************
 1651:					;
 1652:	  0675	A3		CL_1:	INC	DPTR		;BUMP MEMORY POINTER
 1653:	  0676	E4			CLR	A		;CLEAR THE MEMORY
 1654:	  0677	F0			MOVX	@DPTR,A		;CLEAR THE RAM
 1655:	  0678	E0			MOVX	A,@DPTR		;READ IT
 1656:	  0679	70 09			JNZ	CCLR3		;MAKE SURE IT IS CLEARED
 1657:	  067B	EB			MOV	A,R3		;GET POINTER FOR COMPARE
 1658:	  067C	B5 83 F6		CJNE	A,DPH,CL_1	;SEE TO LOOP
 1659:	  067F	E9			MOV	A,R1		;NOW TEST LOW BYTE
 1660:	  0680	B5 82 F2		CJNE	A,DPL,CL_1
 1661:					;
 1662:	  0683	22		CL_2:	RET
 1663:					;
 1664:	  0684	02 15 A7	CCLR3:	JMP	TB		;ALLOCATED MEMORY DOESN'T EXSIST
 1665:					;
 1666:					;**************************************************************
 1667:					;
 1668:	  0687			SCLR:	;Entry point for clear return
 1669:					;
 1670:					;**************************************************************
 1671:					;
 1672:	  0687	12 0E EA		CALL	DELTST		;TEST FOR A CR
 1673:	  068A	50 D0			JNC	RCLEAR
 1674:	  068C	12 0E E0		CALL	GCI1		;BUMP THE TEST POINTER
 1675:	  068F	B4 49 D5		CJNE	A,#'I',RC1	;SEE IF I, ELSE RESET THE STACK
 1676:					;
 1677:					;**************************************************************
 1678:					;
 1679:	  0692			ICLR:	; Clear interrupts and system garbage
 1680:					;
 1681:					;**************************************************************
 1682:					;
 1683:	  0692	30 12 02		JNB	INTBIT,$+5	;SEE IF BASIC HAS INTERRUPTS
 1684:	  0695	C2 AA			CLR	EX1		;IF SO, CLEAR INTERRUPTS
 1685:	  0697	53 22 20		ANL	34,#00100000B	;SET INTERRUPTS + CONTINUE
 1686:	  069A	32			RETI
 1687:					;
 1688:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 42



 Line  I  Addr  Code            Source

 1689:					;***************************************************************
 1690:					;
 1691:					;OUTPUT ROUTINES
 1692:					;
 1693:					;***************************************************************
 1694:					;
 1695:	  069B	D1 9D		CRLF2:	ACALL	CRLF		;DO TWO CRLF'S
 1696:					;
 1697:	  069D	7D 0D		CRLF:	MOV	R5,#CR		;LOAD THE CR
 1698:	  069F	F1 09			ACALL	TEROT		;CALL TERMINAL OUT
 1699:	  06A1	7D 0A			MOV	R5,#LF		;LOAD THE LF
 1700:	  06A3	E1 09			AJMP	TEROT		;OUTPUT IT AND RETURN
 1701:					;
 1702:					;PRINT THE MESSAGE ADDRESSED IN ROM OR RAM BY THE DPTR
 1703:					;ENDS WITH THE CHARACTER IN R4
 1704:					;DPTR HAS THE ADDRESS OF THE TERMINATOR
 1705:					;
 1706:	  06A5	D1 9D		CRP:	ACALL	CRLF		;DO A CR THEN PRINT ROM
 1707:					;
 1708:	  06A7	E4		ROM_P:	CLR	A		;CLEAR A FOR LOOKUP
 1709:	  06A8	93			MOVC	A,@A+DPTR	;GET THE CHARACTER
 1710:	  06A9	C2 E7			CLR	ACC.7		;CLEAR MS BIT
 1711:	  06AB	B4 22 01		CJNE	A,#'"',$+4	;EXIT IF TERMINATOR
 1712:	  06AE	22			RET
 1713:	  06AF	D2 34			SETB	C0ORX1
 1714:					;
 1715:	  06B1	FD		PN1:	MOV	R5,A		;OUTPUT THE CHARACTER
 1716:	  06B2	F1 09			ACALL	TEROT
 1717:	  06B4	A3			INC	DPTR		;BUMP THE POINTER
 1718:	  06B5	80 04			SJMP	PN0
 1719:					;
 1720:	  06B7	B1 71		UPRNT:	ACALL	X31DP
 1721:					;
 1722:	  06B9	7C 0D		PRNTCR:	MOV	R4,#CR		;OUTPUT UNTIL A CR
 1723:					;
 1724:	  06BB	10 34 E9	PN0:	JBC	C0ORX1,ROM_P
 1725:	  06BE	E0			MOVX	A,@DPTR		;GET THE RAM BYTE
 1726:	  06BF	60 03			JZ	$+5
 1727:	  06C1	B5 04 01		CJNE	A,R4B0,$+4	;SEE IF THE SAME AS TERMINATOR
 1728:	  06C4	22			RET			;EXIT IF THE SAME
 1729:	  06C5	B4 0D E9		CJNE	A,#CR,PN1	;NEVER PRINT A CR IN THIS ROUTINE
 1730:	  06C8	02 18 86		LJMP	E1XX		;BAD SYNTAX
 1731:					;
 1732:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 43



 Line  I  Addr  Code            Source

 1733:					;***************************************************************
 1734:					;
 1735:					; INLINE - Input a line to IBUF, exit when a CR is received
 1736:					;
 1737:					;***************************************************************
 1738:					;
 1739:	  06CB	B4 04 16	INL2:	CJNE 	A,#CNTRLD,INL2B	;SEE IF A CONTROL D
 1740:					;
 1741:	  06CE	D1 9D		INL0:	ACALL	CRLF		;DO A CR
 1742:					;
 1743:	  06D0	75 A0 00	INLINE:	MOV	P2,#HIGH IBUF	;IBUF IS IN THE ZERO PAGE
 1744:	  06D3	78 07			MOV	R0,#LOW IBUF	;POINT AT THE INPUT BUFFER
 1745:					;
 1746:	  06D5	F1 89		INL1:	ACALL	INCHAR		;GET A CHARACTER
 1747:	  06D7	FD			MOV	R5,A		;SAVE IN R5 FOR OUTPUT
 1748:	  06D8	B4 08 F0		CJNE	A,#BS,INL2	;SEE IF A DELETE CHARACTER
 1749:	  06DB	B8 07 18		CJNE	R0,#LOW IBUF,INL6
 1750:	  06DE	7D 07			MOV	R5,#BELL	;OUTPUT A BELL
 1751:					;
 1752:	  06E0	F1 09		INLX:	ACALL	TEROT		;OUTPUT CHARACTER
 1753:	  06E2	80 F1			SJMP	INL1		;DO IT AGAIN
 1754:					;
 1755:	  06E4	F2		INL2B:	MOVX	@R0,A		;SAVE THE CHARACTER
 1756:	  06E5	B4 0D 02		CJNE	A,#CR,$+5	;IS IT A CR
 1757:	  06E8	C1 9D			AJMP	CRLF		;OUTPUT A CRLF AND EXIT
 1758:	  06EA	B4 20 00		CJNE	A,#20H,$+3
 1759:	  06ED	40 F1			JC	INLX		;ONLY ECHO CONTROL CHARACTERS
 1760:	  06EF	08			INC	R0		;BUMP THE POINTER
 1761:	  06F0	B8 56 ED		CJNE	R0,#IBUF+79,INLX
 1762:	  06F3	18			DEC	R0		;FORCE 79
 1763:	  06F4	80 E8			SJMP	INLX-2		;OUTPUT A BELL
 1764:					;
 1765:	  06F6	18		INL6:	DEC	R0		;DEC THE RAM POINTER
 1766:	  06F7	7D 08			MOV	R5,#BS		;OUTPUT A BACK SPACE
 1767:	  06F9	F1 09			ACALL	TEROT
 1768:	  06FB	F1 07			ACALL	STEROT		;OUTPUT A SPACE
 1769:	  06FD	7D 08			MOV	R5,#BS		;ANOTHER BACK SPACE
 1770:	  06FF	80 DF			SJMP	INLX		;OUTPUT IT
 1771:					;
 1772:	  0701	7E		PTIME:	DB	128-2		; PROM PROGRAMMER TIMER
 1773:	  0702	00			DB	00H
 1774:	  0703	00			DB	00H
 1775:	  0704	50			DB	50H
 1776:	  0705	67			DB	67H
 1777:	  0706	41			DB	41H
 1778:					;
 1779:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 44



 Line  I  Addr  Code            Source

 1780:				;$INCLUDE(:F2:BAS52.OUT)
 1781:				;BEGINNING
 1782:					;***************************************************************
 1783:					;
 1784:					; TEROT - Output a character to the system console
 1785:					;         update PHEAD position.
 1786:					;
 1787:					;***************************************************************
 1788:					;
 1789:	  0707	7D 20		STEROT:	MOV	R5,#' '		;OUTPUT A SPACE
 1790:					;
 1791:	  0709	C0 E0		TEROT:	PUSH	ACC		;SAVE THE ACCUMULATOR
 1792:	  070B	C0 83			PUSH	DPH		;SAVE THE DPTR
 1793:	  070D	C0 82			PUSH	DPL
 1794:	  070F	30 35 04		JNB	CNT_S,$+7	;WAIT FOR A CONTROL Q
 1795:	  0712	F1 85			ACALL	BCK		;GET SERIAL STATUS
 1796:	  0714	80 F9			SJMP	$-5
 1797:	  0716	ED			MOV	A,R5		;PUT OUTPUT BYTE IN A
 1798:	  0717	30 2C 05		JNB	BO,$+8		;CHECK FOR MONITOR
 1799:	  071A	12 20 40		LCALL	2040H		;DO THE MONITOR
 1800:	  071D	E1 5E			AJMP	TEROT1		;CLEAN UP
 1801:	  071F	30 1C 05		JNB	COUB,$+8	;SEE IF USER WANTS OUTPUT
 1802:	  0722	12 40 30		LCALL	4030H
 1803:	  0725	E1 5E			AJMP	TEROT1
 1804:	  0727	30 27 08		JNB	UPB,T_1		;NO AT IF NO XBIT
 1805:	  072A	30 19 05		JNB	LPB,T_1		;AT PRINT
 1806:	  072D	12 40 3C		LCALL	403CH		;CALL AT LOCATION
 1807:	  0730	E1 5E			AJMP	TEROT1		;FINISH OFF OUTPUT
 1808:					;
 1809:	  0732	30 1B 22	T_1:	JNB	COB,TXX		;SEE IF LIST SET
 1810:	  0735	90 01 24		MOV	DPTR,#SPV	;LOAD BAUD RATE
 1811:	  0738	B1 7A			ACALL	LD_T
 1812:	  073A	C2 97			CLR	LP		;OUTPUT START BIT
 1813:	  073C	B1 27			ACALL	TIMER_LOAD	;LOAD AND START THE TIMER
 1814:	  073E	ED			MOV	A,R5		;GET THE OUTPUT BYTE
 1815:	  073F	D3			SETB	C		;SET CARRY FOR LAST OUTPUT
 1816:	  0740	7D 09			MOV	R5,#9		;LOAD TIMER COUNTDOWN
 1817:					;
 1818:	  0742	13		LTOUT1:	RRC	A		;ROTATE A
 1819:	  0743	30 8F FD		JNB	TF1,$		;WAIT TILL TIMER READY
 1820:	  0746	92 97			MOV	LP,C		;OUTPUT THE BIT
 1821:	  0748	B1 27			ACALL	TIMER_LOAD	;DO THE NEXT BIT
 1822:	  074A	DD F6			DJNZ	R5,LTOUT1	;LOOP UNTIL DONE
 1823:	  074C	30 8F FD		JNB	TF1,$		;FIRST STOP BIT
 1824:	  074F	B1 27			ACALL	TIMER_LOAD
 1825:	  0751	30 8F FD		JNB	TF1,$		;SECOND STOP BIT
 1826:	  0754	FD			MOV	R5,A		;RESTORE R5
 1827:	  0755	80 07			SJMP	TEROT1		;BACK TO TEROT
 1828:					;
 1829:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 45



 Line  I  Addr  Code            Source

 1830:	  0757	30 99 FD	TXX:	JNB	TI,$		;WAIT FOR TRANSMIT READY
 1831:	  075A	C2 99			CLR	TI
 1832:	  075C	8D 99			MOV	SBUF,R5		;SEND OUT THE CHARACTER
 1833:					;
 1834:	  075E	BD 0D 03	TEROT1:	CJNE	R5,#CR,$+6	;SEE IF A CR
 1835:	  0761	75 16 00		MOV	PHEAD,#00H	;IF A CR, RESET PHEAD AND
 1836:					;
 1837:	  0764	BD 0A 0B		CJNE	R5,#LF,NLC	;SEE IF A LF
 1838:	  0767	E5 15			MOV	A,NULLCT	;GET THE NULL COUNT
 1839:	  0769	60 07			JZ	NLC		;NO NULLS IF ZERO
 1840:					;
 1841:	  076B	7D 00		TEROT2:	MOV	R5,#NULL	;PUT THE NULL IN THE OUTPUT REGISTER
 1842:	  076D	F1 09			ACALL	TEROT		;OUTPUT THE NULL
 1843:	  076F	14			DEC	A		;DECREMENT NULL COUNT
 1844:	  0770	70 F9			JNZ	TEROT2		;LOOP UNTIL DONE
 1845:					;
 1846:	  0772	BD 08 02	NLC:	CJNE	R5,#BS,$+5	;DEC PHEAD IF A BACKSPACE
 1847:	  0775	15 16			DEC	PHEAD
 1848:	  0777	BD 20 00		CJNE	R5,#20H,$+3	;IS IT A PRINTABLE CHARACTER?
 1849:	  077A	40 02			JC	$+4		;DON'T INCREMENT PHEAD IF NOT PRINTABLE
 1850:	  077C	05 16			INC	PHEAD		;BUMP PRINT HEAD
 1851:	  077E	D0 82			POP	DPL		;RESTORE DPTR
 1852:	  0780	D0 83			POP	DPH
 1853:	  0782	D0 E0			POP	ACC		;RESTORE ACC
 1854:	  0784	22			RET			;EXIT
 1855:					;
 1856:
 1857:				;END
 1858:				;$INCLUDE(:F2:BAS52.OUT)
 1859:					;
 1860:	  0785	F1 C4		BCK:	ACALL	CSTS		;CHECK STATUS
 1861:	  0787	50 32			JNC	CI_RET+1	;EXIT IF NO CHARACTER
 1862:					;
 1863:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 46



 Line  I  Addr  Code            Source

 1864:					;***************************************************************
 1865:					;
 1866:					;INPUTS A CHARACTER FROM THE SYSTEM CONSOLE.
 1867:					;
 1868:					;***************************************************************
 1869:					;
 1870:	  0789	30 32 05	INCHAR:	JNB	BI,$+8		;CHECK FOR MONITOR (BUBBLE)
 1871:	  078C	12 20 60		LCALL	2060H
 1872:	  078F	80 11			SJMP	INCH1
 1873:	  0791	30 1E 05		JNB	CIUB,$+8	;CHECK FOR USER
 1874:	  0794	12 40 33		LCALL	4033H
 1875:	  0797	80 09			SJMP	INCH1
 1876:	  0799	30 98 FD		JNB	RI,$		;WAIT FOR RECEIVER READY.
 1877:	  079C	E5 99			MOV	A,SBUF
 1878:	  079E	C2 98			CLR	RI		;RESET READY
 1879:	  07A0	C2 E7			CLR	ACC.7		;NO BIT 7
 1880:					;
 1881:	  07A2	B4 13 02	INCH1:	CJNE	A,#13H,$+5
 1882:	  07A5	D2 35			SETB	CNT_S
 1883:	  07A7	B4 11 02		CJNE	A,#11H,$+5
 1884:	  07AA	C2 35			CLR	CNT_S
 1885:	  07AC	B4 03 04		CJNE	A,#CNTRLC,$+7
 1886:	  07AF	30 30 26		JNB	NO_C,C_EX	;TRAP NO CONTROL C
 1887:	  07B2	22			RET
 1888:					;
 1889:	  07B3	C2 28			CLR	JKBIT
 1890:	  07B5	B4 17 02		CJNE	A,#17H,CI_RET	;CONTROL W
 1891:	  07B8	D2 28			SETB	JKBIT
 1892:					;
 1893:	  07BA	D3		CI_RET:	SETB	C		;CARRY SET IF A CHARACTER
 1894:	  07BB	22			RET			;EXIT
 1895:					;
 1896:					;*************************************************************
 1897:					;
 1898:					;RROM - The Statement Action Routine RROM
 1899:					;
 1900:					;*************************************************************
 1901:					;
 1902:	  07BC	D2 1D		RROM:	SETB	INBIT		;SO NO ERRORS
 1903:	  07BE	B1 3D			ACALL	RO1		;FIND THE LINE NUMBER
 1904:	  07C0	10 1D 43		JBC	INBIT,CRUN
 1905:	  07C3	22			RET			;EXIT
 1906:					;
 1907:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 47



 Line  I  Addr  Code            Source

 1908:					;***************************************************************
 1909:					;
 1910:	  07C4			CSTS:	;	RETURNS CARRY = 1 IF THERE IS A CHARACTER WAITING FROM
 1911:					;       THE SYSTEM CONSOLE. IF NO CHARACTER THE READY CHARACTER
 1912:					;       WILL BE CLEARED
 1913:					;
 1914:					;***************************************************************
 1915:					;
 1916:	  07C4	30 32 03		JNB	BI,$+6		;BUBBLE STATUS
 1917:	  07C7	02 20 68		LJMP	2068H
 1918:	  07CA	30 1E 03		JNB	CIUB,$+6	;SEE IF EXTERNAL CONSOLE
 1919:	  07CD	02 40 36		LJMP	4036H
 1920:	  07D0	A2 98			MOV	C,RI
 1921:	  07D2	22			RET
 1922:					;
 1923:	  07D3	90 19 69		MOV	DPTR,#WB	;EGO MESSAGE
 1924:	  07D6	D1 A7			ACALL	ROM_P
 1925:					;
 1926:	  07D8	C2 35		C_EX:	CLR	CNT_S		;NO OUTPUT STOP
 1927:	  07DA	12 0C 39		LCALL	SPRINT+4	;ASSURE CONSOLE
 1928:	  07DD	D1 9D			ACALL	CRLF
 1929:	  07DF	10 28 F1		JBC	JKBIT,C_EX-5
 1930:					;
 1931:	  07E2	30 2F 7F		JNB	DIRF,SSTOP0
 1932:	  07E5	A1 3A			AJMP	C_K		;CLEAR COB AND EXIT
 1933:					;
 1934:	  07E7	E5 48		T_CMP:	MOV	A,TVH		;COMPARE TIMER TO SP_H AND SP_L
 1935:	  07E9	A9 49			MOV	R1,TVL
 1936:	  07EB	B5 48 F9		CJNE	A,TVH,T_CMP
 1937:	  07EE	C9			XCH	A,R1
 1938:	  07EF	95 4C			SUBB	A,SP_L
 1939:	  07F1	E9			MOV	A,R1
 1940:	  07F2	95 4B			SUBB	A,SP_H
 1941:	  07F4	22			RET
 1942:					;
 1943:					;*************************************************************
 1944:					;
 1945:	  07F5			BR0:	; Trap the timer interrupt
 1946:					;
 1947:					;*************************************************************
 1948:					;
 1949:	  07F5	F1 E7			CALL	T_CMP		;COMPARE TIMER
 1950:	  07F7	40 40			JC	BCHR+6		;EXIT IF TEST FAILS
 1951:	  07F9	D2 14			SETB	OTI		;DOING THE TIMER INTERRUPT
 1952:	  07FB	C2 10			CLR	OTS		;CLEAR TIMER BIT
 1953:	  07FD	A2 11			MOV	C,INPROG	;SAVE IN PROGRESS
 1954:	  07FF	92 2B			MOV	ISAV,C
 1955:	  0801	90 01 26		MOV	DPTR,#TIV
 1956:	  0804	80 3C			SJMP	BR2
 1957:					;
 1958:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 48



 Line  I  Addr  Code            Source

 1959:					;***************************************************************
 1960:					;
 1961:					; The command action routine - RUN
 1962:					;
 1963:					;***************************************************************
 1964:					;
 1965:	  0806	12 06 5A	CRUN:	LCALL	RCLEAR-2	;CLEAR THE STORAGE ARRAYS
 1966:	  0809	71 D8			ACALL	SRESTR+2	;GET THE STARTING ADDRESS
 1967:	  080B	51 AC			ACALL	B_C
 1968:	  080D	60 4A			JZ	CMNDLK		;IF NULL GO TO COMMAND MODE
 1969:					;
 1970:	  080F	D1 C1			ACALL	T_DP
 1971:	  0811	F1 2C			ACALL	B_TXA		;BUMP TO STARTING LINE
 1972:					;
 1973:	  0813	91 44		CILOOP:	ACALL	SP0		;DO A CR AND A LF
 1974:	  0815	C2 2F			CLR	DIRF		;NOT IN DIRECT MODE
 1975:					;
 1976:					;INTERPERTER DRIVER
 1977:					;
 1978:	  0817	85 3E 81	ILOOP:	MOV	SP,SPSAV	;RESTORE THE STACK EACH TIME
 1979:	  081A	20 2F 06		JB	DIRF,$+9	;NO INTERRUPTS IF IN DIRECT MODE
 1980:	  081D	85 0A 42		MOV	INTXAH,TXAH	;SAVE THE TEXT POINTER
 1981:	  0820	85 08 43		MOV	INTXAL,TXAL
 1982:	  0823	12 07 85		LCALL	BCK		;GET CONSOLE STATUS
 1983:	  0826	20 2F 24		JB	DIRF,I_L	;DIRECT MODE
 1984:	  0829	B0 18			ANL	C,/GTRD		;SEE IF CHARACTER READY
 1985:	  082B	50 06			JNC	BCHR		;NO CHARACTER = NO CARRY
 1986:					;
 1987:					; DO TRAP OPERATION
 1988:					;
 1989:	  082D	90 01 00		MOV	DPTR,#GTB	;SAVE TRAP CHARACTER
 1990:	  0830	F0			MOVX	@DPTR,A
 1991:	  0831	D2 18			SETB	GTRD		;SAYS READ A BYTE
 1992:					;
 1993:	  0833	20 14 17	BCHR:	JB	OTI,I_L		;EXIT IF TIMER INTERRUPT IN PROGRESS
 1994:	  0836	20 10 BC		JB	OTS,BR0		;TEST TIMER VALUE IF SET
 1995:	  0839	30 16 11		JNB	INTPEN,I_L	;SEE IF INTERRUPT PENDING
 1996:	  083C	20 11 0E		JB	INPROG,I_L	;DON'T DO IT AGAIN IF IN PROGRESS
 1997:	  083F	90 01 20		MOV	DPTR,#INTLOC	;POINT AT INTERRUPT LOCATION
 1998:					;
 1999:	  0842	7C 02		BR2:	MOV	R4,#GTYPE	;SETUP FOR A FORCED GOSUB
 2000:	  0844	71 3D			ACALL	SGS1		;PUT TXA ON STACK
 2001:	  0846	D2 11			SETB	INPROG		;INTERRUPT IN PROGRESS
 2002:					;
 2003:	  0848	12 05 6B	ERL4:	CALL	L20DPI
 2004:	  084B	61 00			AJMP	D_L1		;GET THE LINE NUMBER
 2005:					;
 2006:	  084D	31 00		I_L:	ACALL	ISTAT		;LOOP
 2007:	  084F	F1 20			ACALL	CLN_UP		;FINISH IT OFF
 2008:	  0851	50 C4			JNC	ILOOP		;LOOP ON THE DRIVER
 2009:	  0853	30 2F 03		JNB	DIRF,CMNDLK	;CMND1 IF IN RUN MODE
 2010:	  0856	02 17 9B		LJMP	CMNDR		;DON'T PRINT READY
 2011:					;
 2012:	  0859	02 17 85	CMNDLK:	JMP	CMND1		;DONE
 2013:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 49



 Line  I  Addr  Code            Source

 2014:					;**************************************************************
 2015:					;
 2016:					; The Statement Action Routine - STOP
 2017:					;
 2018:					;**************************************************************
 2019:					;
 2020:	  085C	F1 20		SSTOP:	ACALL	CLN_UP		;FINISH OFF THIS LINE
 2021:	  085E	85 0A 42		MOV	INTXAH,TXAH	;SAVE TEXT POINTER FOR CONT
 2022:	  0861	85 08 43		MOV	INTXAL,TXAL
 2023:					;
 2024:	  0864	D2 17		SSTOP0:	SETB	CONB		;CONTINUE WILL WORK
 2025:	  0866	90 00 EC		MOV	DPTR,#STP	;PRINT THE STOP MESSAGE
 2026:	  0869	D2 20			SETB	STOPBIT		;SET FOR ERROR ROUTINE
 2027:	  086B	02 18 AE		JMP	ERRS		;JUMP TO ERROR ROUTINE
 2028:					;
 2029:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 50



 Line  I  Addr  Code            Source

 2030:					;**************************************************************
 2031:					;
 2032:					; ITRAP - Trap special function register operators
 2033:					;
 2034:					;**************************************************************
 2035:					;
 2036:	  086E	B4 C8 05	ITRAP:	CJNE	A,#TMR0,$+8	;TIMER 0
 2037:	  0871	8B 8C			MOV	TH0,R3
 2038:	  0873	89 8A			MOV	TL0,R1
 2039:	  0875	22			RET
 2040:					;
 2041:	  0876	B4 C9 05		CJNE	A,#TMR1,$+8	;TIMER 1
 2042:	  0879	8B 8D			MOV	TH1,R3
 2043:	  087B	89 8B			MOV	TL1,R1
 2044:	  087D	22			RET
 2045:					;
 2046:	  087E	B4 CA 05		CJNE	A,#TMR2,$+8	;TIMER 2
 2047:	  0881	8B			DB	8BH		;MOV R3 DIRECT OP CODE
 2048:	  0882	CD			DB	0CDH		;T2H LOCATION
 2049:	  0883	89			DB	89H		;MOV R1 DIRECT OP CODE
 2050:	  0884	CC			DB	0CCH		;T2L LOCATION
 2051:	  0885	22			RET
 2052:					;
 2053:	  0886	B4 CE 05		CJNE	A,#TRC2,$+8	;RCAP2 TOKEN
 2054:
 2055:	  0889	BB FF 04	RCL:	CJNE	R3,#0FFh,RCL1	;JKJ: Don't allow to load FF
 2056:	  088C	B9 FF 01		CJNE	R1,#0FFh,RCL1
 2057:	  088F	22			RET
 2058:
 2059:	  0890	8B		RCL1:	DB	8BH		;MOV R3 DIRECT OP CODE
 2060:	  0891	CB			DB	0CBH		;RCAP2H LOCATION
 2061:	  0892	89			DB	89H		;MOV R1 DIRECT OP CODE
 2062:	  0893	CA			DB	0CAH		;RCAP2L LOCATION
 2063:	  0894	22			RET
 2064:					;
 2065:	  0895	31 DD			ACALL	R3CK		;MAKE SURE THAT R3 IS ZERO
 2066:	  0897	B4 CB 03		CJNE	A,#TT2C,$+6
 2067:	  089A	89			DB	89H		;MOV R1 DIRECT OP CODE
 2068:	  089B	C8			DB	0C8H		;T2CON LOCATION
 2069:	  089C	22			RET
 2070:					;
 2071:	  089D	B4 C6 03		CJNE	A,#T_IE,$+6	;IE TOKEN
 2072:	  08A0	89 A8			MOV	IE,R1
 2073:	  08A2	22			RET
 2074:					;
 2075:	  08A3	B4 C7 03		CJNE	A,#T_IP,$+6	;IP TOKEN
 2076:	  08A6	89 B8			MOV	IP,R1
 2077:	  08A8	22			RET
 2078:					;
 2079:	  08A9	B4 CC 03		CJNE	A,#TTC,$+6	;TCON TOKEN
 2080:	  08AC	89 88			MOV	TCON,R1
 2081:	  08AE	22			RET
 2082:					;
 2083:	  08AF	B4 CD 03		CJNE	A,#TTM,$+6	;TMOD TOKEN
 2084:	  08B2	89 89			MOV	TMOD,R1
 2085:	  08B4	22			RET

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 51



 Line  I  Addr  Code            Source

 2086:					;
 2087:	  08B5	B4 CF 2F		CJNE	A,#T_P1,T_T2	;P1 TOKEN
 2088:	  08B8	89 90			MOV	P1,R1
 2089:	  08BA	22			RET
 2090:					;
 2091:					;***************************************************************
 2092:					;
 2093:					; T_TRAP - Trap special operators
 2094:					;
 2095:					;***************************************************************
 2096:					;
 2097:	  08BB	F5 0F		T_T:	MOV	TEMP5,A		;SAVE THE TOKEN
 2098:	  08BD	D1 E0			ACALL	GCI1		;BUMP POINTER
 2099:	  08BF	31 D0			ACALL	SLET2		;EVALUATE AFTER =
 2100:	  08C1	E5 0F			MOV	A,TEMP5		;GET THE TOKEN BACK
 2101:	  08C3	B4 C3 03		CJNE	A,#T_XTAL,$+6
 2102:	  08C6	02 16 4E		LJMP	AXTAL1		;SET UP CRYSTAL
 2103:					;
 2104:	  08C9	D1 99			ACALL	IFIXL		;R3:R1 HAS THE TOS
 2105:	  08CB	E5 0F			MOV	A,TEMP5		;GET THE TOKEN AGAIN
 2106:	  08CD	B4 C4 09		CJNE	A,#T_MTOP,T_T1	;SEE IF MTOP TOKEN
 2107:	  08D0	90 01 0A		MOV	DPTR,#MEMTOP
 2108:	  08D3	12 05 FD		CALL	S31DP
 2109:	  08D6	02 06 5C		JMP	RCLEAR		;CLEAR THE MEMORY
 2110:					;
 2111:	  08D9	B4 C5 92	T_T1:	CJNE	A,#T_TIME,ITRAP	;SEE IF A TIME TOKEN
 2112:	  08DC	A2 AF			MOV	C,EA		;SAVE INTERRUPTS
 2113:	  08DE	C2 AF			CLR	EA		;NO TIMER 0 INTERRUPTS DURING LOAD
 2114:	  08E0	8B 48			MOV	TVH,R3		;SAVE THE TIME
 2115:	  08E2	89 49			MOV	TVL,R1
 2116:	  08E4	92 AF			MOV	EA,C		;RESTORE INTERRUPTS
 2117:	  08E6	22			RET			;EXIT
 2118:					;
 2119:	  08E7	B4 D0 56	T_T2:	CJNE	A,#T_PC,INTERX	;PCON TOKEN
 2120:	  08EA	89			DB	89H		;MOV DIRECT, R1 OP CODE
 2121:	  08EB	87			DB	87H		;ADDRESS OF PCON
 2122:	  08EC	22			RET			;EXIT
 2123:					;
 2124:	  08ED	B4 D1 CB	T_TRAP:	CJNE	A,#T_ASC,T_T	;SEE IF ASC TOKEN
 2125:	  08F0	D1 D4			ACALL	IGC		;EAT IT AND GET THE NEXT CHARACTER
 2126:	  08F2	B4 24 4B		CJNE	A,#'$',INTERX	;ERROR IF NOT A STRING
 2127:	  08F5	51 26			ACALL	CSY		;CALCULATE ADDRESS
 2128:	  08F7	B1 B6			ACALL	X3120
 2129:	  08F9	12 14 A6		CALL	TWO_EY
 2130:	  08FC	31 E5			ACALL	SPEOP+4		;EVALUATE AFTER EQUALS
 2131:	  08FE	21 29			AJMP	ISTAX1		;SAVE THE CHARACTER
 2132:					;
 2133:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 52



 Line  I  Addr  Code            Source

 2134:					;**************************************************************
 2135:					;
 2136:					;INTERPERT THE STATEMENT POINTED TO BY TXAL AND TXAH
 2137:					;
 2138:					;**************************************************************
 2139:					;
 2140:	  0900	D1 D6		ISTAT:	ACALL	GC		;GET THR FIRST CHARACTER
 2141:	  0902	30 2D 0E		JNB	XBIT,IAT	;TRAP TO EXTERNAL RUN PACKAGE
 2142:	  0905	B4 20 00		CJNE	A,#20H,$+3
 2143:	  0908	50 09			JNC	IAT
 2144:	  090A	12 20 70		LCALL	2070H		;LET THE USER SET UP THE DPTR
 2145:	  090D	D1 E0			ACALL	GCI1
 2146:	  090F	54 0F			ANL	A,#0FH		;STRIP OFF BIAS
 2147:	  0911	80 51			SJMP	ISTA1
 2148:					;
 2149:	  0913	B4 C3 00	IAT:	CJNE	A,#T_XTAL,$+3
 2150:	  0916	50 D5			JNC	T_TRAP
 2151:	  0918	30 E7 5B		JNB	ACC.7,SLET	;IMPLIED LET IF BIT 7 NOT SET
 2152:	  091B	B4 BC 06		CJNE	A,#T_UOP+12,ISTAX	;DBYTE TOKEN
 2153:	  091E	31 E1			ACALL	SPEOP		;EVALUATE SPECIAL OPERATOR
 2154:	  0920	31 DD			ACALL	R3CK		;CHECK LOCATION
 2155:	  0922	F7			MOV	@R1,A		;SAVE IT
 2156:	  0923	22			RET
 2157:					;
 2158:	  0924	B4 BD 06	ISTAX:	CJNE	A,#T_UOP+13,ISTAY	;XBYTE TOKEN
 2159:	  0927	31 E1			ACALL	SPEOP
 2160:					;
 2161:	  0929	8B A0		ISTAX1:	MOV	P2,R3
 2162:	  092B	F3			MOVX	@R1,A
 2163:	  092C	22			RET
 2164:					;
 2165:	  092D	B4 AB 00	ISTAY:	CJNE	A,#T_CR+1,$+3	;TRAP NEW OPERATORS
 2166:	  0930	40 09			JC	I_S
 2167:	  0932	B4 B0 00		CJNE	A,#0B0H,$+3	;SEE IF TOO BIG
 2168:	  0935	50 09			JNC	INTERX
 2169:	  0937	24 F9			ADD	A,#0F9H		;BIAS FOR LOOKUP TABLE
 2170:	  0939	80 1D			SJMP	ISTA0		;DO THE OPERATION
 2171:					;
 2172:	  093B	B4 A4 00	I_S:	CJNE	A,#T_LAST,$+3	;MAKE SURE AN INITIAL RESERVED WORD
 2173:	  093E	40 03			JC	$+5		;ERROR IF NOT
 2174:					;
 2175:	  0940	02 18 86	INTERX:	LJMP	E1XX		;SYNTAX ERROR
 2176:					;
 2177:	  0943	30 2F 12		JNB	DIRF,ISTA0	;EXECUTE ALL STATEMENTS IF IN RUN MODE
 2178:	  0946	B4 90 00		CJNE	A,#T_DIR,$+3	;SEE IF ON TOKEN
 2179:	  0949	40 0D			JC	ISTA0		;OK IF DIRECT
 2180:	  094B	B4 A0 02		CJNE	A,#T_GOSB+1,$+5	;SEE IF FOR
 2181:	  094E	80 08			SJMP	ISTA0		;FOR IS OK
 2182:	  0950	B4 97 02		CJNE	A,#T_REM+1,$+5	;NEXT IS OK
 2183:	  0953	80 03			SJMP	ISTA0
 2184:	  0955	B4 96 E8		CJNE	A,#T_STOP+6,INTERX	;SO IS REM
 2185:					;
 2186:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 53



 Line  I  Addr  Code            Source

 2187:	  0958	D1 E0		ISTA0:	ACALL	GCI1		;ADVANCE THE TEXT POINTER
 2188:	  095A	90 01 21		MOV	DPTR,#STATD	;POINT DPTR TO LOOKUP TABLE
 2189:	  095D	B4 80 02		CJNE	A,#T_GOTO-3,$+5	;SEE IF LET TOKEN
 2190:	  0960	80 9E			SJMP	ISTAT		;WASTE LET TOKEN
 2191:	  0962	54 3F			ANL	A,#3FH		;STRIP OFF THE GARBAGE
 2192:					;
 2193:	  0964	23		ISTA1:	RL	A		;ROTATE FOR OFFSET
 2194:	  0965	25 82			ADD	A,DPL		;BUMP
 2195:	  0967	F5 82			MOV	DPL,A		;SAVE IT
 2196:	  0969	E4			CLR	A
 2197:	  096A	93			MOVC	A,@A+DPTR	;GET HIGH BYTE
 2198:	  096B	C0 E0			PUSH	ACC		;SAVE IT
 2199:	  096D	A3			INC	DPTR
 2200:	  096E	E4			CLR	A
 2201:	  096F	93			MOVC	A,@A+DPTR	;GET LOW BYTE
 2202:	  0970	D0 83			POP	DPH
 2203:	  0972	F5 82			MOV	DPL,A
 2204:					;
 2205:	  0974	E4		AC1:	CLR	A
 2206:	  0975	73			JMP	@A+DPTR		;GO DO IT
 2207:					;
 2208:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 54



 Line  I  Addr  Code            Source

 2209:					;***************************************************************
 2210:					;
 2211:					; The statement action routine - LET
 2212:					;
 2213:					;***************************************************************
 2214:					;
 2215:	  0976	D1 C8		SLET:	ACALL	S_C		;CHECK FOR POSSIBLE STRING
 2216:	  0978	40 50			JC	SLET0		;NO STRING
 2217:	  097A	C2 15			CLR	LINEB		;USED STRINGS
 2218:					;
 2219:	  097C	12 05 71		CALL	X31DP		;PUT ADDRESS IN DPTR
 2220:	  097F	7F EA			MOV	R7,#T_EQU	;WASTE =
 2221:	  0981	91 EE			ACALL	EATC
 2222:	  0983	D1 D6			ACALL	GC		;GET THE NEXT CHARACTER
 2223:	  0985	B4 22 11		CJNE	A,#'"',S_3	;CHECK FOR A "
 2224:	  0988	AF 3F			MOV	R7,S_LEN	;GET THE STRING LENGTH
 2225:					;
 2226:	  098A	D1 E0		S_0:	ACALL	GCI1		;BUMP PAST "
 2227:	  098C	D1 EA			ACALL	DELTST		;CHECK FOR DELIMITER
 2228:	  098E	60 B0			JZ	INTERX		;EXIT IF CARRIAGE RETURN
 2229:	  0990	F0			MOVX	@DPTR,A		;SAVE THE CHARACTER
 2230:	  0991	B4 22 26		CJNE	A,#'"',S_1	;SEE IF DONE
 2231:					;
 2232:	  0994	74 0D		S_E:	MOV	A,#CR		;PUT A CR IN A
 2233:	  0996	F0			MOVX	@DPTR,A		;SAVE CR
 2234:	  0997	C1 E0			AJMP	GCI1
 2235:					;
 2236:	  0999	C0 83		S_3:	PUSH	DPH
 2237:	  099B	C0 82			PUSH	DPL		;SAVE DESTINATION
 2238:	  099D	D1 C8			ACALL	S_C		;CALCULATE SOURCE
 2239:	  099F	40 9F			JC	INTERX		;ERROR IF CARRY
 2240:	  09A1	D0 00			POP	R0B0		;GET DESTINATION BACK
 2241:	  09A3	D0 02			POP	R2B0
 2242:					;
 2243:	  09A5	AF 3F		SSOOP:	MOV	R7,S_LEN	;SET UP COUNTER
 2244:					;
 2245:	  09A7	12 15 88	S_4:	CALL	TBYTE		;TRANSFER THE BYTE
 2246:	  09AA	B4 0D 01		CJNE	A,#CR,$+4	;EXIT IF A CR
 2247:	  09AD	22			RET
 2248:	  09AE	DF 05			DJNZ	R7,S_5		;BUMP COUNTER
 2249:	  09B0	74 0D			MOV	A,#CR		;SAVE A CR
 2250:	  09B2	F2			MOVX	@R0,A
 2251:	  09B3	C1 57			AJMP	EIGP		;PRINT EXTRA IGNORED
 2252:					;
 2253:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 55



 Line  I  Addr  Code            Source

 2254:					;
 2255:	  09B5	12 15 68	S_5:	CALL	INC3210		;BUMP POINTERS
 2256:	  09B8	80 ED			SJMP	S_4		;LOOP
 2257:					;
 2258:	  09BA	DF 06		S_1:	DJNZ	R7,$+8		;SEE IF DONE
 2259:	  09BC	31 94			ACALL	S_E
 2260:	  09BE	D1 57			ACALL	EIGP		;PRINT EXTRA IGNORED
 2261:	  09C0	C1 F5			AJMP	FINDCR		;GO FIND THE END
 2262:	  09C2	A3			INC	DPTR		;BUMP THE STORE POINTER
 2263:	  09C3	80 C5			SJMP	S_0		;CONTINUE TO LOOP
 2264:					;
 2265:	  09C5	90 18 29	E3XX:	MOV	DPTR,#E3X	;BAD ARG ERROR
 2266:	  09C8	81 16			AJMP	EK
 2267:					;
 2268:	  09CA	31 CE		SLET0:	ACALL	SLET1
 2269:	  09CC	E1 DC			AJMP	POPAS		;COPY EXPRESSION TO VARIABLE
 2270:					;
 2271:	  09CE	F1 0A		SLET1:	ACALL	VAR_ER		;CHECK FOR A"VARIABLE"
 2272:					;
 2273:	  09D0	C0 02		SLET2:	PUSH	R2B0		;SAVE THE VARIABLE ADDRESS
 2274:	  09D2	C0 00			PUSH	R0B0
 2275:	  09D4	7F EA			MOV	R7,#T_EQU	;GET EQUAL TOKEN
 2276:	  09D6	F1 4A			ACALL	WE
 2277:	  09D8	D0 01			POP	R1B0		;POP VARIABLE TO R3:R1
 2278:	  09DA	D0 03			POP	R3B0
 2279:	  09DC	22			RET			;EXIT
 2280:					;
 2281:	  09DD	BB 00 E5	R3CK:	CJNE	R3,#00H,E3XX	;CHECK TO SEE IF R3 IS ZERO
 2282:	  09E0	22			RET
 2283:					;
 2284:	  09E1	D1 E0		SPEOP:	ACALL	GCI1		;BUMP TXA
 2285:	  09E3	91 E8			ACALL	P_E		;EVALUATE PAREN
 2286:	  09E5	31 D0			ACALL	SLET2		;EVALUATE AFTER =
 2287:	  09E7	12 14 93		CALL	TWOL		;R7:R6 GETS VALUE, R3:R1 GETS LOCATION
 2288:	  09EA	EE			MOV	A,R6		;SAVE THE VALUE
 2289:					;
 2290:	  09EB	BF 00 D7		CJNE	R7,#00H,E3XX	;R2 MUST BE = 0
 2291:	  09EE	22			RET
 2292:					;
 2293:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 56



 Line  I  Addr  Code            Source

 2294:					;**************************************************************
 2295:					;
 2296:					; ST_CAL - Calculate string Address
 2297:					;
 2298:					;**************************************************************
 2299:					;
 2300:	  09EF			IST_CAL:;
 2301:					;
 2302:	  09EF	D1 9E			ACALL	I_PI		;BUMP TEXT, THEN EVALUATE
 2303:	  09F1	31 DD			ACALL	R3CK		;ERROR IF R3 <> 0
 2304:	  09F3	09			INC	R1		;BUMP FOR OFFSET
 2305:	  09F4	E9			MOV	A,R1		;ERROR IF R1 = 255
 2306:	  09F5	60 CE			JZ	E3XX
 2307:	  09F7	90 01 04		MOV	DPTR,#VARTOP	;GET TOP OF VARIABLE STORAGE
 2308:	  09FA	85 3F F0		MOV	B,S_LEN		;MULTIPLY FOR LOCATION
 2309:	  09FD	51 18			ACALL	VARD		;CALCULATE THE LOCATION
 2310:	  09FF	90 01 0A		MOV	DPTR,#MEMTOP	;SEE IF BLEW IT
 2311:	  0A02	12 15 A2		CALL	FUL1
 2312:	  0A05	85 3F 82		MOV	DPL,S_LEN	;GET STRING LENGTH, DPH = 00H
 2313:	  0A08	15 83			DEC	DPH		;DPH = 0
 2314:					;
 2315:	  0A0A	C3		DUBSUB:	CLR	C
 2316:	  0A0B	E9			MOV	A,R1
 2317:	  0A0C	95 82			SUBB	A,DPL
 2318:	  0A0E	F9			MOV	R1,A
 2319:	  0A0F	EB			MOV	A,R3
 2320:	  0A10	95 83			SUBB	A,DPH
 2321:	  0A12	FB			MOV	R3,A
 2322:	  0A13	49			ORL	A,R1
 2323:	  0A14	22			RET
 2324:					;
 2325:					;***************************************************************
 2326:					;
 2327:					;VARD - Calculate the offset base
 2328:					;
 2329:					;***************************************************************
 2330:					;
 2331:	  0A15	75 F0 06	VARB:	MOV	B,#FPSIZ	;SET UP FOR OPERATION
 2332:					;
 2333:	  0A18	12 05 A8	VARD:	CALL	LDPTRI		;LOAD DPTR
 2334:	  0A1B	E9			MOV	A,R1		;MULTIPLY BASE
 2335:	  0A1C	A4			MUL	AB
 2336:	  0A1D	25 82			ADD	A,DPL
 2337:	  0A1F	F9			MOV	R1,A
 2338:	  0A20	E5 F0			MOV	A,B
 2339:	  0A22	35 83			ADDC	A,DPH
 2340:	  0A24	FB			MOV	R3,A
 2341:	  0A25	22			RET
 2342:					;
 2343:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 57



 Line  I  Addr  Code            Source

 2344:					;*************************************************************
 2345:					;
 2346:	  0A26			CSY:	; Calculate a biased string address and put in R3:R1
 2347:					;
 2348:					;*************************************************************
 2349:					;
 2350:	  0A26	31 EF			ACALL	IST_CAL		;CALCULATE IT
 2351:	  0A28	C0 03			PUSH	R3B0		;SAVE IT
 2352:	  0A2A	C0 01			PUSH	R1B0
 2353:	  0A2C	7F 2C			MOV	R7,#','		;WASTE THE COMMA
 2354:	  0A2E	91 EE			ACALL	EATC
 2355:	  0A30	D1 97			ACALL	ONE		;GET THE NEXT EXPRESSION
 2356:	  0A32	E9			MOV	A,R1		;CHECK FOR BOUNDS
 2357:	  0A33	B5 3F 00		CJNE	A,S_LEN,$+3
 2358:	  0A36	50 8D			JNC	E3XX		;MUST HAVE A CARRY
 2359:	  0A38	19			DEC	R1		;BIAS THE POINTER
 2360:	  0A39	D0 E0			POP	ACC		;GET VALUE LOW
 2361:	  0A3B	29			ADD	A,R1		;ADD IT TO BASE
 2362:	  0A3C	F9			MOV	R1,A		;SAVE IT
 2363:	  0A3D	D0 03			POP	R3B0		;GET HIGH ADDRESS
 2364:	  0A3F	50 01			JNC	$+3		;PROPAGATE THE CARRY
 2365:	  0A41	0B			INC	R3
 2366:	  0A42	81 EC			AJMP	ERPAR		;WASTE THE RIGHT PAREN
 2367:					;
 2368:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 58



 Line  I  Addr  Code            Source

 2369:					;***************************************************************
 2370:					;
 2371:					; The statement action routine FOR
 2372:					;
 2373:					;***************************************************************
 2374:					;
 2375:	  0A44	31 CE		SFOR:	ACALL	SLET1		;SET UP CONTROL VARIABLE
 2376:	  0A46	C0 03			PUSH	R3B0		;SAVE THE CONTROL VARIABLE LOCATION
 2377:	  0A48	C0 01			PUSH	R1B0
 2378:	  0A4A	F1 DC			ACALL	POPAS		;POP ARG STACK AND COPY CONTROL VAR
 2379:	  0A4C	7F A6			MOV	R7,#T_TO	;GET TO TOKEN
 2380:	  0A4E	F1 4A			ACALL	WE
 2381:	  0A50	D1 D6			ACALL	GC		;GET NEXT CHARACTER
 2382:	  0A52	B4 A7 06		CJNE	A,#T_STEP,SF2
 2383:	  0A55	D1 E0			ACALL	GCI1		;EAT THE TOKEN
 2384:	  0A57	F1 4C			ACALL	EXPRB		;EVALUATE EXPRESSION
 2385:	  0A59	80 03			SJMP	$+5		;JUMP OVER
 2386:					;
 2387:	  0A5B	12 14 35	SF2:	LCALL	PUSH_ONE	;PUT ONE ON THE STACK
 2388:					;
 2389:	  0A5E	74 EF			MOV	A,#-FSIZE	;ALLOCATE FSIZE BYTES ON THE CONTROL STACK
 2390:	  0A60	71 B9			ACALL	PUSHCS		;GET CS IN R0
 2391:	  0A62	71 C5			ACALL	CSC		;CHECK CONTROL STACK
 2392:	  0A64	7B 00			MOV	R3,#CSTKAH	;IN CONTROL STACK
 2393:	  0A66	A9 00			MOV	R1,R0B0		;STACK ADDRESS
 2394:	  0A68	F1 DC			ACALL	POPAS		;PUT STEP ON STACK
 2395:	  0A6A	F1 DC			ACALL	POPAS		;PUT LIMIT ON STACK
 2396:	  0A6C	D1 AB			ACALL	DP_T		;DPTR GETS TEXT
 2397:	  0A6E	A8 01			MOV	R0,R1B0		;GET THE POINTER
 2398:	  0A70	71 41			ACALL	T_X_S		;SAVE THE TEXT
 2399:	  0A72	D0 08			POP	TXAL		;GET CONTROL VARIABLE
 2400:	  0A74	D0 0A			POP	TXAH
 2401:	  0A76	7C 01			MOV	R4,#FTYPE	;AND THE TYPE
 2402:	  0A78	71 41			ACALL	T_X_S		;SAVE IT
 2403:					;
 2404:	  0A7A	D1 C1		SF3:	ACALL	T_DP		;GET THE TEXT POINTER
 2405:	  0A7C	01 17			AJMP	ILOOP		;CONTINUE TO PROCESS
 2406:					;
 2407:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 59



 Line  I  Addr  Code            Source

 2408:					;**************************************************************
 2409:					;
 2410:					; The statement action routines - PUSH and POP
 2411:					;
 2412:					;**************************************************************
 2413:					;
 2414:	  0A7E	F1 4C		SPUSH:	ACALL	EXPRB		;PUT EXPRESSION ON STACK
 2415:	  0A80	D1 CF			ACALL	C_TST		;SEE IF MORE TO DO
 2416:	  0A82	50 FA			JNC	SPUSH		;IF A COMMA PUSH ANOTHER
 2417:	  0A84	22			RET
 2418:					;
 2419:					;
 2420:	  0A85	F1 0A		SPOP:	ACALL	VAR_ER		;GET VARIABLE
 2421:	  0A87	F1 DA			ACALL	XPOP		;FLIP THE REGISTERS FOR POPAS
 2422:	  0A89	D1 CF			ACALL	C_TST		;SEE IF MORE TO DO
 2423:	  0A8B	50 F8			JNC	SPOP
 2424:					;
 2425:	  0A8D	22			RET
 2426:					;
 2427:					;***************************************************************
 2428:					;
 2429:					; The statement action routine - IF
 2430:					;
 2431:					;***************************************************************
 2432:					;
 2433:	  0A8E	51 CF		SIF:	ACALL	RTST		;EVALUATE THE EXPRESSION
 2434:	  0A90	F9			MOV	R1,A		;SAVE THE RESULT
 2435:	  0A91	D1 D6			ACALL	GC		;GET THE CHARACTER AFTER EXPR
 2436:	  0A93	B4 A5 02		CJNE	A,#T_THEN,$+5	;SEE IF THEN TOKEN
 2437:	  0A96	D1 E0			ACALL	GCI1		;WASTE THEN TOKEN
 2438:	  0A98	B9 00 0B		CJNE	R1,#0,T_F1	;CHECK R_OP RESULT
 2439:					;
 2440:	  0A9B	7F A8		E_FIND:	MOV	R7,#T_ELSE	;FIND ELSE TOKEN
 2441:	  0A9D	D1 F7			ACALL	FINDC
 2442:	  0A9F	60 EC			JZ	SIF-1		;EXIT IF A CR
 2443:	  0AA1	D1 E0			ACALL	GCI1		;BUMP PAST TOKEN
 2444:	  0AA3	B4 A8 F5		CJNE	A,#T_ELSE,E_FIND;WASTE IF NO ELSE
 2445:					;
 2446:	  0AA6	F1 3E		T_F1:	ACALL	INTGER		;SEE IF NUMBER
 2447:	  0AA8	50 56			JNC	D_L1		;EXECUTE LINE NUMBER
 2448:	  0AAA	21 00			AJMP	ISTAT		;EXECUTE STATEMENT IN NOT
 2449:					;
 2450:	  0AAC	E0		B_C:	MOVX	A,@DPTR
 2451:	  0AAD	14			DEC	A
 2452:	  0AAE	20 E7 2E		JB	ACC.7,FL3-5
 2453:	  0AB1	22			RET
 2454:					;
 2455:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 60



 Line  I  Addr  Code            Source

 2456:					;***************************************************************
 2457:					;
 2458:					; The statement action routine - GOTO
 2459:					;
 2460:					;***************************************************************
 2461:					;
 2462:	  0AB2	51 FA		SGOTO:	ACALL	RLINE		;R2:R0 AND DPTR GET INTGER
 2463:					;
 2464:	  0AB4	D1 C1		SGT1:	ACALL	T_DP		;TEXT POINTER GETS DPTR
 2465:					;
 2466:	  0AB6	10 25 08		JBC	RETBIT,SGT2	;SEE IF RETI EXECUTED
 2467:					;
 2468:	  0AB9	30 15 03		JNB	LINEB,$+6	;SEE IF A LINE WAS EDITED
 2469:	  0ABC	12 06 5A		LCALL	RCLEAR-2	;CLEAR THE MEMORY IF SET
 2470:	  0ABF	01 15			AJMP	ILOOP-2		;CLEAR DIRF AND LOOP
 2471:					;
 2472:	  0AC1	10 14 05	SGT2:	JBC	OTI,$+8		;SEE IF TIMER INTERRUPT
 2473:	  0AC4	53 22 BD		ANL	34,#10111101B	;CLEAR INTERRUPTS
 2474:	  0AC7	01 17			AJMP	ILOOP		;EXECUTE
 2475:	  0AC9	A2 2B			MOV	C,ISAV
 2476:	  0ACB	92 11			MOV	INPROG,C
 2477:	  0ACD	01 17			AJMP	ILOOP		;RESTORE INTERRUPTS AND RET
 2478:					;
 2479:					;
 2480:					;*************************************************************
 2481:					;
 2482:	  0ACF			RTST:	; Test for ZERO
 2483:					;
 2484:					;*************************************************************
 2485:					;
 2486:	  0ACF	F1 4C			ACALL	EXPRB		;EVALUATE EXPRESSION
 2487:	  0AD1	12 12 41		CALL	INC_ASTKA	;BUMP ARG STACK
 2488:	  0AD4	60 02			JZ	$+4		;EXIT WITH ZERO OR 0FFH
 2489:	  0AD6	74 FF			MOV	A,#0FFH
 2490:	  0AD8	22			RET
 2491:					;
 2492:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 61



 Line  I  Addr  Code            Source

 2493:					;
 2494:					;**************************************************************
 2495:					;
 2496:					; GLN - get the line number in R2:R0, return in DPTR
 2497:					;
 2498:					;**************************************************************
 2499:					;
 2500:	  0AD9	D1 A4		GLN:	ACALL	DP_B		;GET THE BEGINNING ADDRESS
 2501:					;
 2502:	  0ADB	E0		FL1:	MOVX	A,@DPTR		;GET THE LENGTH
 2503:	  0ADC	FF			MOV	R7,A		;SAVE THE LENGTH
 2504:	  0ADD	DF 05			DJNZ	R7,FL3		;SEE IF END OF FILE
 2505:					;
 2506:	  0ADF	90 1F B5		MOV	DPTR,#E10X	;NO LINE NUMBER
 2507:	  0AE2	81 16			AJMP	EK		;HANDLE THE ERROR
 2508:					;
 2509:	  0AE4	20 E7 F8	FL3:	JB	ACC.7,$-5	;CHECK FOR BIT 7
 2510:	  0AE7	A3			INC	DPTR		;POINT AT HIGH BYTE
 2511:	  0AE8	E0			MOVX	A,@DPTR		;GET HIGH BYTE
 2512:	  0AE9	B5 02 08		CJNE	A,R2B0,FL2	;SEE IF MATCH
 2513:	  0AEC	A3			INC	DPTR		;BUMP TO LOW BYTE
 2514:	  0AED	1F			DEC	R7		;ADJUST AGAIN
 2515:	  0AEE	E0			MOVX	A,@DPTR		;GET THE LOW BYTE
 2516:	  0AEF	B5 00 02		CJNE	A,R0B0,FL2	;SEE IF LOW BYTE MATCH
 2517:	  0AF2	A3			INC	DPTR		;POINT AT FIRST CHARACTER
 2518:	  0AF3	22			RET			;FOUND IT
 2519:					;
 2520:	  0AF4	EF		FL2:	MOV	A,R7		;GET THE LENGTH COUNTER
 2521:	  0AF5	12 05 D6		CALL	ADDPTR		;ADD A TO DATA POINTER
 2522:	  0AF8	80 E1			SJMP	FL1		;LOOP
 2523:					;
 2524:					;
 2525:					;*************************************************************
 2526:					;
 2527:					;RLINE - Read in ASCII string, get line, and clean it up
 2528:					;
 2529:					;*************************************************************
 2530:					;
 2531:	  0AFA	F1 39		RLINE:	ACALL	INTERR		;GET THE INTEGER
 2532:					;
 2533:	  0AFC	51 D9		RL1:	ACALL	GLN
 2534:	  0AFE	E1 20			AJMP	CLN_UP
 2535:					;
 2536:					;
 2537:	  0B00	51 D9		D_L1:	ACALL	GLN		;GET THE LINE
 2538:	  0B02	41 B4			AJMP	SGT1		;EXECUTE THE LINE
 2539:					;
 2540:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 62



 Line  I  Addr  Code            Source

 2541:					;***************************************************************
 2542:					;
 2543:					; The statement action routines WHILE and UNTIL
 2544:					;
 2545:					;***************************************************************
 2546:					;
 2547:	  0B04	51 CF		SWHILE:	ACALL	RTST		;EVALUATE RELATIONAL EXPRESSION
 2548:	  0B06	F4			CPL	A
 2549:	  0B07	80 02			SJMP	S_WU
 2550:					;
 2551:	  0B09	51 CF		SUNTIL:	ACALL	RTST		;EVALUATE RELATIONAL EXPRESSION
 2552:					;
 2553:	  0B0B	7C 03		S_WU:	MOV	R4,#DTYPE	;DO EXPECTED
 2554:	  0B0D	FD			MOV	R5,A		;SAVE R_OP RESULT
 2555:	  0B0E	80 0C			SJMP	SR0		;GO PROCESS
 2556:					;
 2557:					;
 2558:					;***************************************************************
 2559:					;
 2560:	  0B10			CNULL:	; The Command Action Routine - NULL
 2561:					;
 2562:					;***************************************************************
 2563:					;
 2564:	  0B10	F1 39			ACALL	INTERR		;GET AN INTEGER FOLLOWING NULL
 2565:	  0B12	88 15			MOV	NULLCT,R0	;SAVE THE NULLCOUNT
 2566:	  0B14	01 59			AJMP	CMNDLK		;JUMP TO COMMAND MODE
 2567:					;
 2568:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 63



 Line  I  Addr  Code            Source

 2569:					;***************************************************************
 2570:					;
 2571:					; The statement action routine - RETI
 2572:					;
 2573:					;***************************************************************
 2574:					;
 2575:	  0B16	D2 25		SRETI:	SETB	RETBIT		;SAYS THAT RETI HAS BEEN EXECUTED
 2576:					;
 2577:					;***************************************************************
 2578:					;
 2579:					; The statement action routine - RETURN
 2580:					;
 2581:					;***************************************************************
 2582:					;
 2583:	  0B18	7C 02		SRETRN:	MOV	R4,#GTYPE	;MAKE SURE OF GOSUB
 2584:	  0B1A	7D 55			MOV	R5,#55H		;TYPE RETURN TYPE
 2585:					;
 2586:	  0B1C	71 53		SR0:	ACALL	CSETUP		;SET UP CONTROL STACK
 2587:	  0B1E	E2			MOVX	A,@R0		;GET RETURN TEXT ADDRESS
 2588:	  0B1F	F5 83			MOV	DPH,A
 2589:	  0B21	08			INC	R0
 2590:	  0B22	E2			MOVX	A,@R0
 2591:	  0B23	F5 82			MOV	DPL,A
 2592:	  0B25	08			INC	R0		;POP CONTROL STACK
 2593:	  0B26	E0			MOVX	A,@DPTR		;SEE IF GOSUB WAS THE LAST STATEMENT
 2594:	  0B27	B4 01 02		CJNE	A,#EOF,$+5
 2595:	  0B2A	01 59			AJMP	CMNDLK
 2596:	  0B2C	ED			MOV	A,R5		;GET TYPE
 2597:	  0B2D	60 85			JZ	SGT1		;EXIT IF ZERO
 2598:	  0B2F	88 11			MOV	CSTKA,R0	;POP THE STACK
 2599:	  0B31	F4			CPL	A		;OPTION TEST, 00H, 55H, 0FFH, NOW 55H
 2600:	  0B32	70 80			JNZ	SGT1		;MUST BE GOSUB
 2601:	  0B34	22			RET			;NORMAL FALL THRU EXIT FOR NO MATCH
 2602:					;
 2603:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 64



 Line  I  Addr  Code            Source

 2604:					;***************************************************************
 2605:					;
 2606:					; The statement action routine - GOSUB
 2607:					;
 2608:					;***************************************************************
 2609:					;
 2610:	  0B35	51 FA		SGOSUB:	ACALL	RLINE		;NEW TXA IN DPTR
 2611:					;
 2612:	  0B37	7C 02		SGS0:	MOV	R4,#GTYPE
 2613:	  0B39	71 3D			ACALL	SGS1		;SET EVERYTHING UP
 2614:	  0B3B	41 7A			AJMP	SF3		;EXIT
 2615:					;
 2616:	  0B3D	74 FD		SGS1:	MOV	A,#-3		;ALLOCATE 3 BYTES ON CONTROL STACK
 2617:	  0B3F	71 B9			ACALL	PUSHCS
 2618:					;
 2619:	  0B41	75 A0 00	T_X_S:	MOV	P2,#CSTKAH	;SET UP PORT FOR CONTROL STACK
 2620:	  0B44	E5 08			MOV	A,TXAL		;GET RETURN ADDRESS AND SAVE IT
 2621:	  0B46	F2			MOVX	@R0,A
 2622:	  0B47	18			DEC	R0
 2623:	  0B48	E5 0A			MOV	A,TXAH
 2624:	  0B4A	F2			MOVX	@R0,A
 2625:	  0B4B	18			DEC	R0
 2626:	  0B4C	EC			MOV	A,R4		;GET TYPE
 2627:	  0B4D	F2			MOVX	@R0,A		;SAVE TYPE
 2628:	  0B4E	22			RET			;EXIT
 2629:					;
 2630:					;
 2631:	  0B4F	74 03		CS1:	MOV	A,#3		;POP 3 BYTES
 2632:	  0B51	71 B9			ACALL	PUSHCS
 2633:					;
 2634:	  0B53	A8 11		CSETUP:	MOV	R0,CSTKA	;GET CONTROL STACK
 2635:	  0B55	75 A0 00		MOV	P2,#CSTKAH
 2636:	  0B58	E2			MOVX	A,@R0		;GET BYTE
 2637:	  0B59	B5 04 02		CJNE	A,R4B0,$+5	;SEE IF TYPE MATCH
 2638:	  0B5C	08			INC	R0
 2639:	  0B5D	22			RET
 2640:	  0B5E	60 69			JZ	E4XX		;EXIT IF STACK UNDERFLOW
 2641:	  0B60	B4 01 EC		CJNE	A,#FTYPE,CS1	;SEE IF FOR TYPE
 2642:	  0B63	71 B7			ACALL	PUSHCS-2	;WASTE THE FOR TYPE
 2643:	  0B65	80 EC			SJMP	CSETUP		;LOOP
 2644:					;
 2645:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 65



 Line  I  Addr  Code            Source

 2646:					;***************************************************************
 2647:					;
 2648:					; The statement action routine - NEXT
 2649:					;
 2650:					;***************************************************************
 2651:					;
 2652:	  0B67	7C 01		SNEXT:	MOV	R4,#FTYPE	;FOR TYPE
 2653:	  0B69	71 53			ACALL	CSETUP		;SETUP CONTROL STACK
 2654:	  0B6B	88 0F			MOV	TEMP5,R0	;SAVE CONTROL VARIABLE ADDRESS
 2655:	  0B6D	79 0B			MOV	R1,#TEMP1	;SAVE VAR + RETURN IN TEMP1-4
 2656:					;
 2657:	  0B6F	E2		XXI:	MOVX	A,@R0		;LOOP UNTIL DONE
 2658:	  0B70	F7			MOV	@R1,A
 2659:	  0B71	09			INC	R1
 2660:	  0B72	08			INC	R0
 2661:	  0B73	B9 0F F9		CJNE	R1,#TEMP5,XXI
 2662:					;
 2663:	  0B76	B1 6E			ACALL	VAR		;SEE IF THE USER HAS A VARIABLE
 2664:	  0B78	50 04			JNC	$+6
 2665:	  0B7A	AA 0B			MOV	R2,TEMP1
 2666:	  0B7C	A8 0C			MOV	R0,TEMP2
 2667:	  0B7E	EA			MOV	A,R2		;SEE IF VAR'S AGREE
 2668:	  0B7F	B5 0B 47		CJNE	A,TEMP1,E4XX
 2669:	  0B82	E8			MOV	A,R0
 2670:	  0B83	B5 0C 43		CJNE	A,TEMP2,E4XX
 2671:	  0B86	F1 E6			ACALL	PUSHAS		;PUT CONTROL VARIABLE ON STACK
 2672:	  0B88	74 0E			MOV	A,#FPSIZ+FPSIZ+2;COMPUTE ADDRESS TO STEP VALUE SIGN
 2673:	  0B8A	25 0F			ADD	A,TEMP5		;ADD IT TO BASE OF STACK
 2674:	  0B8C	F8			MOV	R0,A		;SAVE IN R0
 2675:	  0B8D	7A 00			MOV	R2,#CSTKAH	;SET UP TO PUSH STEP VALUE
 2676:	  0B8F	8A A0			MOV	P2,R2		;SET UP PORT
 2677:	  0B91	E2			MOVX	A,@R0		;GET SIGN
 2678:	  0B92	08			INC	R0		;BACK TO EXPONENT
 2679:	  0B93	C0 E0			PUSH	ACC		;SAVE SIGN OF STEP
 2680:	  0B95	F1 E6			ACALL	PUSHAS		;PUT STEP VALUE ON STACK
 2681:	  0B97	C0 00			PUSH	R0B0		;SAVE LIMIT VALUE LOCATION
 2682:	  0B99	12 17 3F		CALL	AADD		;ADD STEP VALUE TO VARIABLE
 2683:	  0B9C	12 14 1E		CALL	CSTAKA		;COPY STACK
 2684:	  0B9F	AB 0B			MOV	R3,TEMP1	;GET CONTROL VARIABLE
 2685:	  0BA1	A9 0C			MOV	R1,TEMP2
 2686:	  0BA3	F1 DC			ACALL	POPAS		;SAVE THE RESULT
 2687:	  0BA5	7A 00			MOV	R2,#CSTKAH	;RESTORE LIMIT LOCATION
 2688:	  0BA7	D0 00			POP	R0B0
 2689:	  0BA9	F1 E6			ACALL	PUSHAS		;PUT LIMIT ON STACK
 2690:	  0BAB	12 19 97		CALL	FP_BASE+4	;DO THE COMPARE
 2691:	  0BAE	D0 E0			POP	ACC		;GET LIMIT SIGN BACK
 2692:	  0BB0	60 01			JZ	$+3		;IF SIGN NEGATIVE, TEST "BACKWARDS"
 2693:	  0BB2	B3			CPL	C
 2694:	  0BB3	72 D5			ORL	C,F0		;SEE IF EQUAL
 2695:	  0BB5	40 17			JC	N4		;STILL SMALLER THAN LIMIT?
 2696:	  0BB7	74 11			MOV	A,#FSIZE	;REMOVE CONTROL STACK ENTRY
 2697:					;
 2698:					; Fall thru to PUSHCS
 2699:					;
 2700:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 66



 Line  I  Addr  Code            Source

 2701:					;***************************************************************
 2702:					;
 2703:					; PUSHCS - push frame onto control stack
 2704:					;          acc has - number of bytes, also test for overflow
 2705:					;
 2706:					;***************************************************************
 2707:					;
 2708:	  0BB9	25 11		PUSHCS:	ADD	A,CSTKA		;BUMP CONTROL STACK
 2709:	  0BBB	B4 61 00		CJNE	A,#CONVT+17,$+3	;SEE IF OVERFLOWED
 2710:	  0BBE	40 09			JC	E4XX		;EXIT IF STACK OVERFLOW
 2711:	  0BC0	C5 11			XCH	A,CSTKA		;STORE NEW CONTROL STACK VALUE, GET OLD
 2712:	  0BC2	14			DEC	A		;BUMP OLD VALUE
 2713:	  0BC3	F8			MOV	R0,A		;PUT OLD-1 IN R0
 2714:					;
 2715:	  0BC4	22			RET			;EXIT
 2716:					;
 2717:	  0BC5	F1 20		CSC:	ACALL	CLN_UP		;FINISH OFF THE LINE
 2718:	  0BC7	50 FB			JNC	CSC-1		;EXIT IF NO TERMINATOR
 2719:					;
 2720:	  0BC9	90 03 7F	E4XX:	MOV	DPTR,#EXC	;CONTROL STACK ERROR
 2721:	  0BCC	81 16			AJMP	EK		;STACK ERROR
 2722:					;
 2723:	  0BCE	85 0D 0A	N4:	MOV	TXAH,TEMP3	;GET TEXT POINTER
 2724:	  0BD1	85 0E 08		MOV	TXAL,TEMP4
 2725:	  0BD4	01 17			AJMP	ILOOP		;EXIT
 2726:					;
 2727:					;***************************************************************
 2728:					;
 2729:					; The statement action routine - RESTORE
 2730:					;
 2731:					;***************************************************************
 2732:					;
 2733:	  0BD6	71 DE		SRESTR:	ACALL	X_TR		;SWAP POINTERS
 2734:	  0BD8	D1 A4			ACALL	DP_B		;GET THE STARTING ADDRESS
 2735:	  0BDA	D1 C1			ACALL	T_DP		;PUT STARTING ADDRESS IN TEXT POINTER
 2736:	  0BDC	F1 2C			ACALL	B_TXA		;BUMP TXA
 2737:					;
 2738:					; Fall thru
 2739:					;
 2740:	  0BDE			X_TR:	;swap txa and rtxa
 2741:					;
 2742:	  0BDE	C5 0A			XCH	A,TXAH
 2743:	  0BE0	C5 12			XCH	A,RTXAH
 2744:	  0BE2	C5 0A			XCH	A,TXAH
 2745:	  0BE4	C5 08			XCH	A,TXAL
 2746:	  0BE6	C5 10			XCH	A,RTXAL
 2747:	  0BE8	C5 08			XCH	A,TXAL
 2748:	  0BEA	22			RET			;EXIT
 2749:					;
 2750:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 67



 Line  I  Addr  Code            Source

 2751:					;***************************************************************
 2752:					;
 2753:					; The statement action routine - READ
 2754:					;
 2755:					;***************************************************************
 2756:					;
 2757:	  0BEB	71 DE		SREAD:	ACALL	X_TR		;SWAP POINTERS
 2758:					;
 2759:	  0BED	D1 CF		SRD0:	ACALL	C_TST		;CHECK FOR COMMA
 2760:	  0BEF	40 16			JC	SRD4		;SEE WHAT IT IS
 2761:					;
 2762:	  0BF1	F1 4C		SRD:	ACALL	EXPRB		;EVALUATE THE EXPRESSION
 2763:	  0BF3	D1 D6			ACALL	GC		;GET THE CHARACTER AFTER EXPRESSION
 2764:	  0BF5	B4 2C 02		CJNE	A,#',',SRD1	;SEE IF MORE DATA
 2765:	  0BF8	80 02			SJMP	SRD2		;BYBASS CLEAN UP IF A COMMA
 2766:					;
 2767:	  0BFA	F1 20		SRD1:	ACALL	CLN_UP		;FINISH OFF THE LINE, IF AT END
 2768:					;
 2769:	  0BFC	71 DE		SRD2:	ACALL	X_TR		;RESTORE POINTERS
 2770:	  0BFE	F1 0A			ACALL	VAR_ER		;GET VARIABLE ADDRESS
 2771:	  0C00	F1 DA			ACALL	XPOP		;FLIP THE REGISTERS FOR POPAS
 2772:	  0C02	D1 CF			ACALL	C_TST		;SEE IF A COMMA
 2773:	  0C04	50 E5			JNC	SREAD		;READ AGAIN IF A COMMA
 2774:	  0C06	22			RET			;EXIT IF NOT
 2775:					;
 2776:	  0C07	B4 9C 04	SRD4:	CJNE	A,#T_DATA,SRD5	;SEE IF DATA
 2777:	  0C0A	D1 E0			ACALL	GCI1		;BUMP POINTER
 2778:	  0C0C	80 E3			SJMP	SRD
 2779:					;
 2780:	  0C0E	B4 01 08	SRD5:	CJNE	A,#EOF,SRD6	;SEE IF YOU BLEW IT
 2781:	  0C11	71 DE			ACALL	X_TR		;GET THE TEXT POINTER BACK
 2782:	  0C13	90 1F 81		MOV	DPTR,#E14X	;READ ERROR
 2783:					;
 2784:	  0C16	02 18 90	EK:	LJMP	ERROR
 2785:					;
 2786:	  0C19	D1 F5		SRD6:	ACALL	FINDCR		;WASTE THIS LINE
 2787:	  0C1B	F1 20			ACALL	CLN_UP		;CLEAN IT UP
 2788:	  0C1D	40 F2			JC	SRD5+3		;ERROR IF AT END
 2789:	  0C1F	80 CC			SJMP	SRD0
 2790:					;
 2791:	  0C21	D1 D6		NUMC:	ACALL	GC		;GET A CHARACTER
 2792:	  0C23	B4 23 04		CJNE	A,#'#',NUMC1	;SEE IF A #
 2793:	  0C26	D2 1B			SETB	COB		;VALID LINE PRINT
 2794:	  0C28	C1 D4			AJMP	IGC		;BUMP THE TEXT POINTER
 2795:					;
 2796:	  0C2A	B4 40 D9	NUMC1:	CJNE	A,#'@',SRD4-1	;EXIT IF NO GOOD
 2797:	  0C2D	D2 19			SETB	LPB
 2798:	  0C2F	C1 D4			AJMP	IGC
 2799:					;
 2800:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 68



 Line  I  Addr  Code            Source

 2801:					;***************************************************************
 2802:					;
 2803:					; The statement action routine - PRINT
 2804:					;
 2805:					;***************************************************************
 2806:					;
 2807:	  0C31	D2 36		SPH0:	SETB	ZSURP		;NO ZEROS
 2808:					;
 2809:	  0C33	D2 37		SPH1:	SETB	HMODE		;HEX MODE
 2810:					;
 2811:	  0C35	91 21		SPRINT:	ACALL	NUMC		;TEST FOR A LINE PRINT
 2812:	  0C37	91 40			ACALL	$+9		;PROCEED
 2813:	  0C39	53 23 F5		ANL	35,#11110101B	;CLEAR COB AND LPB
 2814:	  0C3C	53 26 3F		ANL	38,#00111111B	;NO HEX MODE
 2815:					;
 2816:	  0C3F	22			RET
 2817:					;
 2818:	  0C40	D1 EA			ACALL	DELTST		;CHECK FOR A DELIMITER
 2819:	  0C42	40 07			JC	SP1
 2820:					;
 2821:	  0C44	02 06 9D	SP0:	JMP	CRLF		;EXIT WITH A CR IF SO
 2822:					;
 2823:	  0C47	D1 CF		SP2:	ACALL	C_TST		;CHECK FOR A COMMA
 2824:	  0C49	40 F9			JC	SP0		;EXIT IF NO COMMA
 2825:					;
 2826:	  0C4B	D1 B2		SP1:	ACALL	CPS		;SEE IF A STRING TO PRINT
 2827:	  0C4D	50 F8			JNC	SP2		;IF A STRING, CHECK FOR A COMMA
 2828:					;
 2829:	  0C4F	B4 A4 08	SP4:	CJNE	A,#T_TAB,SP6
 2830:	  0C52	D1 9E			ACALL	I_PI		;ALWAYS CLEARS CARRY
 2831:	  0C54	95 16			SUBB	A,PHEAD		;TAKE DELTA BETWEEN TAB AND PHEAD
 2832:	  0C56	40 EF			JC	SP2		;EXIT IF PHEAD > TAB
 2833:	  0C58	80 05			SJMP	SP7		;OUTPUT SPACES
 2834:					;
 2835:	  0C5A	B4 A9 0A	SP6:	CJNE	A,#T_SPC,SM
 2836:	  0C5D	D1 9E			ACALL	I_PI		;SET UP PAREN VALUE
 2837:					;
 2838:	  0C5F	60 E6		SP7:	JZ	SP2
 2839:	  0C61	12 07 07		LCALL	STEROT		;OUTPUT A SPACE
 2840:	  0C64	14			DEC	A		;DECREMENT COUNTER
 2841:	  0C65	80 F8			SJMP	SP7		;LOOP
 2842:					;
 2843:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 69



 Line  I  Addr  Code            Source

 2844:	  0C67	B4 D3 14	SM:	CJNE	A,#T_CHR,SP8
 2845:	  0C6A	D1 D4			ACALL	IGC
 2846:	  0C6C	B4 24 06		CJNE	A,#'$',$+9
 2847:	  0C6F	12 10 02		LCALL	CNX		;PUT THE CHARACTER ON THE STACK
 2848:	  0C72	D1 99			ACALL	IFIXL		;PUT THE CHARACTER IN R1
 2849:	  0C74	80 04			SJMP	$+6
 2850:	  0C76	D1 97			ACALL	ONE		;EVALUATE THE EXPRESSION, PUT IN R3:R1
 2851:	  0C78	91 EC			ACALL	ERPAR
 2852:	  0C7A	AD 01			MOV	R5,R1B0		;BYTE TO OUTPUT
 2853:	  0C7C	80 07			SJMP	SQ
 2854:					;
 2855:	  0C7E	B4 AA 09	SP8:	CJNE	A,#T_CR,SX
 2856:	  0C81	D1 E0			ACALL	GCI1		;EAT THE TOKEN
 2857:	  0C83	7D 0D			MOV	R5,#CR
 2858:					;
 2859:	  0C85	12 07 09	SQ:	CALL	TEROT
 2860:	  0C88	80 BD			SJMP	SP2		;OUTPUT A CR AND DO IT AGAIN
 2861:					;
 2862:	  0C8A	B4 D2 53	SX:	CJNE	A,#T_USE,SP9	;USING TOKEN
 2863:	  0C8D	D1 D4			ACALL	IGC		;GE THE CHARACTER AFTER THE USING TOKEN
 2864:	  0C8F	B4 46 16		CJNE	A,#'F',U4	;SEE IF FLOATING
 2865:	  0C92	75 17 F0		MOV	FORMAT,#0F0H	;SET FLOATING
 2866:	  0C95	D1 D4			ACALL	IGC		;BUMP THE POINTER AND GET THE CHARACTER
 2867:	  0C97	D1 E0			ACALL	GCI1		;BUMP IT AGAIN
 2868:	  0C99	54 0F			ANL	A,#0FH		;STRIP OFF ASCII BIAS
 2869:	  0C9B	60 07			JZ	U3		;EXIT IF ZERO
 2870:	  0C9D	B4 03 00		CJNE	A,#3,$+3	;SEE IF AT LEAST A THREE
 2871:	  0CA0	50 02			JNC	U3		;FORCE A THREE IF NOT A THREE
 2872:	  0CA2	74 03			MOV	A,#3
 2873:					;
 2874:	  0CA4	42 17		U3:	ORL	FORMAT,A	;PUT DIGIT IN FORMAT
 2875:	  0CA6	80 2A			SJMP	U8		;CLEAN UP END
 2876:					;
 2877:	  0CA8	B4 30 07	U4:	CJNE	A,#'0',U5
 2878:	  0CAB	75 17 00		MOV	FORMAT,#0	;FREE FORMAT
 2879:	  0CAE	D1 E0			ACALL	GCI1		;BUMP THE POINTER
 2880:	  0CB0	80 20			SJMP	U8
 2881:					;
 2882:	  0CB2	B4 23 1D	U5:	CJNE	A,#'#',U8	;SEE IF INTGER FORMAT
 2883:	  0CB5	91 D6			ACALL	U6
 2884:	  0CB7	8F 17			MOV	FORMAT,R7	;SAVE THE FORMAT
 2885:	  0CB9	B4 2E 11		CJNE	A,#'.',U8A	;SEE IF TERMINATOR WAS RADIX
 2886:	  0CBC	D1 D4			ACALL	IGC		;BUMP PAST .
 2887:	  0CBE	91 D6			ACALL	U6		;LOOP AGAIN
 2888:	  0CC0	EF			MOV	A,R7		;GET COUNT
 2889:	  0CC1	25 17			ADD	A,FORMAT	;SEE IF TOO BIG
 2890:	  0CC3	24 F7			ADD	A,#0F7H
 2891:	  0CC5	50 02			JNC	U5A
 2892:					;
 2893:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 70



 Line  I  Addr  Code            Source

 2894:	  0CC7	21 40		SE0:	AJMP	INTERX		;ERROR, BAD SYNTAX
 2895:					;
 2896:	  0CC9	EF		U5A:	MOV	A,R7		;GET THE COUNT BACK
 2897:	  0CCA	C4			SWAP	A		;ADJUST
 2898:	  0CCB	42 17			ORL	FORMAT,A	;GET THE COUNT
 2899:					;
 2900:	  0CCD	E5 17		U8A:	MOV	A,FORMAT
 2901:					;
 2902:	  0CCF	C4		U8B:	SWAP	A		;GET THE FORMAT RIGHT
 2903:	  0CD0	F5 17			MOV	FORMAT,A
 2904:					;
 2905:	  0CD2	91 EC		U8:	ACALL	ERPAR
 2906:	  0CD4	81 47			AJMP	SP2		;DONE
 2907:					;
 2908:	  0CD6	7F 00		U6:	MOV	R7,#0		;SET COUNTER
 2909:					;
 2910:	  0CD8	B4 23 0C	U7:	CJNE	A,#'#',SP9A	;EXIT IF NOT A #
 2911:	  0CDB	0F			INC	R7		;BUMP COUNTER
 2912:	  0CDC	D1 D4			ACALL	IGC		;GET THE NEXT CHARACTER
 2913:	  0CDE	80 F8			SJMP	U7		;LOOP
 2914:					;
 2915:	  0CE0	D1 EC		SP9:	ACALL	DELTST+2	;CHECK FOR DELIMITER
 2916:	  0CE2	50 03			JNC	SP9A		;EXIT IF A DELIMITER
 2917:					;
 2918:	  0CE4	B4 A8 34		CJNE	A,#T_ELSE,SS
 2919:					;
 2920:	  0CE7	22		SP9A:	RET			;EXIT IF ELSE TOKEN
 2921:					;
 2922:					;**************************************************************
 2923:					;
 2924:					; P_E - Evaluate an expression in parens ( )
 2925:					;
 2926:					;**************************************************************
 2927:					;
 2928:	  0CE8	7F E0		P_E:	MOV	R7,#T_LPAR
 2929:	  0CEA	F1 4A			ACALL	WE
 2930:					;
 2931:	  0CEC	7F 29		ERPAR:	MOV	R7,#')'		;EAT A RIGHT PAREN
 2932:					;
 2933:	  0CEE	D1 DE		EATC:	ACALL	GCI		;GET THE CHARACTER
 2934:	  0CF0	B5 07 D4		CJNE	A,R7B0,SE0	;ERROR IF NOT THE SAME
 2935:	  0CF3	22			RET
 2936:					;
 2937:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 71



 Line  I  Addr  Code            Source

 2938:					;***************************************************************
 2939:					;
 2940:	  0CF4			S_ON:	; ON Statement
 2941:					;
 2942:					;***************************************************************
 2943:					;
 2944:	  0CF4	D1 97			ACALL	ONE		;GET THE EXPRESSION
 2945:	  0CF6	D1 DE			ACALL	GCI		;GET THE NEXT CHARACTER
 2946:	  0CF8	B4 83 04		CJNE	A,#T_GOTO,C0
 2947:	  0CFB	B1 06			ACALL	C1		;EAT THE COMMAS
 2948:	  0CFD	41 7A			AJMP	SF3		;DO GOTO
 2949:					;
 2950:	  0CFF	B4 9F C5	C0:	CJNE	A,#T_GOSB,SE0
 2951:	  0D02	B1 06			ACALL	C1
 2952:	  0D04	61 37			AJMP	SGS0		;DO GOSUB
 2953:					;
 2954:	  0D06	B9 00 06	C1:	CJNE	R1,#0,C2
 2955:	  0D09	F1 39			ACALL	INTERR		;GET THE LINE NUMBER
 2956:	  0D0B	D1 F5			ACALL	FINDCR
 2957:	  0D0D	41 FC			AJMP	RL1		;FINISH UP THIS LINE
 2958:					;
 2959:	  0D0F	7F 2C		C2:	MOV	R7,#','
 2960:	  0D11	D1 F7			ACALL	FINDC
 2961:	  0D13	B4 2C B1		CJNE	A,#',',SE0	;ERROR IF NOT A COMMA
 2962:	  0D16	19			DEC	R1
 2963:	  0D17	D1 E0			ACALL	GCI1		;BUMP PAST COMMA
 2964:	  0D19	80 EB			SJMP	C1
 2965:					;
 2966:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 72



 Line  I  Addr  Code            Source

 2967:					;
 2968:	  0D1B	D1 C8		SS:	ACALL	S_C		;SEE IF A STRING
 2969:	  0D1D	40 05			JC	SA		;NO STRING IF CARRY IS SET
 2970:	  0D1F	12 06 B7		LCALL	UPRNT		;PUT POINTER IN DPTR
 2971:	  0D22	81 47			AJMP	SP2		;SEE IF MORE
 2972:					;
 2973:	  0D24	F1 4C		SA:	ACALL	EXPRB		;MUST BE AN EXPRESSION
 2974:	  0D26	74 48			MOV	A,#72
 2975:	  0D28	B5 16 00		CJNE	A,PHEAD,$+3	;CHECK PHEAD POSITION
 2976:	  0D2B	50 02			JNC	$+4
 2977:	  0D2D	91 44			ACALL	SP0		;FORCE A CRLF
 2978:	  0D2F	30 37 14		JNB	HMODE,S13	;HEX MODE?
 2979:	  0D32	12 11 F4		CALL	FCMP		;SEE IF TOS IS < 0FFFH
 2980:	  0D35	40 0F			JC	S13		;EXIT IF GREATER
 2981:	  0D37	12 13 81		CALL	AABS		;GET THE SIGN
 2982:	  0D3A	70 07			JNZ	OOPS		;WASTE IF NEGATIVE
 2983:	  0D3C	D1 99			ACALL	IFIXL
 2984:	  0D3E	12 19 A9		CALL	FP_BASE+22	;PRINT HEXMODE
 2985:	  0D41	81 47			AJMP	SP2
 2986:	  0D43	12 13 93	OOPS:	CALL	ANEG		;MAKE IT NEGATIVE
 2987:					;
 2988:	  0D46	12 19 A1	S13:	CALL	FP_BASE+14	;DO FP OUTPUT
 2989:	  0D49	74 01			MOV	A,#1		;OUTPUT A SPACE
 2990:	  0D4B	81 5F			AJMP	SP7
 2991:					;
 2992:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 73



 Line  I  Addr  Code            Source

 2993:					;***************************************************************
 2994:					;
 2995:					; ANU -  Get variable name from text - set carry if not found
 2996:					;        if succeeds returns variable in R7:R6
 2997:					;        R6 = 0 if no digit in name
 2998:					;
 2999:					;***************************************************************
 3000:					;
 3001:	  0D4D	D1 D4		ANU:	ACALL	IGC		;INCREMENT AND GET CHARACTER
 3002:	  0D4F	12 1F ED		LCALL	1FEDH		;CHECK FOR DIGIT
 3003:	  0D52	40 0C			JC	$+14		;EXIT IF VALID DIGIT
 3004:	  0D54	B4 5F 01		CJNE	A,#'_',$+4	;SEE IF A _
 3005:	  0D57	22			RET
 3006:					;
 3007:	  0D58	B4 41 00	AL:	CJNE	A,#'A',$+3	;IS IT AN ASCII A?
 3008:	  0D5B	40 04			JC	$+6		;EXIT IF CARRY IS SET
 3009:	  0D5D	B4 5B 00		CJNE	A,#'Z'+1,$+3	;IS IT LESS THAN AN ASCII Z
 3010:	  0D60	B3			CPL	C		;FLIP CARRY
 3011:	  0D61	22			RET
 3012:					;
 3013:	  0D62	30 D5 3E		JNB	F0,VAR2
 3014:					;
 3015:	  0D65	90 17 5F	SD0:	MOV	DPTR,#E6X
 3016:	  0D68	81 16			AJMP	EK
 3017:					;
 3018:	  0D6A	D2 D5		SDIMX:	SETB	F0		;SAYS DOING A DIMENSION
 3019:	  0D6C	80 02			SJMP	VAR1
 3020:					;
 3021:	  0D6E	C2 D5		VAR:	CLR	F0		;SAYS DOING A VARIABLE
 3022:					;
 3023:	  0D70	D1 D6		VAR1:	ACALL	GC		;GET THE CHARACTER
 3024:	  0D72	B1 58			ACALL	AL		;CHECK FOR ALPHA
 3025:	  0D74	50 04			JNC	$+6		;ERROR IF IN DIM
 3026:	  0D76	20 D5 EC		JB	F0,SD0
 3027:	  0D79	22			RET
 3028:	  0D7A	FF			MOV	R7,A		;SAVE ALPHA CHARACTER
 3029:	  0D7B	E4			CLR	A		;ZERO IN CASE OF FAILURE
 3030:	  0D7C	FD			MOV	R5,A		;SAVE IT
 3031:					;
 3032:	  0D7D	FE		VY:	MOV	R6,A
 3033:	  0D7E	B1 4D			ACALL	ANU		;CHECK FOR ALPHA OR NUMBER
 3034:	  0D80	40 07			JC	VX		;EXIT IF NO ALPHA OR NUM
 3035:					;
 3036:	  0D82	CF			XCH	A,R7
 3037:	  0D83	2D			ADD	A,R5		;NUMBER OF CHARACTERS IN ALPHABET
 3038:	  0D84	CF			XCH	A,R7		;PUT IT BACK
 3039:	  0D85	7D 1A			MOV	R5,#26		;FOR THE SECOND TIME AROUND
 3040:	  0D87	80 F4			SJMP	VY
 3041:					;
 3042:	  0D89	C2 15		VX:	CLR	LINEB		;TELL EDITOR A VARIABLE IS DECLARED
 3043:	  0D8B	B4 E0 2F		CJNE	A,#T_LPAR,V4	;SEE IF A LEFT PAREN
 3044:					;
 3045:	  0D8E	43 06 80		ORL	R6B0,#80H	;SET BIT 7 TO SIGINIFY MATRIX
 3046:	  0D91	12 06 11		CALL	F_VAR		;FIND THE VARIABLE
 3047:	  0D94	C0 02			PUSH	R2B0		;SAVE THE LOCATION
 3048:	  0D96	C0 00			PUSH	R0B0

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 74



 Line  I  Addr  Code            Source

 3049:	  0D98	50 C8			JNC	SD0-3		;DEFAULT IF NOT IN TABLE
 3050:	  0D9A	20 D5 28		JB	F0,SDI		;NO DEFAULT FOR DIMENSION
 3051:	  0D9D	79 0A			MOV	R1,#10
 3052:	  0D9F	7B 00			MOV	R3,#0
 3053:	  0DA1	B1 D5			ACALL	D_CHK
 3054:					;
 3055:	  0DA3	D1 A0		VAR2:	ACALL	PAREN_INT	;EVALUATE INTEGER IN PARENS
 3056:	  0DA5	BB 00 BD		CJNE	R3,#0,SD0	;ERROR IF R3<>0
 3057:	  0DA8	D0 82			POP	DPL		;GET VAR FOR LOOKUP
 3058:	  0DAA	D0 83			POP	DPH
 3059:	  0DAC	E0			MOVX	A,@DPTR		;GET DIMENSION
 3060:	  0DAD	14			DEC	A		;BUMP OFFSET
 3061:	  0DAE	99			SUBB	A,R1		;A MUST BE > R1
 3062:	  0DAF	40 B4			JC	SD0
 3063:	  0DB1	12 05 B8		LCALL	DECDP2		;BUMP POINTER TWICE
 3064:	  0DB4	51 15			ACALL	VARB		;CALCULATE THE BASE
 3065:					;
 3066:	  0DB6	C9		X3120:	XCH	A,R1		;SWAP R2:R0, R3:R1
 3067:	  0DB7	C8			XCH	A,R0
 3068:	  0DB8	C9			XCH	A,R1
 3069:	  0DB9	CB			XCH	A,R3
 3070:	  0DBA	CA			XCH	A,R2
 3071:	  0DBB	CB			XCH	A,R3
 3072:	  0DBC	22			RET
 3073:					;
 3074:	  0DBD	20 D5 A5	V4:	JB	F0,SD0		;ERROR IF NO LPAR FOR DIM
 3075:	  0DC0	12 06 11		LCALL	F_VAR		;GET SCALAR VARIABLE
 3076:	  0DC3	C3			CLR	C
 3077:	  0DC4	22			RET
 3078:					;
 3079:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 75



 Line  I  Addr  Code            Source

 3080:					;
 3081:	  0DC5	D1 A0		SDI:	ACALL	PAREN_INT	;EVALUATE PAREN EXPRESSION
 3082:	  0DC7	BB 00 9B		CJNE	R3,#0,SD0	;ERROR IF NOT ZERO
 3083:	  0DCA	D0 00			POP	R0B0		;SET UP R2:R0
 3084:	  0DCC	D0 02			POP	R2B0
 3085:	  0DCE	B1 D5			ACALL	D_CHK		;DO DIM
 3086:	  0DD0	D1 CF			ACALL	C_TST		;CHECK FOR COMMA
 3087:	  0DD2	50 96			JNC	SDIMX		;LOOP IF COMMA
 3088:	  0DD4	22			RET			;RETURN IF NO COMMA
 3089:					;
 3090:	  0DD5	09		D_CHK:	INC	R1		;BUMP FOR TABLE LOOKUP
 3091:	  0DD6	E9			MOV	A,R1
 3092:	  0DD7	60 8C			JZ	SD0		;ERROR IF 0FFFFH
 3093:	  0DD9	FC			MOV	R4,A		;SAVE FOR LATER
 3094:	  0DDA	90 01 08		MOV	DPTR,#MT_ALL	;GET MATRIX ALLOCATION
 3095:	  0DDD	51 15			ACALL	VARB		;DO THE CALCULATION
 3096:	  0DDF	AF 83			MOV	R7,DPH		;SAVE MATRIX ALLOCATION
 3097:	  0DE1	AE 82			MOV	R6,DPL
 3098:	  0DE3	90 01 06		MOV	DPTR,#ST_ALL	;SEE IF TOO MUCH MEMORY TAKEN
 3099:	  0DE6	12 15 A2		CALL	FUL1		;ST_ALL SHOULD BE > R3:R1
 3100:	  0DE9	90 01 08		MOV	DPTR,#MT_ALL	;SAVE THE NEW MATRIX POINTER
 3101:	  0DEC	12 05 FD		CALL	S31DP
 3102:	  0DEF	88 82			MOV	DPL,R0		;GET VARIABLE ADDRESS
 3103:	  0DF1	8A 83			MOV	DPH,R2
 3104:	  0DF3	EC			MOV	A,R4		;DIMENSION SIZE
 3105:	  0DF4	F0			MOVX	@DPTR,A		;SAVE IT
 3106:	  0DF5	12 05 B8		CALL	DECDP2		;SAVE TARGET ADDRESS
 3107:					;
 3108:	  0DF8	EF		R76S:	MOV	A,R7
 3109:	  0DF9	F0			MOVX	@DPTR,A
 3110:	  0DFA	A3			INC	DPTR
 3111:	  0DFB	EE			MOV	A,R6		;ELEMENT SIZE
 3112:	  0DFC	F0			MOVX	@DPTR,A
 3113:	  0DFD	22			RET			;R2:R0 STILL HAS SYMBOL TABLE ADDRESS
 3114:					;
 3115:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 76



 Line  I  Addr  Code            Source

 3116:					;***************************************************************
 3117:					;
 3118:					; The statement action routine - INPUT
 3119:					;
 3120:					;***************************************************************
 3121:					;
 3122:	  0DFE	D1 B2		SINPUT:	ACALL	CPS		;PRINT STRING IF THERE
 3123:					;
 3124:	  0E00	D1 CF			ACALL	C_TST		;CHECK FOR A COMMA
 3125:	  0E02	50 07			JNC	IN2A		;NO CRLF
 3126:	  0E04	91 44			ACALL	SP0		;DO A CRLF
 3127:					;
 3128:	  0E06	7D 3F		IN2:	MOV	R5,#'?'		;OUTPUT A ?
 3129:	  0E08	12 07 09		CALL	TEROT
 3130:					;
 3131:	  0E0B	D2 22		IN2A:	SETB	INP_B		;DOING INPUT
 3132:	  0E0D	12 06 D0		CALL	INLINE		;INPUT THE LINE
 3133:	  0E10	C2 22			CLR	INP_B
 3134:	  0E12	75 0F 00		MOV	TEMP5,#HIGH IBUF
 3135:	  0E15	75 0E 07		MOV	TEMP4,#LOW IBUF
 3136:					;
 3137:	  0E18	D1 C8		IN3:	ACALL	S_C		;SEE IF A STRING
 3138:	  0E1A	40 0D			JC	IN3A		;IF CARRY IS SET, NO STRING
 3139:	  0E1C	B1 B6			ACALL	X3120		;FLIP THE ADDRESSES
 3140:	  0E1E	AB 0F			MOV	R3,TEMP5
 3141:	  0E20	A9 0E			MOV	R1,TEMP4
 3142:	  0E22	31 A5			ACALL	SSOOP
 3143:	  0E24	D1 CF			ACALL	C_TST		;SEE IF MORE TO DO
 3144:	  0E26	50 DE			JNC	IN2
 3145:	  0E28	22			RET
 3146:					;
 3147:	  0E29	12 18 4E	IN3A:	CALL	DTEMP		;GET THE USER LOCATION
 3148:	  0E2C	12 19 55		CALL	GET_NUM		;GET THE USER SUPPLIED NUMBER
 3149:	  0E2F	70 18			JNZ	IN5		;ERROR IF NOT ZERO
 3150:	  0E31	12 18 55		CALL	TEMPD		;SAVE THE DATA POINTER
 3151:	  0E34	F1 0A			ACALL	VAR_ER		;GET THE VARIABLE
 3152:	  0E36	F1 DA			ACALL	XPOP		;SAVE THE VARIABLE
 3153:	  0E38	12 18 4E		CALL	DTEMP		;GET DPTR BACK FROM VAR_ER
 3154:	  0E3B	D1 CF			ACALL	C_TST		;SEE IF MORE TO DO
 3155:	  0E3D	40 13			JC	IN6		;EXIT IF NO COMMA
 3156:	  0E3F	E0			MOVX	A,@DPTR		;GET INPUT TERMINATOR
 3157:	  0E40	B4 2C 06		CJNE	A,#',',IN5	;IF NOT A COMMA DO A CR AND TRY AGAIN
 3158:	  0E43	A3			INC	DPTR		;BUMP PAST COMMA AND READ NEXT VALUE
 3159:	  0E44	12 18 55		CALL	TEMPD
 3160:	  0E47	80 CF			SJMP	IN3
 3161:					;
 3162:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 77



 Line  I  Addr  Code            Source

 3163:					;
 3164:	  0E49	90 00 F1	IN5:	MOV	DPTR,#IAN	;PRINT INPUT A NUMBER
 3165:	  0E4C	12 06 A5		CALL	CRP		;DO A CR, THEN, PRINT FROM ROM
 3166:	  0E4F	02 18 45		LJMP	CC1		;TRY IT AGAIN
 3167:					;
 3168:	  0E52	E0		IN6:	MOVX	A,@DPTR
 3169:	  0E53	B4 0D 01		CJNE	A,#CR,EIGP
 3170:	  0E56	22			RET
 3171:					;
 3172:	  0E57	90 03 69	EIGP:	MOV	DPTR,#EIG
 3173:	  0E5A	12 06 A5		CALL	CRP		;PRINT THE MESSAGE AND EXIT
 3174:	  0E5D	81 44			AJMP	SP0		;EXIT WITH A CRLF
 3175:					;
 3176:					;***************************************************************
 3177:					;
 3178:	  0E5F			SOT:	; On timer interrupt
 3179:					;
 3180:					;***************************************************************
 3181:					;
 3182:	  0E5F	D1 8E			ACALL	TWO		;GET THE NUMBERS
 3183:	  0E61	8B 4B			MOV	SP_H,R3
 3184:	  0E63	89 4C			MOV	SP_L,R1
 3185:	  0E65	90 01 26		MOV	DPTR,#TIV	;SAVE THE NUMBER
 3186:	  0E68	D2 10			SETB	OTS
 3187:	  0E6A	A1 F8			AJMP	R76S		;EXIT
 3188:					;
 3189:					;
 3190:					;***************************************************************
 3191:					;
 3192:	  0E6C			SCALL:	; Call a user rountine
 3193:					;
 3194:					;***************************************************************
 3195:					;
 3196:	  0E6C	F1 39			ACALL	INTERR		;CONVERT INTEGER
 3197:	  0E6E	BA 00 0A		CJNE	R2,#0,S_C_1	;SEE IF TRAP
 3198:	  0E71	E8			MOV	A,R0
 3199:	  0E72	20 E7 06		JB	ACC.7,S_C_1
 3200:	  0E75	28			ADD	A,R0
 3201:	  0E76	90 41 00		MOV	DPTR,#4100H
 3202:	  0E79	F5 82			MOV	DPL,A
 3203:					;
 3204:	  0E7B	31 74		S_C_1:	ACALL	AC1		;JUMP TO USER PROGRAM
 3205:	  0E7D	53 D0 E7		ANL	PSW,#11100111B	;BACK TO BANK 0
 3206:	  0E80	22			RET			;EXIT
 3207:					;
 3208:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 78



 Line  I  Addr  Code            Source

 3209:					;**************************************************************
 3210:					;
 3211:	  0E81			THREE:	; Save value for timer function
 3212:					;
 3213:					;**************************************************************
 3214:					;
 3215:	  0E81	D1 97			ACALL	ONE		;GET THE FIRST INTEGER
 3216:	  0E83	12 16 79		CALL	CBIAS		;BIAS FOR TIMER LOAD
 3217:	  0E86	8B 40			MOV	T_HH,R3
 3218:	  0E88	89 41			MOV	T_LL,R1
 3219:	  0E8A	7F 2C			MOV	R7,#','		;WASTE A COMMA
 3220:	  0E8C	91 EE			ACALL	EATC		;FALL THRU TO TWO
 3221:					;
 3222:					;**************************************************************
 3223:					;
 3224:	  0E8E			TWO:	; Get two values seperated by a comma off the stack
 3225:					;
 3226:					;**************************************************************
 3227:					;
 3228:	  0E8E	F1 4C			ACALL	EXPRB
 3229:	  0E90	7F 2C			MOV	R7,#','		;WASTE THE COMMA
 3230:	  0E92	F1 4A			ACALL	WE
 3231:	  0E94	02 14 93		JMP	TWOL		;EXIT
 3232:					;
 3233:					;*************************************************************
 3234:					;
 3235:	  0E97			ONE:	; Evaluate an expression and get an integer
 3236:					;
 3237:					;*************************************************************
 3238:					;
 3239:	  0E97	F1 4C			ACALL	EXPRB		;EVALUATE EXPERSSION
 3240:					;
 3241:	  0E99	12 12 15	IFIXL:	CALL	IFIX		;INTEGERS IN R3:R1
 3242:	  0E9C	E9			MOV	A,R1
 3243:	  0E9D	22			RET
 3244:					;
 3245:					;
 3246:					;*************************************************************
 3247:					;
 3248:	  0E9E			I_PI:	; Increment text pointer then get an integer
 3249:					;
 3250:					;*************************************************************
 3251:					;
 3252:	  0E9E	D1 E0			ACALL	GCI1		;BUMP TEXT, THEN GET INTEGER
 3253:					;
 3254:	  0EA0			PAREN_INT:; Get an integer in parens ( )
 3255:					;
 3256:	  0EA0	91 E8			ACALL	P_E
 3257:	  0EA2	80 F5			SJMP	IFIXL
 3258:					;
 3259:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 79



 Line  I  Addr  Code            Source

 3260:					;
 3261:	  0EA4	85 13 83	DP_B:	MOV	DPH,BOFAH
 3262:	  0EA7	85 14 82		MOV	DPL,BOFAL
 3263:	  0EAA	22			RET
 3264:					;
 3265:	  0EAB	85 0A 83	DP_T:	MOV	DPH,TXAH
 3266:	  0EAE	85 08 82		MOV	DPL,TXAL
 3267:	  0EB1	22			RET
 3268:					;
 3269:	  0EB2	D1 D6		CPS:	ACALL	GC		;GET THE CHARACTER
 3270:	  0EB4	B4 22 73		CJNE	A,#'"',NOPASS	;EXIT IF NO STRING
 3271:	  0EB7	D1 AB			ACALL	DP_T		;GET TEXT POINTER
 3272:	  0EB9	A3			INC	DPTR		;BUMP PAST "
 3273:	  0EBA	7C 22			MOV	R4,#'"'
 3274:	  0EBC	12 06 BB		CALL	PN0		;DO THE PRINT
 3275:	  0EBF	A3			INC	DPTR		;GO PAST QUOTE
 3276:	  0EC0	C3			CLR	C		;PASSED TEST
 3277:					;
 3278:	  0EC1	85 83 0A	T_DP:	MOV	TXAH,DPH	;TEXT POINTER GETS DPTR
 3279:	  0EC4	85 82 08		MOV	TXAL,DPL
 3280:	  0EC7	22			RET
 3281:					;
 3282:					;*************************************************************
 3283:					;
 3284:	  0EC8			S_C:	; Check for a string
 3285:					;
 3286:					;*************************************************************
 3287:					;
 3288:	  0EC8	D1 D6			ACALL	GC		;GET THE CHARACTER
 3289:	  0ECA	B4 24 5D		CJNE	A,#'$',NOPASS	;SET CARRY IF NOT A STRING
 3290:	  0ECD	21 EF			AJMP	IST_CAL		;CLEAR CARRY, CALCULATE OFFSET
 3291:					;
 3292:					;
 3293:					;
 3294:					;**************************************************************
 3295:					;
 3296:	  0ECF	D1 D6		C_TST:	ACALL	GC		;GET A CHARACTER
 3297:	  0ED1	B4 2C 56		CJNE	A,#',',NOPASS	;SEE IF A COMMA
 3298:					;
 3299:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 80



 Line  I  Addr  Code            Source

 3300:					;***************************************************************
 3301:					;
 3302:					;GC AND GCI - GET A CHARACTER FROM TEXT (NO BLANKS)
 3303:					;             PUT CHARACTER IN THE ACC
 3304:					;
 3305:					;***************************************************************
 3306:					;
 3307:	  0ED4	D1 E0		IGC:	ACALL	GCI1		;BUMP POINTER, THEN GET CHARACTER
 3308:					;
 3309:	  0ED6	D2 D3		GC:	SETB	RS0		;USE BANK 1
 3310:	  0ED8	8A A0			MOV	P2,R2		;SET UP PORT 2
 3311:	  0EDA	E2			MOVX	A,@R0		;GET EXTERNAL BYTE
 3312:	  0EDB	C2 D3			CLR	RS0		;BACK TO BANK 0
 3313:	  0EDD	22			RET			;EXIT
 3314:					;
 3315:	  0EDE	D1 D6		GCI:	ACALL	GC
 3316:					;
 3317:					; This routine bumps txa by one and always clears the carry
 3318:					;
 3319:	  0EE0	D2 D3		GCI1:	SETB	RS0		;BANK 1
 3320:	  0EE2	08			INC	R0		;BUMP TXA
 3321:	  0EE3	B8 00 01		CJNE	R0,#0,$+4
 3322:	  0EE6	0A			INC	R2
 3323:	  0EE7	C2 D3			CLR	RS0
 3324:	  0EE9	22			RET			;EXIT
 3325:					;
 3326:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 81



 Line  I  Addr  Code            Source

 3327:					;**************************************************************
 3328:					;
 3329:					; Check delimiters
 3330:					;
 3331:					;**************************************************************
 3332:					;
 3333:	  0EEA	D1 D6		DELTST:	ACALL	GC		;GET A CHARACTER
 3334:	  0EEC	B4 0D 02		CJNE	A,#CR,DT1	;SEE IF A CR
 3335:	  0EEF	E4			CLR	A
 3336:	  0EF0	22			RET
 3337:					;
 3338:	  0EF1	B4 3A 36	DT1:	CJNE	A,#':',NOPASS	;SET CARRY IF NO MATCH
 3339:					;
 3340:	  0EF4	22		L_RET:	RET
 3341:					;
 3342:					;
 3343:					;***************************************************************
 3344:					;
 3345:					; FINDC - Find the character in R7, update TXA
 3346:					;
 3347:					;***************************************************************
 3348:					;
 3349:	  0EF5	7F 0D		FINDCR:	MOV	R7,#CR		;KILL A STATEMENT LINE
 3350:					;
 3351:	  0EF7	D1 EA		FINDC:	ACALL	DELTST
 3352:	  0EF9	50 F9			JNC	L_RET
 3353:					;
 3354:	  0EFB	B5 07 01		CJNE	A,R7B0,FNDCL2	;MATCH?
 3355:	  0EFE	22			RET
 3356:					;
 3357:	  0EFF	D1 E0		FNDCL2:	ACALL	GCI1
 3358:	  0F01	80 F4			SJMP	FINDC		;LOOP
 3359:					;
 3360:	  0F03	D1 E0			ACALL	GCI1
 3361:					;
 3362:	  0F05	D1 EA		WCR:	ACALL	DELTST		;WASTE UNTIL A "REAL" CR
 3363:	  0F07	70 FA			JNZ	WCR-2
 3364:	  0F09	22			RET
 3365:					;
 3366:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 82



 Line  I  Addr  Code            Source

 3367:					;***************************************************************
 3368:					;
 3369:					; VAR_ER - Check for a variable, exit if error
 3370:					;
 3371:					;***************************************************************
 3372:					;
 3373:	  0F0A	B1 6E		VAR_ER:	ACALL	VAR
 3374:	  0F0C	80 2D			SJMP	INTERR+2
 3375:					;
 3376:					;
 3377:					;***************************************************************
 3378:					;
 3379:					; S_D0 - The Statement Action Routine DO
 3380:					;
 3381:					;***************************************************************
 3382:					;
 3383:	  0F0E	71 C5		S_DO:	ACALL	CSC		;FINISH UP THE LINE
 3384:	  0F10	7C 03			MOV	R4,#DTYPE	;TYPE FOR STACK
 3385:	  0F12	71 3D			ACALL	SGS1		;SAVE ON STACK
 3386:	  0F14	01 17			AJMP	ILOOP		;EXIT
 3387:					;
 3388:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 83



 Line  I  Addr  Code            Source

 3389:					;***************************************************************
 3390:					;
 3391:					; CLN_UP - Clean up the end of a statement, see if at end of
 3392:					;          file, eat character and line count after CR
 3393:					;
 3394:					;***************************************************************
 3395:					;
 3396:	  0F16	B4 3A 02	C_2:	CJNE	A,#':',C_1	;SEE IF A TERMINATOR
 3397:	  0F19	C1 E0			AJMP	GCI1		;BUMP POINTER AND EXIT, IF SO
 3398:					;
 3399:	  0F1B	B4 A8 6D	C_1:	CJNE	A,#T_ELSE,EP5
 3400:	  0F1E	F1 05			ACALL	WCR		;WASTE UNTIL A CR
 3401:					;
 3402:	  0F20	D1 D6		CLN_UP:	ACALL	GC		;GET THE CHARACTER
 3403:	  0F22	B4 0D F1		CJNE	A,#CR,C_2	;SEE IF A CR
 3404:	  0F25	D1 D4			ACALL	IGC		;GET THE NEXT CHARACTER
 3405:	  0F27	B4 01 02		CJNE	A,#EOF,B_TXA	;SEE IF TERMINATOR
 3406:					;
 3407:	  0F2A	D3		NOPASS:	SETB	C
 3408:	  0F2B	22			RET
 3409:					;
 3410:	  0F2C	C5 08		B_TXA:	XCH	A,TXAL		;BUMP TXA BY THREE
 3411:	  0F2E	24 03			ADD	A,#3
 3412:	  0F30	C5 08			XCH	A,TXAL
 3413:	  0F32	10 D7 01		JBC	CY,$+4
 3414:	  0F35	22			RET
 3415:	  0F36	05 0A			INC	TXAH
 3416:	  0F38	22			RET
 3417:					;
 3418:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 84



 Line  I  Addr  Code            Source

 3419:					;***************************************************************
 3420:					;
 3421:					;         Get an INTEGER from the text
 3422:					;         sets CARRY if not found
 3423:					;         returns the INTGER value in DPTR and R2:R0
 3424:					;         returns the terminator in ACC
 3425:					;
 3426:					;***************************************************************
 3427:					;
 3428:	  0F39	F1 3E		INTERR:	ACALL	INTGER		;GET THE INTEGER
 3429:	  0F3B	40 4E			JC	EP5		;ERROR IF NOT FOUND
 3430:	  0F3D	22			RET			;EXIT IF FOUND
 3431:					;
 3432:	  0F3E	D1 AB		INTGER:	ACALL	DP_T
 3433:	  0F40	12 19 A5		CALL	FP_BASE+18	;CONVERT THE INTEGER
 3434:	  0F43	D1 C1			ACALL	T_DP
 3435:	  0F45	8A 83			MOV	DPH,R2		;PUT THE RETURNED VALUE IN THE DPTR
 3436:	  0F47	88 82			MOV	DPL,R0
 3437:					;
 3438:	  0F49	22		ITRET:	RET			;EXIT
 3439:					;
 3440:					;
 3441:	  0F4A	91 EE		WE:	ACALL	EATC		;WASTE THE CHARACTER
 3442:					;
 3443:					; Fall thru to evaluate the expression
 3444:					;
 3445:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 85



 Line  I  Addr  Code            Source

 3446:					;***************************************************************
 3447:					;
 3448:					; EXPRB - Evaluate an expression
 3449:					;
 3450:					;***************************************************************
 3451:					;
 3452:	  0F4C	7A CD		EXPRB:	MOV	R2,#LOW OPBOL	;BASE PRECEDENCE
 3453:					;
 3454:	  0F4E	C0 02		EP1:	PUSH	R2B0		;SAVE OPERATOR PRECEDENCE
 3455:	  0F50	C2 24			CLR	ARGF		;RESET STACK DESIGNATOR
 3456:					;
 3457:	  0F52	E5 81		EP2:	MOV	A,SP		;GET THE STACK POINTER
 3458:	  0F54	24 0C			ADD	A,#12		;NEED AT LEAST 12 BYTES
 3459:	  0F56	50 03			JNC	$+5
 3460:	  0F58	02 18 8D		LJMP	ERROR-3
 3461:	  0F5B	E5 09			MOV	A,ASTKA		;GET THE ARG STACK
 3462:	  0F5D	94 38			SUBB	A,#LOW TM_TOP+12;NEED 12 BYTES ALSO
 3463:	  0F5F	50 03			JNC	$+5
 3464:	  0F61	02 12 0C		LJMP	E4YY
 3465:	  0F64	20 24 13		JB	ARGF,EP4	;MUST BE AN OPERATOR, IF SET
 3466:	  0F67	B1 6E			ACALL	VAR		;IS THE VALUE A VARIABLE?
 3467:	  0F69	50 0D			JNC	EP3		;PUT VARIABLE ON STACK
 3468:					;
 3469:	  0F6B	F1 F8			ACALL	CONST		;IS THE VALUE A NUMERIC CONSTANT?
 3470:	  0F6D	50 0B			JNC	EP4		;IF SO, CONTINUE, IF NOT, SEE WHAT
 3471:	  0F6F	D1 D6			CALL	GC		;GET THE CHARACTER
 3472:	  0F71	B4 E0 06		CJNE	A,#T_LPAR,EP4	;SEE IF A LEFT PAREN
 3473:	  0F74	74 CE			MOV	A,#(LOW OPBOL+1)
 3474:	  0F76	80 55			SJMP	XLPAR		;PROCESS THE LEFT PAREN
 3475:					;
 3476:	  0F78	F1 E6		EP3:	ACALL	PUSHAS		;SAVE VAR ON STACK
 3477:					;
 3478:	  0F7A	D1 D6		EP4:	ACALL	GC		;GET THE OPERATOR
 3479:					;
 3480:	  0F7C	B4 E0 00		CJNE	A,#T_LPAR,$+3	;IS IT AN OPERATOR
 3481:	  0F7F	50 0E			JNC	XOP		;PROCESS OPERATOR
 3482:	  0F81	B4 B0 00		CJNE	A,#T_UOP,$+3	;IS IT A UNARY OPERATOR
 3483:	  0F84	50 3B			JNC	XBILT		;PROCESS UNARY (BUILT IN) OPERATOR
 3484:	  0F86	D0 02			POP	R2B0		;GET BACK PREVIOUS OPERATOR PRECEDENCE
 3485:	  0F88	20 24 BE		JB	ARGF,ITRET	;OK IF ARG FLAG IS SET
 3486:					;
 3487:	  0F8B	C3		EP5:	CLR	C		;NO RECOVERY
 3488:	  0F8C	02 18 88		LJMP	E1XX+2
 3489:					;
 3490:					; Process the operator
 3491:					;
 3492:	  0F8F	54 1F		XOP:	ANL	A,#1FH		;STRIP OFF THE TOKE BITS
 3493:	  0F91	20 24 05		JB	ARGF,XOP1	;IF ARG FLAG IS SET, PROCESS
 3494:	  0F94	B4 05 3C		CJNE	A,#T_SUB-T_LPAR,XOP3
 3495:	  0F97	74 09			MOV	A,#T_NEG-T_LPAR
 3496:					;
 3497:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 86



 Line  I  Addr  Code            Source

 3498:	  0F99	24 CE		XOP1:	ADD	A,#LOW OPBOL+1	;BIAS THE TABLE
 3499:	  0F9B	FA			MOV	R2,A
 3500:	  0F9C	90 00 00		MOV	DPTR,#00H
 3501:	  0F9F	93			MOVC	A,@A+DPTR	;GET THE CURRENT PRECEDENCE
 3502:	  0FA0	FC			MOV	R4,A
 3503:	  0FA1	D0 E0			POP	ACC		;GET THE PREVIOUS PRECEDENCE
 3504:	  0FA3	FD			MOV	R5,A		;SAVE THE PREVIOUS PRECEDENCE
 3505:	  0FA4	93			MOVC	A,@A+DPTR	;GET IT
 3506:	  0FA5	B5 04 04		CJNE	A,R4B0,$+7	;SEE WHICH HAS HIGHER PRECEDENCE
 3507:	  0FA8	B4 0C 9E		CJNE	A,#12,ITRET	;SEE IF ANEG
 3508:	  0FAB	D3			SETB	C
 3509:	  0FAC	50 9B			JNC	ITRET		;PROCESS NON-INCREASING PRECEDENCE
 3510:					;
 3511:					; Save increasing precedence
 3512:					;
 3513:	  0FAE	C0 05			PUSH	R5B0		;SAVE OLD PRECEDENCE ADDRESS
 3514:	  0FB0	C0 02			PUSH	R2B0		;SAVE NEW PRECEDENCE ADDRESS
 3515:	  0FB2	D1 E0			ACALL	GCI1		;EAT THE OPERATOR
 3516:	  0FB4	F1 4E			ACALL	EP1		;EVALUATE REMAINING EXPRESSION
 3517:	  0FB6	D0 E0			POP	ACC
 3518:					;
 3519:					; R2 has the action address, now setup and perform operation
 3520:					;
 3521:	  0FB8	90 00 57	XOP2:	MOV	DPTR,#OPTAB
 3522:	  0FBB	24 32			ADD	A,#LOW (NOT OPBOL)
 3523:	  0FBD	31 64			CALL	ISTA1		;SET UP TO RETURN TO EP2
 3524:	  0FBF	E1 52			AJMP	EP2		;JUMP TO EVALUATE EXPRESSION
 3525:					;
 3526:					; Built-in operator processing
 3527:					;
 3528:	  0FC1	D1 E0		XBILT:	ACALL	GCI1		;EAT THE TOKEN
 3529:	  0FC3	24 2E			ADD	A,#LOW (50H+LOW UOPBOL)
 3530:	  0FC5	20 24 C3		JB	ARGF,EP5	;XBILT MUST COME AFTER AN OPERATOR
 3531:	  0FC8	B4 EC 00		CJNE	A,#STP,$+3
 3532:	  0FCB	50 EB			JNC	XOP2
 3533:					;
 3534:	  0FCD	C0 E0		XLPAR:	PUSH	ACC		;PUT ADDRESS ON THE STACK
 3535:	  0FCF	91 E8			ACALL	P_E
 3536:	  0FD1	80 E3			SJMP	XOP2-2		;PERFORM OPERATION
 3537:					;
 3538:	  0FD3	B4 03 B5	XOP3:	CJNE	A,#T_ADD-T_LPAR,EP5
 3539:	  0FD6	D1 E0			ACALL	GCI1
 3540:	  0FD8	E1 52			AJMP	EP2		;WASTE + SIGN
 3541:					;
 3542:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 87



 Line  I  Addr  Code            Source

 3543:	  0FDA	B1 B6		XPOP:	ACALL	X3120		;FLIP ARGS THEN POP
 3544:					;
 3545:					;***************************************************************
 3546:					;
 3547:					; POPAS - Pop arg stack and copy variable to R3:R1
 3548:					;
 3549:					;***************************************************************
 3550:					;
 3551:	  0FDC	12 12 41	POPAS:	LCALL	INC_ASTKA
 3552:	  0FDF	02 14 64		JMP	VARCOP		;COPY THE VARIABLE
 3553:					;
 3554:	  0FE2	7A 01		AXTAL:	MOV	R2,#HIGH CXTAL
 3555:	  0FE4	78 13			MOV	R0,#LOW CXTAL
 3556:					;
 3557:					; fall thru
 3558:					;
 3559:					;***************************************************************
 3560:					;
 3561:	  0FE6			PUSHAS:	; Push the Value addressed by R2:R0 onto the arg stack
 3562:					;
 3563:					;***************************************************************
 3564:					;
 3565:	  0FE6	12 11 FD		CALL	DEC_ASTKA
 3566:	  0FE9	D2 24			SETB	ARGF		;SAYS THAT SOMTHING IS ON THE STACK
 3567:	  0FEB	02 14 64		LJMP	VARCOP
 3568:					;
 3569:					;
 3570:					;***************************************************************
 3571:					;
 3572:	  0FEE			ST_A:	; Store at expression
 3573:					;
 3574:					;***************************************************************
 3575:					;
 3576:	  0FEE	D1 97			ACALL	ONE		;GET THE EXPRESSION
 3577:	  0FF0	80 EA			SJMP	POPAS		;SAVE IT
 3578:					;
 3579:					;
 3580:					;***************************************************************
 3581:					;
 3582:	  0FF2			LD_A:	; Load at expression
 3583:					;
 3584:					;***************************************************************
 3585:					;
 3586:	  0FF2	D1 97			ACALL	ONE		;GET THE EXPRESSION
 3587:	  0FF4	B1 B6			ACALL	X3120		;FLIP ARGS
 3588:	  0FF6	80 EE			SJMP	PUSHAS
 3589:					;
 3590:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 88



 Line  I  Addr  Code            Source

 3591:					;***************************************************************
 3592:					;
 3593:	  0FF8			CONST:	; Get a constant fron the text
 3594:					;
 3595:					;***************************************************************
 3596:					;
 3597:	  0FF8	D1 D6			CALL	GC		;FIRST SEE IF LITERAL
 3598:	  0FFA	B4 D1 14		CJNE	A,#T_ASC,C0C	;SEE IF ASCII TOKEN
 3599:	  0FFD	D1 D4			CALL	IGC		;GET THE CHARACTER AFTER TOKEN
 3600:	  0FFF	B4 24 06		CJNE	A,#'$',CN0	;SEE IF A STRING
 3601:					;
 3602:	  1002	12 0A 26	CNX:	CALL	CSY		;CALCULATE IT
 3603:	  1005	02 13 B2		JMP	AXBYTE+2	;SAVE IT ON THE STACK
 3604:					;
 3605:	  1008	12 14 A3	CN0:	CALL	TWO_R2		;PUT IT ON THE STACK
 3606:	  100B	12 0E E0		CALL	GCI1		;BUMP THE POINTER
 3607:	  100E	02 0C EC		JMP	ERPAR		;WASTE THE RIGHT PAREN
 3608:					;
 3609:					;
 3610:	  1011	12 0E AB	C0C:	CALL	DP_T		;GET THE TEXT POINTER
 3611:	  1014	12 19 55		CALL	GET_NUM		;GET THE NUMBER
 3612:	  1017	B4 FF 02		CJNE	A,#0FFH,C1C	;SEE IF NO NUMBER
 3613:	  101A	D3			SETB	C
 3614:	  101B	22		C2C:	RET
 3615:					;
 3616:	  101C	70 06		C1C:	JNZ	FPTST
 3617:	  101E	C3			CLR	C
 3618:	  101F	D2 24			SETB	ARGF
 3619:					;
 3620:	  1021	02 0E C1	C3C:	JMP	T_DP
 3621:					;
 3622:	  1024	54 0B		FPTST:	ANL	A,#00001011B	;CHECK FOR ERROR
 3623:	  1026	60 F3			JZ	C2C		;EXIT IF ZERO
 3624:					;
 3625:					; Handle the error condition
 3626:					;
 3627:	  1028	90 17 4F		MOV	DPTR,#E2X	;DIVIDE BY ZERO
 3628:	  102B	30 E0 03		JNB	ACC.0,$+6	;UNDERFLOW
 3629:	  102E	90 18 05		MOV	DPTR,#E7X
 3630:	  1031	30 E1 03		JNB	ACC.1,$+6	;OVERFLOW
 3631:	  1034	90 1F 89		MOV	DPTR,#E11X
 3632:					;
 3633:	  1037	02 18 90	FPTS:	JMP	ERROR
 3634:					;
 3635:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 89



 Line  I  Addr  Code            Source

 3636:					;***************************************************************
 3637:					;
 3638:					; The Command action routine - LIST
 3639:					;
 3640:					;***************************************************************
 3641:					;
 3642:	  103A	12 0C 21	CLIST:	CALL	NUMC		;SEE IF TO LINE PORT
 3643:	  103D	71 BD			ACALL	FSTK		;PUT 0FFFFH ON THE STACK
 3644:	  103F	12 0F 3E		CALL	INTGER		;SEE IF USER SUPPLIES LN
 3645:	  1042	E4			CLR	A		;LN = 0 TO START
 3646:	  1043	FB			MOV	R3,A
 3647:	  1044	F9			MOV	R1,A
 3648:	  1045	40 14			JC	CL1		;START FROM ZERO
 3649:					;
 3650:	  1047	12 18 55		CALL	TEMPD		;SAVE THE START ADDTESS
 3651:	  104A	12 0E DE		CALL	GCI		;GET THE CHARACTER AFTER LIST
 3652:	  104D	B4 E5 07		CJNE	A,#T_SUB,$+10	;CHECK FOR TERMINATION ADDRESS '-'
 3653:	  1050	51 41			ACALL	INC_ASTKA	;WASTE 0FFFFH
 3654:	  1052	12 0F 39		LCALL	INTERR		;GET TERMINATION ADDRESS
 3655:	  1055	91 A6			ACALL	TWO_EY		;PUT TERMINATION ON THE ARG STACK
 3656:	  1057	AB 0F			MOV	R3,TEMP5	;GET THE START ADDTESS
 3657:	  1059	A9 0E			MOV	R1,TEMP4
 3658:					;
 3659:	  105B	12 05 84	CL1:	CALL	GETLIN		;GET THE LINE NO IN R3:R1
 3660:	  105E	60 1E			JZ	CL3		;RET IF AT END
 3661:					;
 3662:	  1060	11 21		CL2:	ACALL	C3C		;SAVE THE ADDRESS
 3663:	  1062	A3			INC	DPTR		;POINT TO LINE NUMBER
 3664:	  1063	D1 44			ACALL	PMTOP+3		;PUT LINE NUMBER ON THE STACK
 3665:	  1065	31 FA			ACALL	CMPLK		;COMPARE LN TO END ADDRESS
 3666:	  1067	40 15			JC	CL3		;EXIT IF GREATER
 3667:	  1069	12 07 85		CALL	BCK		;CHECK FOR A CONTROL C
 3668:	  106C	31 FD			ACALL	DEC_ASTKA	;SAVE THE COMPARE ADDRESS
 3669:	  106E	12 0E AB		CALL	DP_T		;RESTORE ADDRESS
 3670:	  1071	11 8F			ACALL	UPPL		;UN-PROCESS THE LINE
 3671:	  1073	11 21			ACALL	C3C		;SAVE THE CR ADDRESS
 3672:	  1075	11 80			ACALL	CL6		;PRINT IT
 3673:	  1077	A3			INC	DPTR		;BUMP POINTER TO NEXT LINE
 3674:	  1078	E0			MOVX	A,@DPTR		;GET LIN LENGTH
 3675:	  1079	D5 E0 E4		DJNZ	ACC,CL2		;LOOP
 3676:	  107C	51 41			ACALL	INC_ASTKA	;WASTE THE COMPARE BYTE
 3677:					;
 3678:	  107E	E1 85		CL3:	AJMP	CMND1		;BACK TO COMMAND PROCESSOR
 3679:					;
 3680:	  1080	90 00 07	CL6:	MOV	DPTR,#IBUF	;PRINT IBUF
 3681:	  1083	12 06 B9		CALL	PRNTCR		;PRINT IT
 3682:	  1086	12 0E AB		CALL	DP_T
 3683:					;
 3684:	  1089	02 06 9D	CL7:	JMP	CRLF
 3685:					;
 3686:	  108C	12 05 71		LCALL	X31DP
 3687:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 90



 Line  I  Addr  Code            Source

 3688:					;***************************************************************
 3689:					;
 3690:					;UPPL - UN PREPROCESS A LINE ADDRESSED BY DPTR INTO IBUF
 3691:					;       RETURN SOURCE ADDRESS OF CR IN DPTR ON RETURN
 3692:					;
 3693:					;***************************************************************
 3694:					;
 3695:	  108F	7B 00		UPPL:	MOV	R3,#HIGH IBUF	;POINT R3 AT HIGH IBUF
 3696:	  1091	79 07			MOV	R1,#LOW IBUF	;POINT R1 AT IBUF
 3697:	  1093	A3			INC	DPTR		;SKIP OVER LINE LENGTH
 3698:	  1094	11 21			ACALL	C3C		;SAVE THE DPTR (DP_T)
 3699:	  1096	12 05 6B		CALL	L20DPI		;PUT LINE NUMBER IN R2:R0
 3700:	  1099	12 19 A3		CALL	FP_BASE+16	;CONVERT R2:R0 TO INTEGER
 3701:	  109C	12 0E AB		CALL	DP_T
 3702:	  109F	A3			INC	DPTR		;BUMP DPTR PAST THE LINE NUMBER
 3703:					;
 3704:	  10A0	B9 0D 00	UPP0:	CJNE	R1,#LOW IBUF+6,$+3
 3705:	  10A3	40 22			JC	UPP1A-4		;PUT SPACES IN TEXT
 3706:	  10A5	A3			INC	DPTR		;BUMP PAST LN HIGH
 3707:	  10A6	E0			MOVX	A,@DPTR		;GET USER TEXT
 3708:	  10A7	FE			MOV	R6,A		;SAVE A IN R6 FOR TOKE COMPARE
 3709:	  10A8	20 E7 24		JB	ACC.7,UPP1	;IF TOKEN, PROCESS
 3710:	  10AB	B4 20 00		CJNE	A,#20H,$+3	;TRAP THE USER TOKENS
 3711:	  10AE	50 03			JNC	$+5
 3712:	  10B0	B4 0D 1C		CJNE	A,#CR,UPP1	;DO IT IF NOT A CR
 3713:	  10B3	B4 22 09		CJNE	A,#'"',UPP9	;SEE IF STRING
 3714:	  10B6	31 13			ACALL	UPP7		;SAVE IT
 3715:	  10B8	31 15			ACALL	UPP8		;GET THE NEXT CHARACTER AND SAVE IT
 3716:	  10BA	B4 22 FB		CJNE	A,#'"',$-2	;LOOP ON QUOTES
 3717:	  10BD	80 E1			SJMP	UPP0
 3718:					;
 3719:	  10BF	B4 3A 09	UPP9:	CJNE	A,#':',UPP1A	;PUT A SPACE IN DELIMITER
 3720:	  10C2	31 11			ACALL	UPP7A
 3721:	  10C4	EE			MOV	A,R6
 3722:	  10C5	31 13			ACALL	UPP7
 3723:	  10C7	31 11			ACALL	UPP7A
 3724:	  10C9	80 D5			SJMP	UPP0
 3725:					;
 3726:	  10CB	31 17		UPP1A:	ACALL	UPP8+2		;SAVE THE CHARACTER, UPDATE POINTER
 3727:	  10CD	80 D1			SJMP	UPP0		;EXIT IF A CR, ELSE LOOP
 3728:					;
 3729:	  10CF	11 21		UPP1:	ACALL	C3C		;SAVE THE TEXT POINTER
 3730:	  10D1	A2 2D			MOV	C,XBIT
 3731:	  10D3	92 D5			MOV	F0,C		;SAVE XBIT IN F0
 3732:	  10D5	90 01 73		MOV	DPTR,#TOKTAB	;POINT AT TOKEN TABLE
 3733:	  10D8	30 D5 03		JNB	F0,UPP2
 3734:	  10DB	12 20 78		LCALL	2078H		;SET UP DPTR FOR LOOKUP
 3735:					;
 3736:	  10DE	E4		UPP2:	CLR	A		;ZERO A FOR LOOKUP
 3737:	  10DF	93			MOVC	A,@A+DPTR	;GET TOKEN
 3738:	  10E0	A3			INC	DPTR		;ADVANCE THE TOKEN POINTER
 3739:	  10E1	B4 FF 05		CJNE	A,#0FFH,UP_2	;SEE IF DONE
 3740:	  10E4	10 D5 EE		JBC	F0,UPP2-9	;NOW DO NORMAL TABLE
 3741:	  10E7	E1 85			AJMP	CMND1		;EXIT IF NOT FOUND
 3742:					;
 3743:	  10E9	B5 06 F2	UP_2:	CJNE	A,R6B0,UPP2	;LOOP UNTIL THE SAME

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 91



 Line  I  Addr  Code            Source

 3744:					;
 3745:	  10EC	B4 B0 00	UP_3:	CJNE	A,#T_UOP,$+3
 3746:	  10EF	50 02			JNC	UPP3
 3747:	  10F1	31 11			ACALL	UPP7A		;PRINT THE SPACE IF OK
 3748:					;
 3749:	  10F3	E4		UPP3:	CLR	A		;DO LOOKUP
 3750:	  10F4	93			MOVC	A,@A+DPTR
 3751:	  10F5	20 E7 07		JB	ACC.7,UPP4	;EXIT IF DONE, ELSE SAVE
 3752:	  10F8	60 05			JZ	UPP4		;DONE IF ZERO
 3753:	  10FA	31 13			ACALL	UPP7		;SAVE THE CHARACTER
 3754:	  10FC	A3			INC	DPTR
 3755:	  10FD	80 F4			SJMP	UPP3		;LOOP
 3756:					;
 3757:	  10FF	12 0E AB	UPP4:	CALL	DP_T		;GET IT BACK
 3758:	  1102	EE			MOV	A,R6		;SEE IF A REM TOKEN
 3759:	  1103	64 96			XRL	A,#T_REM
 3760:	  1105	70 04			JNZ	$+6
 3761:	  1107	31 15			ACALL	UPP8
 3762:	  1109	80 FC			SJMP	$-2
 3763:	  110B	50 93			JNC	UPP0		;START OVER AGAIN IF NO TOKEN
 3764:	  110D	31 11			ACALL	UPP7A		;PRINT THE SPACE IF OK
 3765:	  110F	80 8F			SJMP	UPP0		;DONE
 3766:					;
 3767:	  1111	74 20		UPP7A:	MOV	A,#' '		;OUTPUT A SPACE
 3768:					;
 3769:	  1113	C1 36		UPP7:	AJMP	PPL9+1		;SAVE A
 3770:					;
 3771:	  1115	A3		UPP8:	INC	DPTR
 3772:	  1116	E0			MOVX	A,@DPTR
 3773:	  1117	B4 0D F9		CJNE	A,#CR,UPP7
 3774:	  111A	C1 22			AJMP	PPL7+1
 3775:					;
 3776:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 92



 Line  I  Addr  Code            Source

 3777:					;**************************************************************
 3778:					;
 3779:					; This table contains all of the floating point constants
 3780:					;
 3781:					; The constants in ROM are stored "backwards" from the way
 3782:					; basic normally treats floating point numbers. Instead of
 3783:					; loading from the exponent and decrementing the pointer,
 3784:					; ROM constants pointers load from the most significant
 3785:					; digits and increment the pointers. This is done to 1) make
 3786:					; arg stack loading faster and 2) compensate for the fact that
 3787:					; no decrement data pointer instruction exsist.
 3788:					;
 3789:					; The numbers are stored as follows:
 3790:					;
 3791:					; BYTE X+5    = MOST SIGNIFICANT DIGITS IN BCD
 3792:					; BYTE X+4    = NEXT MOST SIGNIFICANT DIGITS IN BCD
 3793:					; BYTE X+3    = NEXT LEAST SIGNIFICANT DIGITS IN BCD
 3794:					; BYTE X+2    = LEAST SIGNIFICANT DIGITS IN BCD
 3795:					; BYTE X+1    = SIGN OF THE ABOVE MANTISSA 0 = +, 1 = -
 3796:					; BYTE X      = EXPONENT IN TWO'S COMPLEMENT BINARY
 3797:					;               ZERO EXPONENT = THE NUMBER ZERO
 3798:					;
 3799:					;**************************************************************
 3800:					;
 3801:	  111C	7E		ATTAB:	DB	128-2		; ARCTAN LOOKUP
 3802:	  111D	00			DB	00H
 3803:	  111E	57			DB	57H
 3804:	  111F	22			DB	22H
 3805:	  1120	66			DB	66H
 3806:	  1121	28			DB	28H
 3807:					;
 3808:	  1122	7F			DB	128-1
 3809:	  1123	01			DB	01H
 3810:	  1124	37			DB	37H
 3811:	  1125	57			DB	57H
 3812:	  1126	16			DB	16H
 3813:	  1127	16			DB	16H
 3814:					;
 3815:	  1128	7F			DB	128-1
 3816:	  1129	00			DB	00H
 3817:	  112A	14			DB	14H
 3818:	  112B	96			DB	96H
 3819:	  112C	90			DB	90H
 3820:	  112D	42			DB	42H
 3821:					;
 3822:	  112E	7F			DB	128-1
 3823:	  112F	01			DB	01H
 3824:	  1130	40			DB	40H
 3825:	  1131	96			DB	96H
 3826:	  1132	28			DB	28H
 3827:	  1133	75			DB	75H
 3828:					;
 3829:	  1134	80			DB	128
 3830:	  1135	00			DB	00H
 3831:	  1136	64			DB	64H
 3832:	  1137	62			DB	62H

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 93



 Line  I  Addr  Code            Source

 3833:	  1138	65			DB	65H
 3834:	  1139	10			DB	10H
 3835:					;
 3836:	  113A	80			DB	128
 3837:	  113B	01			DB	01H
 3838:	  113C	99			DB	99H
 3839:	  113D	88			DB	88H
 3840:	  113E	20			DB	20H
 3841:	  113F	14			DB	14H
 3842:					;
 3843:	  1140	80			DB	128
 3844:	  1141	00			DB	00H
 3845:	  1142	51			DB	51H
 3846:	  1143	35			DB	35H
 3847:	  1144	99			DB	99H
 3848:	  1145	19			DB	19H
 3849:					;
 3850:	  1146	80			DB	128
 3851:	  1147	01			DB	01H
 3852:	  1148	45			DB	45H
 3853:	  1149	31			DB	31H
 3854:	  114A	33			DB	33H
 3855:	  114B	33			DB	33H
 3856:					;
 3857:	  114C	81			DB	129
 3858:	  114D	00			DB	00H
 3859:	  114E	00			DB	00H
 3860:	  114F	00			DB	00H
 3861:	  1150	00			DB	00H
 3862:	  1151	10			DB	10H
 3863:					;
 3864:	  1152	FF			DB	0FFH		;END OF TABLE
 3865:					;
 3866:	  1153	81		NTWO:	DB	129
 3867:	  1154	00			DB	0
 3868:	  1155	00			DB	0
 3869:	  1156	00			DB	0
 3870:	  1157	00			DB	0
 3871:	  1158	20			DB	20H
 3872:					;
 3873:	  1159	7C		TTIME:	DB	128-4		; CLOCK CALCULATION
 3874:	  115A	00			DB	00H
 3875:	  115B	00			DB	00H
 3876:	  115C	00			DB	00H
 3877:	  115D	04			DB	04H
 3878:	  115E	13			DB	13H
 3879:					;
 3880:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 94



 Line  I  Addr  Code            Source

 3881:					;***************************************************************
 3882:					;
 3883:					; COSINE - Add pi/2 to stack, then fall thru to SIN
 3884:					;
 3885:					;***************************************************************
 3886:					;
 3887:	  115F	31 84		ACOS:	ACALL	POTWO		;PUT PI/2 ON THE STACK
 3888:	  1161	F1 3F			ACALL	AADD		;TOS = TOS+PI/2
 3889:					;
 3890:					;***************************************************************
 3891:					;
 3892:					; SINE - use taylor series to calculate sin function
 3893:					;
 3894:					;***************************************************************
 3895:					;
 3896:	  1163	91 71		ASIN:	ACALL	PIPI		;PUT PI ON THE STACK
 3897:	  1165	31 A7			ACALL	RV		;REDUCE THE VALUE
 3898:	  1167	E5 46			MOV	A,MT2		;CALCULATE THE SIGN
 3899:	  1169	54 01			ANL	A,#01H		;SAVE LSB
 3900:	  116B	62 45			XRL	MT1,A		;SAVE SIGN IN MT1
 3901:	  116D	91 1E			ACALL	CSTAKA		;NOW CONVERT TO ONE QUADRANT
 3902:	  116F	31 84			ACALL	POTWO
 3903:	  1171	31 FA			ACALL	CMPLK		;DO COMPARE
 3904:	  1173	40 04			JC	$+6
 3905:	  1175	91 71			ACALL	PIPI
 3906:	  1177	F1 1A			ACALL	ASUB
 3907:	  1179	71 81			ACALL	AABS
 3908:	  117B	90 16 CC		MOV	DPTR,#SINTAB	;SET UP LOOKUP TABLE
 3909:	  117E	31 8D			ACALL	POLYC		;CALCULATE THE POLY
 3910:	  1180	31 CC			ACALL	STRIP
 3911:	  1182	21 EE			AJMP	SIN0
 3912:					;
 3913:					; Put PI/2 on the stack
 3914:					;
 3915:	  1184	91 71		POTWO:	ACALL	PIPI		;PUT PI ON THE STACK, NOW DIVIDE
 3916:					;
 3917:	  1186	90 11 53	DBTWO:	MOV	DPTR,#NTWO
 3918:	  1189	91 25			ACALL	PUSHC
 3919:					;MOV	A,#2		;BY TWO
 3920:					;ACALL	TWO_R2
 3921:	  118B	61 FC			AJMP	ADIV
 3922:					;
 3923:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 95



 Line  I  Addr  Code            Source

 3924:					;*************************************************************
 3925:					;
 3926:	  118D			POLYC:	; Expand a power series to calculate a polynomial
 3927:					;
 3928:					;*************************************************************
 3929:					;
 3930:	  118D	91 1C			ACALL	CSTAKA2		;COPY THE STACK
 3931:	  118F	31 A2			ACALL	AMUL		;SQUARE THE STACK
 3932:	  1191	91 3A			ACALL	POP_T1		;SAVE X*X
 3933:	  1193	91 25			ACALL	PUSHC		;PUT CONSTANT ON STACK
 3934:					;
 3935:	  1195	91 41		POLY1:	ACALL	PUSH_T1		;PUT COMPUTED VALUE ON STACK
 3936:	  1197	31 A2			ACALL	AMUL		;MULTIPLY CONSTANT AND COMPUTED VALUE
 3937:	  1199	91 25			ACALL	PUSHC		;PUT NEXT CONSTANT ON STACK
 3938:	  119B	F1 3F			ACALL	AADD		;ADD IT TO THE OLD VALUE
 3939:	  119D	E4			CLR	A		;CHECK TO SEE IF DONE
 3940:	  119E	93			MOVC	A,@A+DPTR
 3941:	  119F	B4 FF F3		CJNE	A,#0FFH,POLY1	;LOOP UNTIL DONE
 3942:					;
 3943:	  11A2	12 19 99	AMUL:	LCALL	FP_BASE+6
 3944:	  11A5	01 24			AJMP	FPTST
 3945:					;
 3946:					;*************************************************************
 3947:					;
 3948:	  11A7			RV:	; Reduce a value for Trig and A**X functions
 3949:					;
 3950:					; value = (value/x - INT(value/x)) * x
 3951:					;
 3952:					;*************************************************************
 3953:					;
 3954:	  11A7	91 5E			ACALL	C_T2		;COPY TOS TO T2
 3955:	  11A9	71 FC			ACALL	ADIV		;TOS = TOS/TEMP2
 3956:	  11AB	71 81			ACALL	AABS		;MAKE THE TOS A POSITIVE NUMBER
 3957:	  11AD	F5 45			MOV	MT1,A		;SAVE THE SIGN
 3958:	  11AF	91 1C			ACALL	CSTAKA2		;COPY THE STACK TWICE
 3959:	  11B1	51 15			ACALL	IFIX		;PUT THE NUMBER IN R3:R1
 3960:	  11B3	C0 03			PUSH	R3B0		;SAVE R3
 3961:	  11B5	89 46			MOV	MT2,R1		;SAVE THE LS BYTE IN MT2
 3962:	  11B7	71 5F			ACALL	AINT		;MAKE THE TOS AN INTEGER
 3963:	  11B9	F1 1A			ACALL	ASUB		;TOS = TOS/T2 - INT(TOS/T2)
 3964:	  11BB	91 48			ACALL	P_T2		;TOS = T2
 3965:	  11BD	31 A2			ACALL	AMUL		;TOS = T2*(TOS/T2 - INT(TOS/T2)
 3966:	  11BF	D0 03			POP	R3B0		;RESTORE R3
 3967:	  11C1	22			RET			;EXIT
 3968:					;
 3969:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 96



 Line  I  Addr  Code            Source

 3970:					;**************************************************************
 3971:					;
 3972:					; TAN
 3973:					;
 3974:					;**************************************************************
 3975:					;
 3976:	  11C2	91 1E		ATAN:	ACALL	CSTAKA		;DUPLACATE STACK
 3977:	  11C4	31 63			ACALL	ASIN		;TOS = SIN(X)
 3978:	  11C6	91 4C			ACALL	SWAP_ASTKA	;TOS = X
 3979:	  11C8	31 5F			ACALL	ACOS		;TOS = COS(X)
 3980:	  11CA	61 FC			AJMP	ADIV		;TOS = SIN(X)/COS(X)
 3981:					;
 3982:	  11CC	51 45		STRIP:	ACALL	SETREG		;SETUP R0
 3983:	  11CE	7B 01			MOV	R3,#1		;LOOP COUNT
 3984:	  11D0	61 73			AJMP	AI2-1		;WASTE THE LSB
 3985:					;
 3986:					;************************************************************
 3987:					;
 3988:					; ARC TAN
 3989:					;
 3990:					;************************************************************
 3991:					;
 3992:	  11D2	71 81		AATAN:	ACALL	AABS
 3993:	  11D4	F5 45			MOV	MT1,A		;SAVE THE SIGN
 3994:	  11D6	51 45			ACALL	SETREG		;GET THE EXPONENT
 3995:	  11D8	24 7F			ADD	A,#7FH		;BIAS THE EXPONENT
 3996:	  11DA	92 2A			MOV	UBIT,C		;SAVE CARRY STATUS
 3997:	  11DC	50 02			JNC	$+4		;SEE IF > 1
 3998:	  11DE	51 6E			ACALL	RECIP		;IF > 1, TAKE RECIP
 3999:	  11E0	90 11 1C		MOV	DPTR,#ATTAB	;SET UP TO CALCULATE THE POLY
 4000:	  11E3	31 8D			ACALL	POLYC		;CALCULATE THE POLY
 4001:	  11E5	30 2A 06		JNB	UBIT,SIN0	;JUMP IF NOT SET
 4002:	  11E8	71 93			ACALL	ANEG		;MAKE X POLY NEGATIVE
 4003:	  11EA	31 84			ACALL	POTWO		;SUBTRACT PI/2
 4004:	  11EC	F1 3F			ACALL	AADD
 4005:					;
 4006:	  11EE	E5 45		SIN0:	MOV	A,MT1		;GET THE SIGN
 4007:	  11F0	60 19			JZ	SRT
 4008:	  11F2	61 93			AJMP	ANEG
 4009:					;
 4010:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 97



 Line  I  Addr  Code            Source

 4011:					;*************************************************************
 4012:					;
 4013:					; FCOMP - COMPARE 0FFFFH TO TOS
 4014:					;
 4015:					;*************************************************************
 4016:					;
 4017:	  11F4	91 1E		FCMP:	ACALL	CSTAKA		;COPY THE STACK
 4018:	  11F6	71 BD			ACALL	FSTK		;MAKE THE TOS = 0FFFFH
 4019:	  11F8	91 4C			ACALL	SWAP_ASTKA	;NOW COMPARE IS 0FFFFH - X
 4020:					;
 4021:	  11FA	02 19 97	CMPLK:	JMP	FP_BASE+4	;DO THE COMPARE
 4022:					;
 4023:					;*************************************************************
 4024:					;
 4025:	  11FD			DEC_ASTKA:	;Push ARG STACK and check for underflow
 4026:					;
 4027:					;*************************************************************
 4028:					;
 4029:	  11FD	74 FA			MOV	A,#-FPSIZ
 4030:	  11FF	25 09			ADD	A,ASTKA
 4031:	  1201	B4 32 00		CJNE	A,#LOW TM_TOP+6,$+3
 4032:	  1204	40 06			JC	E4YY
 4033:	  1206	F5 09			MOV	ASTKA,A
 4034:	  1208	F9			MOV	R1,A
 4035:	  1209	7B 01			MOV	R3,#ASTKAH
 4036:					;
 4037:	  120B	22		SRT:	RET
 4038:					;
 4039:	  120C	90 03 77	E4YY:	MOV	DPTR,#EXA
 4040:	  120F	01 37			AJMP	FPTS		;ARG STACK ERROR
 4041:					;
 4042:					;
 4043:	  1211	91 25		AXTAL3:	ACALL	PUSHC		;PUSH CONSTANT, THEN MULTIPLY
 4044:	  1213	31 A2			ACALL	AMUL
 4045:					;
 4046:					; Fall thru to IFIX
 4047:					;
 4048:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 98



 Line  I  Addr  Code            Source

 4049:					;***************************************************************
 4050:					;
 4051:	  1215			IFIX:	; Convert a floating point number to an integer, put in R3:R1
 4052:					;
 4053:					;***************************************************************
 4054:					;
 4055:	  1215	E4			CLR	A		;RESET THE START
 4056:	  1216	FB			MOV	R3,A
 4057:	  1217	F9			MOV	R1,A
 4058:	  1218	A8 09			MOV	R0,ASTKA	;GET THE ARG STACK
 4059:	  121A	75 A0 01		MOV	P2,#ASTKAH
 4060:	  121D	E2			MOVX	A,@R0		;READ EXPONENT
 4061:	  121E	C3			CLR	C
 4062:	  121F	94 81			SUBB	A,#81H		;BASE EXPONENT
 4063:	  1221	FC			MOV	R4,A		;SAVE IT
 4064:	  1222	18			DEC	R0		;POINT AT SIGN
 4065:	  1223	E2			MOVX	A,@R0		;GET THE SIGN
 4066:	  1224	70 56			JNZ	SQ_ERR		;ERROR IF NEGATIVE
 4067:	  1226	40 19			JC	INC_ASTKA	;EXIT IF EXPONENT IS < 81H
 4068:	  1228	0C			INC	R4		;ADJUST LOOP COUNTER
 4069:	  1229	E8			MOV	A,R0		;BUMP THE POINTER REGISTER
 4070:	  122A	94 05			SUBB	A,#FPSIZ-1
 4071:	  122C	F8			MOV	R0,A
 4072:					;
 4073:	  122D	08		I2:	INC	R0		;POINT AT DIGIT
 4074:	  122E	E2			MOVX	A,@R0		;GET DIGIT
 4075:	  122F	C4			SWAP	A		;FLIP
 4076:	  1230	12 19 A7		CALL	FP_BASE+20	;ACCUMULATE
 4077:	  1233	40 47			JC	SQ_ERR
 4078:	  1235	DC 02			DJNZ	R4,$+4
 4079:	  1237	80 08			SJMP	INC_ASTKA
 4080:	  1239	E2			MOVX	A,@R0		;GET DIGIT
 4081:	  123A	12 19 A7		CALL	FP_BASE+20
 4082:	  123D	40 3D			JC	SQ_ERR
 4083:	  123F	DC EC			DJNZ	R4,I2
 4084:					;
 4085:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                         PAGE 99



 Line  I  Addr  Code            Source

 4086:					;************************************************************
 4087:					;
 4088:	  1241			INC_ASTKA:	; Pop the ARG STACK and check for overflow
 4089:					;
 4090:					;************************************************************
 4091:					;
 4092:	  1241	74 06			MOV	A,#FPSIZ	;NUMBER TO POP
 4093:	  1243	80 01			SJMP	SETREG+1
 4094:					;
 4095:	  1245	E4		SETREG:	CLR	A		;DON'T POP ANYTHING
 4096:	  1246	A8 09			MOV	R0,ASTKA
 4097:	  1248	7A 01			MOV	R2,#ASTKAH
 4098:	  124A	8A A0			MOV	P2,R2
 4099:	  124C	28			ADD	A,R0
 4100:	  124D	40 BD			JC	E4YY
 4101:	  124F	F5 09			MOV	ASTKA,A
 4102:	  1251	E2			MOVX	A,@R0
 4103:	  1252	22		A_D:	RET
 4104:					;
 4105:					;************************************************************
 4106:					;
 4107:					; EBIAS - Bias a number for E to the X calculations
 4108:					;
 4109:					;************************************************************
 4110:					;
 4111:	  1253	91 35		EBIAS:	ACALL	PUSH_ONE
 4112:	  1255	31 A7			ACALL	RV
 4113:	  1257	BB 00 22		CJNE	R3,#00H,SQ_ERR	;ERROR IF R3 <> 0
 4114:	  125A	91 5E			ACALL	C_T2		;TEMP 2 GETS FRACTIONS
 4115:	  125C	51 41			ACALL	INC_ASTKA
 4116:	  125E	91 3A			ACALL	POP_T1
 4117:	  1260	91 35			ACALL	PUSH_ONE
 4118:					;
 4119:	  1262	E5 46		AELP:	MOV	A,MT2
 4120:	  1264	70 0E			JNZ	AEL1
 4121:					;
 4122:	  1266	E5 45			MOV	A,MT1
 4123:	  1268	60 E8			JZ	A_D
 4124:	  126A	90 01 1E		MOV	DPTR,#FPT2-1
 4125:	  126D	F0			MOVX	@DPTR,A		;MAKE THE FRACTIONS NEGATIVE
 4126:					;
 4127:	  126E	91 35		RECIP:	ACALL	PUSH_ONE
 4128:	  1270	91 4C			ACALL	SWAP_ASTKA
 4129:	  1272	61 FC			AJMP	ADIV
 4130:					;
 4131:	  1274	15 46		AEL1:	DEC	MT2
 4132:	  1276	91 41			ACALL	PUSH_T1
 4133:	  1278	31 A2			ACALL	AMUL
 4134:	  127A	80 E6			SJMP	AELP
 4135:					;
 4136:	  127C	02 09 C5	SQ_ERR:	LJMP	E3XX		;LINK TO BAD ARG
 4137:					;
 4138:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 100



 Line  I  Addr  Code            Source

 4139:					;************************************************************
 4140:					;
 4141:					; SQUARE ROOT
 4142:					;
 4143:					;************************************************************
 4144:					;
 4145:	  127F	71 81		ASQR:	ACALL	AABS		;GET THE SIGN
 4146:	  1281	70 F9			JNZ	SQ_ERR		;ERROR IF NEGATIVE
 4147:	  1283	91 5E			ACALL	C_T2		;COPY VARIABLE TO T2
 4148:	  1285	91 3A			ACALL	POP_T1		;SAVE IT IN T1
 4149:	  1287	78 19			MOV	R0,#LOW FPT1
 4150:	  1289	E2			MOVX	A,@R0		;GET EXPONENT
 4151:	  128A	60 24			JZ	ALN-2		;EXIT IF ZERO
 4152:	  128C	24 80			ADD	A,#128		;BIAS THE EXPONENT
 4153:	  128E	50 05			JNC	SQR1		;SEE IF < 80H
 4154:	  1290	03			RR	A
 4155:	  1291	54 7F			ANL	A,#127
 4156:	  1293	80 07			SJMP	SQR2
 4157:					;
 4158:	  1295	F4		SQR1:	CPL	A		;FLIP BITS
 4159:	  1296	04			INC	A
 4160:	  1297	03			RR	A
 4161:	  1298	54 7F			ANL	A,#127		;STRIP MSB
 4162:	  129A	F4			CPL	A
 4163:	  129B	04			INC	A
 4164:					;
 4165:	  129C	24 80		SQR2:	ADD	A,#128		;BIAS EXPONENT
 4166:	  129E	F2			MOVX	@R0,A		;SAVE IT
 4167:					;
 4168:					; NEWGUESS = ( X/OLDGUESS + OLDGUESS) / 2
 4169:					;
 4170:	  129F	91 48		SQR4:	ACALL	P_T2		;TOS = X
 4171:	  12A1	91 41			ACALL	PUSH_T1		;PUT NUMBER ON STACK
 4172:	  12A3	71 FC			ACALL	ADIV		;TOS = X/GUESS
 4173:	  12A5	91 41			ACALL	PUSH_T1		;PUT ON AGAIN
 4174:	  12A7	F1 3F			ACALL	AADD		;TOS = X/GUESS + GUESS
 4175:	  12A9	31 86			ACALL	DBTWO		;TOS = ( X/GUESS + GUESS ) / 2
 4176:	  12AB	71 0E			ACALL	TEMP_COMP	;SEE IF DONE
 4177:	  12AD	30 D5 EF		JNB	F0,SQR4
 4178:					;
 4179:	  12B0	81 41			AJMP	PUSH_T1		;PUT THE ANSWER ON THE STACK
 4180:					;
 4181:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 101



 Line  I  Addr  Code            Source

 4182:					;*************************************************************
 4183:					;
 4184:					; NATURAL LOG
 4185:					;
 4186:					;*************************************************************
 4187:					;
 4188:	  12B2	71 81		ALN:	ACALL	AABS		;MAKE SURE THAT NUM IS POSITIVE
 4189:	  12B4	70 C6			JNZ	SQ_ERR		;ERROR IF NOT
 4190:	  12B6	F5 46			MOV	MT2,A		;CLEAR FOR LOOP
 4191:	  12B8	08			INC	R0		;POINT AT EXPONENT
 4192:	  12B9	E2			MOVX	A,@R0		;READ THE EXPONENT
 4193:	  12BA	60 C0			JZ	SQ_ERR		;ERROR IF EXPONENT IS ZERO
 4194:	  12BC	B4 81 00		CJNE	A,#81H,$+3	;SEE IF NUM >= 1
 4195:	  12BF	92 2A			MOV	UBIT,C		;SAVE CARRY STATUS
 4196:	  12C1	40 02			JC	$+4		;TAKE RECIP IF >= 1
 4197:	  12C3	51 6E			ACALL	RECIP
 4198:					;
 4199:					; Loop to reduce
 4200:					;
 4201:	  12C5	91 1E		ALNL:	ACALL	CSTAKA		;COPY THE STACK FOR COMPARE
 4202:	  12C7	91 35			ACALL	PUSH_ONE	;COMPARE NUM TO ONE
 4203:	  12C9	31 FA			ACALL	CMPLK
 4204:	  12CB	50 1D			JNC	ALNO		;EXIT IF DONE
 4205:	  12CD	51 45			ACALL	SETREG		;GET THE EXPONENT
 4206:	  12CF	24 85			ADD	A,#85H		;SEE HOW BIG IT IS
 4207:	  12D1	50 0E			JNC	ALN11		;BUMP BY EXP(11) IF TOO SMALL
 4208:	  12D3	91 22			ACALL	PLNEXP		;PUT EXP(1) ON STACK
 4209:	  12D5	74 01			MOV	A,#1		;BUMP COUNT
 4210:					;
 4211:	  12D7	25 46		ALNE:	ADD	A,MT2
 4212:	  12D9	40 A1			JC	SQ_ERR
 4213:	  12DB	F5 46			MOV	MT2,A
 4214:	  12DD	31 A2			ACALL	AMUL		;BIAS THE NUMBER
 4215:	  12DF	80 E4			SJMP	ALNL
 4216:					;
 4217:	  12E1	90 17 ED	ALN11:	MOV	DPTR,#EXP11	;PUT EXP(11) ON STACK
 4218:	  12E4	91 25			ACALL	PUSHC
 4219:	  12E6	74 0B			MOV	A,#11
 4220:	  12E8	80 ED			SJMP	ALNE
 4221:					;
 4222:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 102



 Line  I  Addr  Code            Source

 4223:	  12EA	91 5E		ALNO:	ACALL	C_T2		;PUT NUM IN TEMP 2
 4224:	  12EC	91 35			ACALL	PUSH_ONE	;TOS = 1
 4225:	  12EE	F1 1A			ACALL	ASUB		;TOS = X - 1
 4226:	  12F0	91 48			ACALL	P_T2		;TOS = X
 4227:	  12F2	91 35			ACALL	PUSH_ONE	;TOS = 1
 4228:	  12F4	F1 3F			ACALL	AADD		;TOS = X + 1
 4229:	  12F6	71 FC			ACALL	ADIV		;TOS = (X-1)/(X+1)
 4230:	  12F8	90 16 A7		MOV	DPTR,#LNTAB	;LOG TABLE
 4231:	  12FB	31 8D			ACALL	POLYC
 4232:	  12FD	A3			INC	DPTR		;POINT AT LN(10)
 4233:	  12FE	91 25			ACALL	PUSHC
 4234:	  1300	31 A2			ACALL	AMUL
 4235:	  1302	E5 46			MOV	A,MT2		;GET THE COUNT
 4236:	  1304	91 A3			ACALL	TWO_R2		;PUT IT ON THE STACK
 4237:	  1306	F1 1A			ACALL	ASUB		;INT - POLY
 4238:	  1308	31 CC			ACALL	STRIP
 4239:	  130A	30 2A 74		JNB	UBIT,AABS
 4240:					;
 4241:	  130D	22		LN_D:	RET
 4242:					;
 4243:					;*************************************************************
 4244:					;
 4245:	  130E			TEMP_COMP:	; Compare FPTEMP1 to TOS, FPTEMP1 gets TOS
 4246:					;
 4247:					;*************************************************************
 4248:					;
 4249:	  130E	91 41			ACALL	PUSH_T1		;SAVE THE TEMP
 4250:	  1310	91 4C			ACALL	SWAP_ASTKA	;TRADE WITH THE NEXT NUMBER
 4251:	  1312	91 1E			ACALL	CSTAKA		;COPY THE STACK
 4252:	  1314	91 3A			ACALL	POP_T1		;SAVE THE NEW NUMBER
 4253:	  1316	02 19 97		JMP	FP_BASE+4	;DO THE COMPARE
 4254:					;
 4255:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 103



 Line  I  Addr  Code            Source

 4256:	  1319	91 22		AETOX:	ACALL	PLNEXP		;EXP(1) ON TOS
 4257:	  131B	91 4C			ACALL	SWAP_ASTKA	;X ON TOS
 4258:					;
 4259:	  131D			AEXP:	;EXPONENTIATION
 4260:					;
 4261:	  131D	51 53			ACALL	EBIAS		;T1=BASE,T2=FRACTIONS,TOS=INT MULTIPLIED
 4262:	  131F	90 01 1F		MOV	DPTR,#FPT2	;POINT AT FRACTIONS
 4263:	  1322	E0			MOVX	A,@DPTR		;READ THE EXP OF THE FRACTIONS
 4264:	  1323	60 E8			JZ	LN_D		;EXIT IF ZERO
 4265:	  1325	91 48			ACALL	P_T2		;TOS = FRACTIONS
 4266:	  1327	91 41			ACALL	PUSH_T1		;TOS = BASE
 4267:	  1329	51 45			ACALL	SETREG		;SEE IF BASE IS ZERO
 4268:	  132B	60 02			JZ	$+4
 4269:	  132D	51 B2			ACALL	ALN		;TOS = LN(BASE)
 4270:	  132F	31 A2			ACALL	AMUL		;TOS = FRACTIONS * LN(BASE)
 4271:	  1331	91 22			ACALL	PLNEXP		;TOS = EXP(1)
 4272:	  1333	91 4C			ACALL	SWAP_ASTKA	;TOS = FRACTIONS * LN(BASE)
 4273:	  1335	51 53			ACALL	EBIAS		;T2 = FRACTIONS, TOS = INT MULTIPLIED
 4274:	  1337	75 46 00		MOV	MT2,#00H	;NOW CALCULATE E**X
 4275:	  133A	91 35			ACALL	PUSH_ONE
 4276:	  133C	91 1E			ACALL	CSTAKA
 4277:	  133E	91 3A			ACALL	POP_T1		;T1 = 1
 4278:					;
 4279:	  1340	91 48		AEXL:	ACALL	P_T2		;TOS = FRACTIONS
 4280:	  1342	31 A2			ACALL	AMUL		;TOS = FRACTIONS * ACCUMLATION
 4281:	  1344	05 46			INC	MT2		;DO THE DEMONIATOR
 4282:	  1346	E5 46			MOV	A,MT2
 4283:	  1348	91 A3			ACALL	TWO_R2
 4284:	  134A	71 FC			ACALL	ADIV
 4285:	  134C	91 1E			ACALL	CSTAKA		;SAVE THE ITERATION
 4286:	  134E	91 41			ACALL	PUSH_T1		;NOW ACCUMLATE
 4287:	  1350	F1 3F			ACALL	AADD		;ADD ACCUMLATION
 4288:	  1352	71 0E			ACALL	TEMP_COMP
 4289:	  1354	30 D5 E9		JNB	F0,AEXL		;LOOP UNTIL DONE
 4290:					;
 4291:	  1357	51 41			ACALL	INC_ASTKA
 4292:	  1359	91 41			ACALL	PUSH_T1
 4293:	  135B	31 A2			ACALL	AMUL		;LAST INT MULTIPLIED
 4294:					;
 4295:	  135D	21 A2		MU1:	AJMP	AMUL		;FIRST INT MULTIPLIED
 4296:					;
 4297:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 104



 Line  I  Addr  Code            Source

 4298:					;***************************************************************
 4299:					;
 4300:					; integer operator - INT
 4301:					;
 4302:					;***************************************************************
 4303:					;
 4304:	  135F	51 45		AINT:	ACALL	SETREG		;SET UP THE REGISTERS, CLEAR CARRY
 4305:	  1361	94 81			SUBB	A,#129		;SUBTRACT EXPONENT BIAS
 4306:	  1363	50 07			JNC	AI1		;JUMP IF ACC > 81H
 4307:					;
 4308:					; Force the number to be a zero
 4309:					;
 4310:	  1365	51 41			ACALL	INC_ASTKA	;BUMP THE STACK
 4311:					;
 4312:	  1367	90 04 E0	P_Z:	MOV	DPTR,#ZRO	;PUT ZERO ON THE STACK
 4313:	  136A	81 25			AJMP	PUSHC
 4314:					;
 4315:	  136C	94 07		AI1:	SUBB	A,#7
 4316:	  136E	50 10			JNC	AI3
 4317:	  1370	F4			CPL	A
 4318:	  1371	04			INC	A
 4319:	  1372	FB			MOV	R3,A
 4320:	  1373	18			DEC	R0		;POINT AT SIGN
 4321:					;
 4322:	  1374	18		AI2:	DEC	R0		;NOW AT LSB'S
 4323:	  1375	E2			MOVX	A,@R0		;READ BYTE
 4324:	  1376	54 F0			ANL	A,#0F0H		;STRIP NIBBLE
 4325:	  1378	F2			MOVX	@R0,A		;WRITE BYTE
 4326:	  1379	DB 01			DJNZ	R3,$+3
 4327:	  137B	22			RET
 4328:	  137C	E4			CLR	A
 4329:	  137D	F2			MOVX	@R0,A		;CLEAR THE LOCATION
 4330:	  137E	DB F4			DJNZ	R3,AI2
 4331:					;
 4332:	  1380	22		AI3:	RET			;EXIT
 4333:					;
 4334:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 105



 Line  I  Addr  Code            Source

 4335:					;***************************************************************
 4336:					;
 4337:	  1381			AABS:	; Absolute value - Make sign of number positive
 4338:					;                  return sign in ACC
 4339:					;
 4340:					;***************************************************************
 4341:					;
 4342:	  1381	71 93			ACALL	ANEG		;CHECK TO SEE IF + OR -
 4343:	  1383	70 19			JNZ	ALPAR		;EXIT IF NON ZERO, BECAUSE THE NUM IS
 4344:	  1385	F2			MOVX	@R0,A		;MAKE A POSITIVE SIGN
 4345:	  1386	22			RET
 4346:					;
 4347:					;***************************************************************
 4348:					;
 4349:	  1387			ASGN:	; Returns the sign of the number 1 = +, -1 = -
 4350:					;
 4351:					;***************************************************************
 4352:					;
 4353:	  1387	51 41			ACALL	INC_ASTKA	;POP STACK, GET EXPONENT
 4354:	  1389	60 DC			JZ	P_Z		;EXIT IF ZERO
 4355:	  138B	18			DEC	R0		;BUMP TO SIGN
 4356:	  138C	E2			MOVX	A,@R0		;GET THE SIGN
 4357:	  138D	FF			MOV	R7,A		;SAVE THE SIGN
 4358:	  138E	91 35			ACALL	PUSH_ONE	;PUT A ONE ON THE STACK
 4359:	  1390	EF			MOV	A,R7		;GET THE SIGN
 4360:	  1391	60 0B			JZ	ALPAR		;EXIT IF ZERO
 4361:					;
 4362:					; Fall thru to ANEG
 4363:					;
 4364:					;***************************************************************
 4365:					;
 4366:	  1393			ANEG:	; Flip the sign of the number on the tos
 4367:					;
 4368:					;***************************************************************
 4369:					;
 4370:	  1393	51 45			ACALL	SETREG
 4371:	  1395	18			DEC	R0		;POINT AT THE SIGN OF THE NUMBER
 4372:	  1396	60 06			JZ	ALPAR		;EXIT IF ZERO
 4373:	  1398	E2			MOVX	A,@R0
 4374:	  1399	64 01			XRL	A,#01H		;FLIP THE SIGN
 4375:	  139B	F2			MOVX	@R0,A
 4376:	  139C	64 01			XRL	A,#01H		;RESTORE THE SIGN
 4377:					;
 4378:	  139E	22		ALPAR:	RET
 4379:					;
 4380:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 106



 Line  I  Addr  Code            Source

 4381:					;***************************************************************
 4382:					;
 4383:	  139F			ACBYTE:	; Read the ROM
 4384:					;
 4385:					;***************************************************************
 4386:					;
 4387:	  139F	51 15			ACALL	IFIX		;GET EXPRESSION
 4388:	  13A1	12 05 71		CALL	X31DP		;PUT R3:R1 INTO THE DP
 4389:	  13A4	E4			CLR	A
 4390:	  13A5	93			MOVC	A,@A+DPTR
 4391:	  13A6	81 A3			AJMP	TWO_R2
 4392:					;
 4393:					;***************************************************************
 4394:					;
 4395:	  13A8			ADBYTE:	; Read internal memory
 4396:					;
 4397:					;***************************************************************
 4398:					;
 4399:	  13A8	51 15			ACALL	IFIX		;GET THE EXPRESSION
 4400:	  13AA	12 09 DD		CALL	R3CK		;MAKE SURE R3 = 0
 4401:	  13AD	E7			MOV	A,@R1
 4402:	  13AE	81 A3			AJMP	TWO_R2
 4403:					;
 4404:					;***************************************************************
 4405:					;
 4406:	  13B0			AXBYTE: ; Read external memory
 4407:					;
 4408:					;***************************************************************
 4409:					;
 4410:	  13B0	51 15			ACALL	IFIX		;GET THE EXPRESSION
 4411:	  13B2	8B A0			MOV	P2,R3
 4412:	  13B4	E3			MOVX	A,@R1
 4413:	  13B5	81 A3			AJMP	TWO_R2
 4414:					;
 4415:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 107



 Line  I  Addr  Code            Source

 4416:					;***************************************************************
 4417:					;
 4418:					; The relational operators - EQUAL                        (=)
 4419:					;                            GREATER THAN                 (>)
 4420:					;                            LESS THAN                    (<)
 4421:					;                            GREATER THAN OR EQUAL        (>=)
 4422:					;                            LESS THAN OR EQUAL           (<=)
 4423:					;                            NOT EQUAL                    (<>)
 4424:					;
 4425:					;***************************************************************
 4426:					;
 4427:	  13B7	31 FA		AGT:	ACALL	CMPLK
 4428:	  13B9	72 D5			ORL	C,F0		;SEE IF EITHER IS A ONE
 4429:	  13BB	40 AA			JC	P_Z
 4430:					;
 4431:	  13BD	90 13 C2	FSTK:	MOV	DPTR,#FS
 4432:	  13C0	81 25			AJMP	PUSHC
 4433:					;
 4434:	  13C2	85		FS:	DB	85H
 4435:	  13C3	00			DB	00H
 4436:	  13C4	00			DB	00H
 4437:	  13C5	50			DB	50H
 4438:	  13C6	53			DB	53H
 4439:	  13C7	65			DB	65H
 4440:					;
 4441:	  13C8	31 FA		ALT:	ACALL	CMPLK
 4442:	  13CA	B3			CPL	C
 4443:	  13CB	80 EE			SJMP	AGT+4
 4444:					;
 4445:	  13CD	31 FA		AEQ:	ACALL	CMPLK
 4446:	  13CF	A2 D5			MOV	C,F0
 4447:	  13D1	80 F7			SJMP	ALT+2
 4448:					;
 4449:	  13D3	31 FA		ANE:	ACALL	CMPLK
 4450:	  13D5	B2 D5			CPL	F0
 4451:	  13D7	80 F6			SJMP	AEQ+2
 4452:					;
 4453:	  13D9	31 FA		AGE:	ACALL	CMPLK
 4454:	  13DB	80 DE			SJMP	AGT+4
 4455:					;
 4456:	  13DD	31 FA		ALE:	ACALL	CMPLK
 4457:	  13DF	72 D5			ORL	C,F0
 4458:	  13E1	80 E7			SJMP	ALT+2
 4459:					;
 4460:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 108



 Line  I  Addr  Code            Source

 4461:					;***************************************************************
 4462:					;
 4463:	  13E3			ARND:	; Generate a random number
 4464:					;
 4465:					;***************************************************************
 4466:					;
 4467:	  13E3	90 01 0C		MOV	DPTR,#RCELL	;GET THE BINARY SEED
 4468:	  13E6	12 05 B2		CALL	L31DPI
 4469:	  13E9	E9			MOV	A,R1
 4470:	  13EA	C3			CLR	C
 4471:	  13EB	13			RRC	A
 4472:	  13EC	F8			MOV	R0,A
 4473:	  13ED	74 06			MOV	A,#6
 4474:	  13EF	13			RRC	A
 4475:	  13F0	29			ADD	A,R1
 4476:	  13F1	C8			XCH	A,R0
 4477:	  13F2	3B			ADDC	A,R3
 4478:	  13F3	FA			MOV	R2,A
 4479:	  13F4	15 82			DEC	DPL		;SAVE THE NEW SEED
 4480:	  13F6	91 16			ACALL	S20DP
 4481:	  13F8	91 A6			ACALL	TWO_EY
 4482:	  13FA	71 BD			ACALL	FSTK
 4483:					;
 4484:	  13FC	12 19 9B	ADIV:	LCALL	FP_BASE+8
 4485:	  13FF	01 24			AJMP	FPTST
 4486:					;
 4487:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 109



 Line  I  Addr  Code            Source

 4488:					;***************************************************************
 4489:					;
 4490:	  1401			SONERR:	; ON ERROR Statement
 4491:					;
 4492:					;***************************************************************
 4493:					;
 4494:	  1401	12 0F 39		LCALL	INTERR		;GET THE LINE NUMBER
 4495:	  1404	D2 13			SETB	ON_ERR
 4496:	  1406	90 01 02		MOV	DPTR,#ERRNUM	;POINT AT THR ERROR LOCATION
 4497:	  1409	80 0B			SJMP	S20DP
 4498:					;
 4499:					;
 4500:					;**************************************************************
 4501:					;
 4502:	  140B			SONEXT:	; ON EXT1 Statement
 4503:					;
 4504:					;**************************************************************
 4505:					;
 4506:	  140B	12 0F 39		LCALL	INTERR
 4507:	  140E	D2 12			SETB	INTBIT
 4508:	  1410	43 A8 84		ORL	IE,#10000100B	;ENABLE INTERRUPTS
 4509:	  1413	90 01 20		MOV	DPTR,#INTLOC
 4510:					;
 4511:	  1416	EA		S20DP:	MOV	A,R2		;SAVE R2:R0 @DPTR
 4512:	  1417	F0			MOVX	@DPTR,A
 4513:	  1418	A3			INC	DPTR
 4514:	  1419	E8			MOV	A,R0
 4515:	  141A	F0			MOVX	@DPTR,A
 4516:	  141B	22			RET
 4517:					;
 4518:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 110



 Line  I  Addr  Code            Source

 4519:					;***************************************************************
 4520:					;
 4521:					; CASTAK - Copy and push another top of arg stack
 4522:					;
 4523:					;***************************************************************
 4524:					;
 4525:	  141C	91 1E		CSTAKA2:ACALL	CSTAKA		;COPY STACK TWICE
 4526:					;
 4527:	  141E	51 45		CSTAKA:	ACALL	SETREG		;SET UP R2:R0
 4528:	  1420	80 23			SJMP	PUSH_T1+4
 4529:					;
 4530:	  1422	90 17 F3	PLNEXP:	MOV	DPTR,#EXP1
 4531:					;
 4532:					;***************************************************************
 4533:					;
 4534:					; PUSHC - Push constant on to the arg stack
 4535:					;
 4536:					;***************************************************************
 4537:					;
 4538:	  1425	31 FD		PUSHC:	ACALL	DEC_ASTKA
 4539:	  1427	8B A0			MOV	P2,R3
 4540:	  1429	7B 06			MOV	R3,#FPSIZ	;LOOP COUNTER
 4541:					;
 4542:	  142B	E4		PCL:	CLR	A		;SET UP A
 4543:	  142C	93			MOVC	A,@A+DPTR	;LOAD IT
 4544:	  142D	F3			MOVX	@R1,A		;SAVE IT
 4545:	  142E	A3			INC	DPTR		;BUMP POINTERS
 4546:	  142F	19			DEC	R1
 4547:	  1430	DB F9			DJNZ	R3,PCL		;LOOP
 4548:					;
 4549:	  1432	D2 24			SETB	ARGF
 4550:	  1434	22			RET			;EXIT
 4551:					;
 4552:	  1435			PUSH_ONE:;
 4553:					;
 4554:	  1435	90 16 F0		MOV	DPTR,#FPONE
 4555:	  1438	81 25			AJMP	PUSHC
 4556:					;
 4557:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 111



 Line  I  Addr  Code            Source

 4558:					;
 4559:	  143A			POP_T1:
 4560:					;
 4561:	  143A	7B 01			MOV	R3,#HIGH FPT1
 4562:	  143C	79 19			MOV	R1,#LOW FPT1
 4563:	  143E	02 0F DC		JMP	POPAS
 4564:					;
 4565:	  1441			PUSH_T1:
 4566:					;
 4567:	  1441	78 19			MOV	R0,#LOW FPT1
 4568:	  1443	7A 01			MOV	R2,#HIGH FPT1
 4569:	  1445	02 0F E6		LJMP	PUSHAS
 4570:					;
 4571:	  1448	78 1F		P_T2:	MOV	R0,#LOW FPT2
 4572:	  144A	80 F7			SJMP	$-7			;JUMP TO PUSHAS
 4573:					;
 4574:					;****************************************************************
 4575:					;
 4576:	  144C			SWAP_ASTKA:	; SWAP TOS<>TOS-1
 4577:					;
 4578:					;****************************************************************
 4579:					;
 4580:	  144C	51 45			ACALL	SETREG		;SET UP R2:R0 AND P2
 4581:	  144E	74 06			MOV	A,#FPSIZ	;PUT TOS+1 IN R1
 4582:	  1450	FA			MOV	R2,A
 4583:	  1451	28			ADD	A,R0
 4584:	  1452	F9			MOV	R1,A
 4585:					;
 4586:	  1453	E2		S_L:	MOVX	A,@R0
 4587:	  1454	FB			MOV	R3,A
 4588:	  1455	E3			MOVX	A,@R1
 4589:	  1456	F2			MOVX	@R0,A
 4590:	  1457	EB			MOV	A,R3
 4591:	  1458	F3			MOVX	@R1,A
 4592:	  1459	19			DEC	R1
 4593:	  145A	18			DEC	R0
 4594:	  145B	DA F6			DJNZ	R2,S_L
 4595:	  145D	22			RET
 4596:					;
 4597:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 112



 Line  I  Addr  Code            Source

 4598:					;
 4599:	  145E	51 45		C_T2:	ACALL	SETREG		;SET UP R2:R0
 4600:	  1460	7B 01			MOV	R3,#HIGH FPT2
 4601:	  1462	79 1F			MOV	R1,#LOW FPT2	;TEMP VALUE
 4602:					;
 4603:					; Fall thru
 4604:					;
 4605:					;***************************************************************
 4606:					;
 4607:					; VARCOP - Copy a variable from R2:R0 to R3:R1
 4608:					;
 4609:					;***************************************************************
 4610:					;
 4611:	  1464	7C 06		VARCOP:	MOV	R4,#FPSIZ	;LOAD THE LOOP COUNTER
 4612:					;
 4613:	  1466	8A A0		V_C:	MOV	P2,R2		;SET UP THE PORTS
 4614:	  1468	E2			MOVX	A,@R0		;READ THE VALUE
 4615:	  1469	8B A0			MOV	P2,R3		;PORT TIME AGAIN
 4616:	  146B	F3			MOVX	@R1,A		;SAVE IT
 4617:	  146C	B1 7D			ACALL	DEC3210		;BUMP POINTERS
 4618:	  146E	DC F6			DJNZ	R4,V_C		;LOOP
 4619:	  1470	22			RET			;EXIT
 4620:					;
 4621:	  1471	90 17 FF	PIPI:	MOV	DPTR,#PIE
 4622:	  1474	81 25			AJMP	PUSHC
 4623:					;
 4624:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 113



 Line  I  Addr  Code            Source

 4625:					;***************************************************************
 4626:					;
 4627:					; The logical operators ANL, ORL, XRL, NOT
 4628:					;
 4629:					;***************************************************************
 4630:					;
 4631:	  1476	91 93		AANL:	ACALL	TWOL		;GET THE EXPRESSIONS
 4632:	  1478	EB			MOV	A,R3		;DO THE AND
 4633:	  1479	5F			ANL	A,R7
 4634:	  147A	FA			MOV	R2,A
 4635:	  147B	E9			MOV	A,R1
 4636:	  147C	5E			ANL	A,R6
 4637:	  147D	80 26			SJMP	TWO_EX
 4638:					;
 4639:	  147F	91 93		AORL:	ACALL	TWOL		;SAME THING FOR OR
 4640:	  1481	EB			MOV	A,R3
 4641:	  1482	4F			ORL	A,R7
 4642:	  1483	FA			MOV	R2,A
 4643:	  1484	E9			MOV	A,R1
 4644:	  1485	4E			ORL	A,R6
 4645:	  1486	80 1D			SJMP	TWO_EX
 4646:					;
 4647:	  1488	71 BD		ANOT:	ACALL	FSTK		;PUT 0FFFFH ON THE STACK
 4648:					;
 4649:	  148A	91 93		AXRL:	ACALL	TWOL
 4650:	  148C	EB			MOV	A,R3
 4651:	  148D	6F			XRL	A,R7
 4652:	  148E	FA			MOV	R2,A
 4653:	  148F	E9			MOV	A,R1
 4654:	  1490	6E			XRL	A,R6
 4655:	  1491	80 12			SJMP	TWO_EX
 4656:					;
 4657:	  1493	51 15		TWOL:	ACALL	IFIX
 4658:	  1495	AF 03			MOV	R7,R3B0
 4659:	  1497	AE 01			MOV	R6,R1B0
 4660:	  1499	41 15			AJMP	IFIX
 4661:					;
 4662:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 114



 Line  I  Addr  Code            Source

 4663:					;*************************************************************
 4664:					;
 4665:	  149B			AGET:	; READ THE BREAK BYTE AND PUT IT ON THE ARG STACK
 4666:					;
 4667:					;*************************************************************
 4668:					;
 4669:	  149B	90 01 00		MOV	DPTR,#GTB	;GET THE BREAK BYTE
 4670:	  149E	E0			MOVX	A,@DPTR
 4671:	  149F	10 18 01		JBC	GTRD,TWO_R2
 4672:	  14A2	E4			CLR	A
 4673:					;
 4674:	  14A3	7A 00		TWO_R2:	MOV	R2,#00H		;ACC GOES TO STACK
 4675:					;
 4676:					;
 4677:	  14A5	F8		TWO_EX:	MOV	R0,A		;R2:ACC GOES TO STACK
 4678:					;
 4679:					;
 4680:	  14A6	D2 24		TWO_EY:	SETB	ARGF		;R2:R0 GETS PUT ON THE STACK
 4681:	  14A8	02 19 AB		JMP	FP_BASE+24	;DO IT
 4682:					;
 4683:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 115



 Line  I  Addr  Code            Source

 4684:					;*************************************************************
 4685:					;
 4686:					; Put directs onto the stack
 4687:					;
 4688:					;**************************************************************
 4689:					;
 4690:	  14AB	E5 A8		A_IE:	MOV	A,IE		;IE
 4691:	  14AD	80 F4			SJMP	TWO_R2
 4692:					;
 4693:	  14AF	E5 B8		A_IP:	MOV	A,IP		;IP
 4694:	  14B1	80 F0			SJMP	TWO_R2
 4695:					;
 4696:	  14B3	AA 8C		ATIM0:	MOV	R2,TH0		;TIMER 0
 4697:	  14B5	A8 8A			MOV	R0,TL0
 4698:	  14B7	80 ED			SJMP	TWO_EY
 4699:					;
 4700:	  14B9	AA 8D		ATIM1:	MOV	R2,TH1		;TIMER 1
 4701:	  14BB	A8 8B			MOV	R0,TL1
 4702:	  14BD	80 E7			SJMP	TWO_EY
 4703:					;
 4704:	  14BF	AA		ATIM2:	DB	0AAH		;MOV R2 DIRECT OP CODE
 4705:	  14C0	CD			DB	0CDH		;T2 HIGH
 4706:	  14C1	A8			DB	0A8H		;MOV R0 DIRECT OP CODE
 4707:	  14C2	CC			DB	0CCH		;T2 LOW
 4708:	  14C3	80 E1			SJMP	TWO_EY		;TIMER 2
 4709:					;
 4710:	  14C5	E5		AT2CON:	DB	0E5H		;MOV A,DIRECT OPCODE
 4711:	  14C6	C8			DB	0C8H		;T2CON LOCATION
 4712:	  14C7	80 DA			SJMP	TWO_R2
 4713:					;
 4714:	  14C9	E5 88		ATCON:	MOV	A,TCON		;TCON
 4715:	  14CB	80 D6			SJMP	TWO_R2
 4716:					;
 4717:	  14CD	E5 89		ATMOD:	MOV	A,TMOD		;TMOD
 4718:	  14CF	80 D2			SJMP	TWO_R2
 4719:					;
 4720:	  14D1	AA		ARCAP2:	DB	0AAH		;MOV R2, DIRECT OP CODE
 4721:	  14D2	CB			DB	0CBH		;RCAP2H LOCATION
 4722:	  14D3	A8			DB	0A8H		;MOV R0, DIRECT OP CODE
 4723:	  14D4	CA			DB	0CAH		;R2CAPL LOCATION
 4724:	  14D5	80 CF			SJMP	TWO_EY
 4725:					;
 4726:	  14D7	E5 90		AP1:	MOV	A,P1		;GET P1
 4727:	  14D9	80 C8			SJMP	TWO_R2		;PUT IT ON THE STACK
 4728:					;
 4729:	  14DB	E5		APCON:	DB	0E5H		;MOV A, DIRECT OP CODE
 4730:	  14DC	87			DB	87H		;ADDRESS OF PCON
 4731:	  14DD	80 C4			SJMP	TWO_R2		;PUT PCON ON THE STACK
 4732:					;
 4733:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 116



 Line  I  Addr  Code            Source

 4734:					;***************************************************************
 4735:					;
 4736:					;THIS IS THE LINE EDITOR
 4737:					;
 4738:					;TAKE THE PROCESSED LINE IN IBUF AND INSERT IT INTO THE
 4739:					;BASIC TEXT FILE.
 4740:					;
 4741:					;***************************************************************
 4742:					;
 4743:	  14DF	02 05 66		LJMP	NOGO		;CAN'T EDIT A ROM
 4744:					;
 4745:	  14E2	E5 13		LINE:	MOV	A,BOFAH
 4746:	  14E4	B4 02 F8		CJNE	A,#HIGH PSTART,LINE-3
 4747:	  14E7	12 05 A1		CALL	G4		;GET END ADDRESS FOR EDITING
 4748:	  14EA	AC 82			MOV	R4,DPL
 4749:	  14EC	AD 83			MOV	R5,DPH
 4750:	  14EE	AB 0F			MOV	R3,TEMP5	;GET HIGH ORDER IBLN
 4751:	  14F0	A9 0E			MOV	R1,TEMP4	;LOW ORDER IBLN
 4752:					;
 4753:	  14F2	12 05 84		CALL	GETLIN		;FIND THE LINE
 4754:	  14F5	70 12			JNZ	INSR		;INSERT IF NOT ZERO, ELSE APPEND
 4755:					;
 4756:					;APPEND THE LINE AT THE END
 4757:					;
 4758:	  14F7	E5 0D			MOV	A,TEMP3		;PUT IBCNT IN THE ACC
 4759:	  14F9	B4 04 01		CJNE	A,#4H,$+4	;SEE IF NO ENTRY
 4760:	  14FC	22			RET			;RET IF NO ENTRY
 4761:					;
 4762:	  14FD	B1 9A			ACALL	FULL		;SEE IF ENOUGH SPACE LEFT
 4763:	  14FF	AA 05			MOV	R2,R5B0		;PUT END ADDRESS A INTO TRANSFER
 4764:	  1501	A8 04			MOV	R0,R4B0		;REGISTERS
 4765:	  1503	B1 58			ACALL	IMOV		;DO THE BLOCK MOVE
 4766:					;
 4767:	  1505	74 01		UE:	MOV	A,#EOF		;SAVE EOF CHARACTER
 4768:	  1507	A1 8B			AJMP	TBR
 4769:					;
 4770:					;INSERT A LINE INTO THE FILE
 4771:					;
 4772:	  1509	FF		INSR:	MOV	R7,A		;SAVE IT IN R7
 4773:	  150A	12 18 55		CALL	TEMPD		;SAVE INSERATION ADDRESS
 4774:	  150D	E5 0D			MOV	A,TEMP3		;PUT THE COUNT LENGTH IN THE ACC
 4775:	  150F	40 09			JC	LTX		;JUMP IF NEW LINE # NOT = OLD LINE #
 4776:	  1511	B4 04 01		CJNE	A,#04H,$+4	;SEE IF NULL
 4777:	  1514	E4			CLR	A
 4778:					;
 4779:	  1515	9F			SUBB	A,R7		;SUBTRACT LINE COUNT FROM ACC
 4780:	  1516	60 36			JZ	LIN1		;LINE LENGTHS EQUAL
 4781:	  1518	40 1F			JC	GTX		;SMALLER LINE
 4782:					;
 4783:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 117



 Line  I  Addr  Code            Source

 4784:					;
 4785:					;EXPAND FOR A NEW LINE OR A LARGER LINE
 4786:					;
 4787:	  151A	FF		LTX:	MOV	R7,A		;SAVE A IN R7
 4788:	  151B	E5 0D			MOV	A,TEMP3		;GET THE COUNT IN THE ACC
 4789:	  151D	B4 04 01		CJNE	A,#04H,$+4	;DO NO INSERTATION IF NULL LINE
 4790:	  1520	22			RET			;EXIT IF IT IS
 4791:					;
 4792:	  1521	EF			MOV	A,R7		;GET THE COUNT BACK - DELTA IN A
 4793:	  1522	B1 9A			ACALL	FULL		;SEE IF ENOUGH MEMORY NEW EOFA IN R3:R1
 4794:	  1524	12 18 4E		CALL	DTEMP		;GET INSERATION ADDRESS
 4795:	  1527	B1 8F			ACALL	NMOV		;R7:R6 GETS (EOFA)-DPTR
 4796:	  1529	12 0D B6		CALL	X3120
 4797:	  152C	A9 04			MOV	R1,R4B0		;EOFA LOW
 4798:	  152E	AB 05			MOV	R3,R5B0		;EOFA HIGH
 4799:	  1530	0E			INC	R6		;INCREMENT BYTE COUNT
 4800:	  1531	BE 00 01		CJNE	R6,#00,$+4	;NEED TO BUMP HIGH BYTE?
 4801:	  1534	0F			INC	R7
 4802:					;
 4803:	  1535	B1 73			ACALL	RMOV		;GO DO THE INSERTION
 4804:	  1537	80 15			SJMP	LIN1		;INSERT THE CURRENT LINE
 4805:					;
 4806:	  1539	F4		GTX:	CPL	A		;FLIP ACC
 4807:	  153A	04			INC	A		;TWOS COMPLEMENT
 4808:	  153B	12 05 D6		CALL	ADDPTR		;DO THE ADDITION
 4809:	  153E	B1 8F			ACALL	NMOV		;R7:R6 GETS (EOFA)-DPTR
 4810:	  1540	A9 82			MOV	R1,DPL		;SET UP THE REGISTERS
 4811:	  1542	AB 83			MOV	R3,DPH
 4812:	  1544	AA 0F			MOV	R2,TEMP5	;PUT INSERTATION ADDRESS IN THE RIGHT REG
 4813:	  1546	A8 0E			MOV	R0,TEMP4
 4814:	  1548	60 02			JZ	$+4		;IF ACC WAS ZERO FROM NMOV, JUMP
 4815:	  154A	B1 5F			ACALL	LMOV		;IF NO ZERO DO A LMOV
 4816:					;
 4817:	  154C	B1 05			ACALL	UE		;SAVE NEW END ADDRESS
 4818:					;
 4819:	  154E	AA 0F		LIN1:	MOV	R2,TEMP5	;GET THE INSERTATION ADDRESS
 4820:	  1550	A8 0E			MOV	R0,TEMP4
 4821:	  1552	E5 0D			MOV	A,TEMP3		;PUT THE COUNT LENGTH IN ACC
 4822:	  1554	B4 04 01		CJNE	A,#04H,IMOV	;SEE IF NULL
 4823:	  1557	22			RET			;EXIT IF NULL
 4824:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 118



 Line  I  Addr  Code            Source

 4825:					;***************************************************************
 4826:					;
 4827:					;INSERT A LINE AT ADDRESS R2:R0
 4828:					;
 4829:					;***************************************************************
 4830:					;
 4831:	  1558	E4		IMOV:	CLR	A		;TO SET UP
 4832:	  1559	79 04			MOV	R1,#LOW IBCNT	;INITIALIZE THE REGISTERS
 4833:	  155B	FB			MOV	R3,A
 4834:	  155C	AE 0D			MOV	R6,TEMP3	;PUT THE BYTE COUNT IN R6 FOR LMOV
 4835:	  155E	FF			MOV	R7,A		;PUT A 0 IN R7 FOR LMOV
 4836:					;
 4837:					;***************************************************************
 4838:					;
 4839:					;COPY A BLOCK FROM THE BEGINNING
 4840:					;
 4841:					;R2:R0 IS THE DESTINATION ADDRESS
 4842:					;R3:R1 IS THE SOURCE ADDRESS
 4843:					;R7:R6 IS THE COUNT REGISTER
 4844:					;
 4845:					;***************************************************************
 4846:					;
 4847:	  155F	B1 88		LMOV:	ACALL	TBYTE		;TRANSFER THE BYTE
 4848:	  1561	B1 68			ACALL	INC3210		;BUMP THE POINTER
 4849:	  1563	D1 39			ACALL	DEC76		;BUMP R7:R6
 4850:	  1565	70 F8			JNZ	LMOV		;LOOP
 4851:	  1567	22			RET			;GO BACK TO CALLING ROUTINE
 4852:					;
 4853:	  1568	08		INC3210:INC	R0
 4854:	  1569	B8 00 01		CJNE	R0,#00H,$+4
 4855:	  156C	0A			INC	R2
 4856:					;
 4857:	  156D	09			INC	R1
 4858:	  156E	B9 00 01		CJNE	R1,#00H,$+4
 4859:	  1571	0B			INC	R3
 4860:	  1572	22			RET
 4861:					;
 4862:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 119



 Line  I  Addr  Code            Source

 4863:					;***************************************************************
 4864:					;
 4865:					;COPY A BLOCK STARTING AT THE END
 4866:					;
 4867:					;R2:R0 IS THE DESTINATION ADDRESS
 4868:					;R3:R1 IS THE SOURCE ADDRESS
 4869:					;R6:R7 IS THE COUNT REGISTER
 4870:					;
 4871:					;***************************************************************
 4872:					;
 4873:	  1573	B1 88		RMOV:	ACALL	TBYTE		;TRANSFER THE BYTE
 4874:	  1575	B1 7D			ACALL	DEC3210		;DEC THE LOCATIONS
 4875:	  1577	D1 39			ACALL	DEC76		;BUMP THE COUNTER
 4876:	  1579	70 F8			JNZ	RMOV		;LOOP
 4877:					;
 4878:	  157B	00		DEC_R:	NOP			;CREATE EQUAL TIMING
 4879:	  157C	22			RET			;EXIT
 4880:					;
 4881:	  157D	18		DEC3210:DEC	R0		;BUMP THE POINTER
 4882:	  157E	B8 FF 01		CJNE	R0,#0FFH,$+4	;SEE IF OVERFLOWED
 4883:	  1581	1A			DEC	R2		;BUMP THE HIGH BYTE
 4884:	  1582	19			DEC	R1		;BUMP THE POINTER
 4885:	  1583	B9 FF F5		CJNE	R1,#0FFH,DEC_R	;SEE IF OVERFLOWED
 4886:	  1586	1B			DEC	R3		;CHANGE THE HIGH BYTE
 4887:	  1587	22			RET			;EXIT
 4888:					;
 4889:					;***************************************************************
 4890:					;
 4891:					;TBYTE - TRANSFER A BYTE
 4892:					;
 4893:					;***************************************************************
 4894:					;
 4895:	  1588	8B A0		TBYTE:	MOV	P2,R3		;OUTPUT SOURCE REGISTER TO PORT
 4896:	  158A	E3			MOVX	A,@R1		;PUT BYTE IN ACC
 4897:					;
 4898:	  158B	8A A0		TBR:	MOV	P2,R2		;OUTPUT DESTINATION TO PORT
 4899:	  158D	F2			MOVX	@R0,A		;SAVE THE BYTE
 4900:	  158E	22			RET			;EXIT
 4901:					;
 4902:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 120



 Line  I  Addr  Code            Source

 4903:					;***************************************************************
 4904:					;
 4905:					;NMOV - R7:R6 = END ADDRESS - DPTR
 4906:					;
 4907:					;ACC GETS CLOBBERED
 4908:					;
 4909:					;***************************************************************
 4910:					;
 4911:	  158F	EC		NMOV:	MOV	A,R4		;THE LOW BYTE OF EOFA
 4912:	  1590	C3			CLR	C		;CLEAR THE CARRY FOR SUBB
 4913:	  1591	95 82			SUBB	A,DPL		;SUBTRACT DATA POINTER LOW
 4914:	  1593	FE			MOV	R6,A		;PUT RESULT IN R6
 4915:	  1594	ED			MOV	A,R5		;HIGH BYTE OF EOFA
 4916:	  1595	95 83			SUBB	A,DPH		;SUBTRACT DATA POINTER HIGH
 4917:	  1597	FF			MOV	R7,A		;PUT RESULT IN R7
 4918:	  1598	4E			ORL	A,R6		;SEE IF ZERO
 4919:	  1599	22			RET			;EXIT
 4920:					;
 4921:					;***************************************************************
 4922:					;
 4923:					;CHECK FOR A FILE OVERFLOW
 4924:					;LEAVES THE NEW END ADDRESS IN R3:R1
 4925:					;A HAS THE INCREASE IN SIZE
 4926:					;
 4927:					;***************************************************************
 4928:					;
 4929:	  159A	2C		FULL:	ADD	A,R4		;ADD A TO END ADDRESS
 4930:	  159B	F9			MOV	R1,A		;SAVE IT
 4931:	  159C	E4			CLR	A
 4932:	  159D	3D			ADDC	A,R5		;ADD THE CARRY
 4933:	  159E	FB			MOV	R3,A
 4934:	  159F	90 01 04		MOV	DPTR,#VARTOP	;POINT AT VARTOP
 4935:					;
 4936:	  15A2	12 05 C4	FUL1:	CALL	DCMPX		;COMPARE THE TWO
 4937:	  15A5	40 F2			JC	FULL-1		;OUT OF ROOM
 4938:					;
 4939:	  15A7	90 18 17	TB:	MOV	DPTR,#E5X	;OUT OF MEMORY
 4940:	  15AA	01 37			AJMP	FPTS
 4941:					;
 4942:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 121



 Line  I  Addr  Code            Source

 4943:					;***************************************************************
 4944:					;
 4945:					; PP - Preprocesses the line in IBUF back into IBUF
 4946:					;      sets F0 if no line number
 4947:					;      leaves the correct length of processed line in IBCNT
 4948:					;      puts the line number in IBLN
 4949:					;      wastes the text address TXAL and TXAH
 4950:					;
 4951:					;***************************************************************
 4952:					;
 4953:	  15AC	F1 6A		PP:	ACALL	T_BUF		;TXA GETS IBUF
 4954:	  15AE	12 0F 3E		CALL	INTGER		;SEE IF A NUMBER PRESENT
 4955:	  15B1	12 18 55		CALL	TEMPD		;SAVE THE INTEGER IN TEMP5:TEMP4
 4956:	  15B4	92 D5			MOV	F0,C		;SAVE INTEGER IF PRESENT
 4957:	  15B6	90 00 05		MOV	DPTR,#IBLN	;SAVE THE LINE NUMBER, EVEN IF NONE
 4958:	  15B9	91 16			ACALL	S20DP
 4959:	  15BB	A8 08			MOV	R0,TXAL		;TEXT POINTER
 4960:	  15BD	79 07			MOV	R1,#LOW IBUF	;STORE POINTER
 4961:					;
 4962:					; Now process the line back into IBUF
 4963:					;
 4964:	  15BF	C2 24		PPL:	CLR	ARGF		;FIRST PASS DESIGNATOR
 4965:	  15C1	90 01 73		MOV	DPTR,#TOKTAB	;POINT DPTR AT LOOK UP TABLE
 4966:					;
 4967:	  15C4	88 05		PPL1:	MOV	R5B0,R0		;SAVE THE READ POINTER
 4968:	  15C6	E4			CLR	A		;ZERO A FOR LOOKUP
 4969:	  15C7	93			MOVC	A,@A+DPTR	;GET THE TOKEN
 4970:	  15C8	FF			MOV	R7,A		;SAVE TOKEN IN CASE OF MATCH
 4971:					;
 4972:	  15C9	E2		PPL2:	MOVX	A,@R0		;GET THE USER CHARACTER
 4973:	  15CA	FB			MOV	R3,A		;SAVE FOR REM
 4974:	  15CB	B4 61 00		CJNE	A,#'a',$+3
 4975:	  15CE	40 07			JC	PPX		;CONVERT LOWER TO UPPER CASE
 4976:	  15D0	B4 7B 00		CJNE	A,#('z'+1),$+3
 4977:	  15D3	50 02			JNC	PPX
 4978:	  15D5	C2 E5			CLR	ACC.5
 4979:					;
 4980:	  15D7	FA		PPX:	MOV	R2,A
 4981:	  15D8	F2			MOVX	@R0,A		;SAVE UPPER CASE
 4982:	  15D9	A3			INC	DPTR		;BUMP THE LOOKUP POINTER
 4983:	  15DA	E4			CLR	A
 4984:	  15DB	93			MOVC	A,@A+DPTR
 4985:	  15DC	B5 02 03		CJNE	A,R2B0,PPL3	;LEAVE IF NOT THE SAME
 4986:	  15DF	08			INC	R0		;BUMP THE USER POINTER
 4987:	  15E0	80 E7			SJMP	PPL2		;CONTINUE TO LOOP
 4988:					;
 4989:	  15E2	20 E7 2F	PPL3:	JB	ACC.7,PPL6	;JUMP IF FOUND MATCH
 4990:	  15E5	60 2D			JZ	PPL6		;USER MATCH
 4991:					;
 4992:					;
 4993:					; Scan to the next TOKTAB entry
 4994:					;
 4995:	  15E7	A3		PPL4:	INC	DPTR		;ADVANCE THE POINTER
 4996:	  15E8	E4			CLR	A		;ZERO A FOR LOOKUP
 4997:	  15E9	93			MOVC	A,@A+DPTR	;LOAD A WITH TABLE
 4998:	  15EA	20 E7 03		JB	ACC.7,$+6	;KEEP SCANNING IF NOT A RESERVED WORD

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 122



 Line  I  Addr  Code            Source

 4999:	  15ED	70 F8			JNZ	PPL4
 5000:	  15EF	A3			INC	DPTR
 5001:					;
 5002:					; See if at the end of TOKTAB
 5003:					;
 5004:	  15F0	A8 05			MOV	R0,R5B0		;RESTORE THE POINTER
 5005:	  15F2	B4 FF CF		CJNE	A,#0FFH,PPL1	;SEE IF END OF TABLE
 5006:					;
 5007:					; Character not in TOKTAB, so see what it is
 5008:					;
 5009:	  15F5	BA 20 03		CJNE	R2,#' ',PPLX	;SEE IF A SPACE
 5010:	  15F8	08			INC	R0		;BUMP USER POINTER
 5011:	  15F9	80 C4			SJMP	PPL		;TRY AGAIN
 5012:					;
 5013:	  15FB	30 2D 0A	PPLX:	JNB	XBIT,PPLY	;EXTERNAL TRAP
 5014:	  15FE	20 24 07		JB	ARGF,PPLY
 5015:	  1601	D2 24			SETB	ARGF		;SAYS THAT THE USER HAS TABLE
 5016:	  1603	12 20 78		LCALL	2078H		;SET UP POINTER
 5017:	  1606	A1 C4			AJMP	PPL1
 5018:					;
 5019:	  1608	D1 21		PPLY:	ACALL	PPL7		;SAVE CHARACTER, EXIT IF A CR
 5020:	  160A	B4 22 B2		CJNE	A,#'"',PPL	;SEE IF QUOTED STRING, START AGAIN IF NOT
 5021:					;
 5022:					; Just copy a quoted string
 5023:					;
 5024:	  160D	D1 21			ACALL	PPL7		;SAVE THE CHARACTER, TEST FOR CR
 5025:	  160F	B4 22 FB		CJNE	A,#'"',$-2	;IS THERE AN ENDQUOTE, IF NOT LOOP
 5026:	  1612	80 AB			SJMP	PPL		;DO IT AGAIN IF ENDQUOTE
 5027:					;
 5028:	  1614	EF		PPL6:	MOV	A,R7		;GET THE TOKEN
 5029:	  1615	D1 36			ACALL	PPL9+1		;SAVE THE TOKEN
 5030:	  1617	B4 96 A5		CJNE	A,#T_REM,PPL	;SEE IF A REM TOKEN
 5031:	  161A	EB			MOV	A,R3
 5032:	  161B	D1 22			ACALL	PPL7+1		;WASTE THE REM STATEMENT
 5033:	  161D	D1 21			ACALL	PPL7		;LOOP UNTIL A CR
 5034:	  161F	80 FC			SJMP	$-2
 5035:					;
 5036:	  1621	E2		PPL7:	MOVX	A,@R0		;GET THE CHARACTER
 5037:	  1622	B4 0D 10		CJNE	A,#CR,PPL9	;FINISH IF A CR
 5038:	  1625	D0 00			POP	R0B0		;WASTE THE CALLING STACK
 5039:	  1627	D0 00			POP	R0B0
 5040:	  1629	F3			MOVX	@R1,A		;SAVE CR IN MEMORY
 5041:	  162A	09			INC	R1		;SAVE A TERMINATOR
 5042:	  162B	74 01			MOV	A,#EOF
 5043:	  162D	F3			MOVX	@R1,A
 5044:	  162E	E9			MOV	A,R1		;SUBTRACT FOR LENGTH
 5045:	  162F	94 04			SUBB	A,#4
 5046:	  1631	F5 0D			MOV	TEMP3,A		;SAVE LENGTH
 5047:	  1633	79 04			MOV	R1,#LOW IBCNT	;POINT AT BUFFER COUNT
 5048:					;
 5049:	  1635	08		PPL9:	INC	R0
 5050:	  1636	F3			MOVX	@R1,A		;SAVE THE CHARACTER
 5051:	  1637	09			INC	R1		;BUMP THE POINTERS
 5052:	  1638	22			RET			;EXIT TO CALLING ROUTINE
 5053:					;
 5054:					;

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 123



 Line  I  Addr  Code            Source

 5055:					;***************************************************************
 5056:					;
 5057:					;DEC76 - DECREMENT THE REGISTER PAIR R7:R6
 5058:					;
 5059:					;ACC = ZERO IF R7:R6 = ZERO ; ELSE ACC DOES NOT
 5060:					;
 5061:					;***************************************************************
 5062:					;
 5063:	  1639	1E		DEC76:	DEC	R6		;BUMP R6
 5064:	  163A	BE FF 01		CJNE	R6,#0FFH,$+4	;SEE IF RAPPED AROUND
 5065:	  163D	1F			DEC	R7
 5066:	  163E	EF			MOV	A,R7		;SEE IF ZERO
 5067:	  163F	4E			ORL	A,R6
 5068:	  1640	22			RET			;EXIT
 5069:					;
 5070:					;***************************************************************
 5071:					;
 5072:					; MTOP - Get or Put the top of assigned memory
 5073:					;
 5074:					;***************************************************************
 5075:					;
 5076:	  1641	90 01 0A	PMTOP:	MOV	DPTR,#MEMTOP
 5077:	  1644	12 05 6B		CALL	L20DPI
 5078:	  1647	81 A6			AJMP	TWO_EY		;PUT R2:R0 ON THE STACK
 5079:					;
 5080:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 124



 Line  I  Addr  Code            Source

 5081:					;*************************************************************
 5082:					;
 5083:					; AXTAL - Crystal value calculations
 5084:					;
 5085:					;*************************************************************
 5086:					;
 5087:	  1649	90 17 E7	AXTAL0:	MOV	DPTR,#XTALV	;CRYSTAL VALUE
 5088:	  164C	91 25			ACALL	PUSHC
 5089:					;
 5090:	  164E	91 1C		AXTAL1:	ACALL	CSTAKA2		;COPY CRYSTAL VALUE TWICE
 5091:	  1650	91 1E			ACALL	CSTAKA
 5092:	  1652	90 07 01		MOV	DPTR,#PTIME	;PROM TIMER
 5093:	  1655	D1 77			ACALL	AXTAL2
 5094:	  1657	90 01 28		MOV	DPTR,#PROGS
 5095:	  165A	F1 0C			ACALL	S31L
 5096:	  165C	90 17 F9		MOV	DPTR,#IPTIME	;IPROM TIMER
 5097:	  165F	D1 77			ACALL	AXTAL2
 5098:	  1661	90 01 2A		MOV	DPTR,#IPROGS
 5099:	  1664	F1 0C			ACALL	S31L
 5100:	  1666	90 11 59		MOV	DPTR,#TTIME	;CLOCK CALCULATION
 5101:	  1669	51 11			ACALL	AXTAL3
 5102:	  166B	E9			MOV	A,R1
 5103:	  166C	F4			CPL	A
 5104:	  166D	04			INC	A
 5105:	  166E	F5 4A			MOV	SAVE_T,A
 5106:	  1670	7B 01			MOV	R3,#HIGH CXTAL
 5107:	  1672	79 13			MOV	R1,#LOW CXTAL
 5108:	  1674	02 0F DC		JMP	POPAS
 5109:					;
 5110:	  1677	51 11		AXTAL2:	ACALL	AXTAL3
 5111:					;
 5112:	  1679			CBIAS:	;Bias the crystal calculations
 5113:					;
 5114:	  1679	E9			MOV	A,R1		;GET THE LOW COUNT
 5115:	  167A	F4			CPL	A		;FLIP IT FOR TIMER LOAD
 5116:	  167B	24 0F			ADD	A,#15		;BIAS FOR CALL AND LOAD TIMES
 5117:	  167D	F9			MOV	R1,A		;RESTORE IT
 5118:	  167E	EB			MOV	A,R3		;GET THE HIGH COUNT
 5119:	  167F	F4			CPL	A		;FLIP IT
 5120:	  1680	34 00			ADDC	A,#00H		;ADD THE CARRY
 5121:	  1682	FB			MOV	R3,A		;RESTORE IT
 5122:	  1683	22			RET
 5123:					;
 5124:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 125



 Line  I  Addr  Code            Source

 5125:				;$INCLUDE(:F2:BAS52.PWM)
 5126:				;BEGINNING
 5127:					;**************************************************************
 5128:					;
 5129:	  1684			STONE:	; Toggle the I/O port
 5130:					;
 5131:					;**************************************************************
 5132:					;
 5133:	  1684	12 0E 81		CALL	THREE		;GET THE NUMBERS
 5134:	  1687	D1 79			ACALL	CBIAS		;BIAS R3:R1 FOR COUNT LOOP
 5135:					;
 5136:	  1689	C2 92		STONE1:	CLR	T_BIT		;TOGGLE THE BIT
 5137:	  168B	C2 8E			CLR	TR1		;STOP THE TIMER
 5138:	  168D	8B 8D			MOV	TH1,R3		;LOAD THE TIMER
 5139:	  168F	89 8B			MOV	TL1,R1
 5140:	  1691	C2 8F			CLR	TF1		;CLEAR THE OVERFLOW FLAG
 5141:	  1693	D2 8E			SETB	TR1		;TURN IT ON
 5142:	  1695	D1 39			ACALL	DEC76
 5143:	  1697	30 8F FD		JNB	TF1,$		;WAIT
 5144:	  169A	71 9E			ACALL	ALPAR
 5145:	  169C	D2 92			SETB	T_BIT		;BACK TO A ONE
 5146:	  169E	12 05 29		CALL	TIMER_LOAD+2	;LOAD THE HIGH VALUE
 5147:	  16A1	30 8F FD		JNB	TF1,$		;WAIT
 5148:	  16A4	70 E3			JNZ	STONE1		;LOOP
 5149:	  16A6	22			RET
 5150:					;
 5151:
 5152:				;END
 5153:				;$INCLUDE(:F2:BAS52.PWM)
 5154:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 126



 Line  I  Addr  Code            Source

 5155:					;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
 5156:					;
 5157:	  16A7			LNTAB:	; Natural log lookup table
 5158:					;
 5159:					;LNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLNLN
 5160:					;
 5161:	  16A7	80			DB	80H
 5162:	  16A8	00			DB	00H
 5163:	  16A9	71			DB	71H
 5164:	  16AA	37			DB	37H
 5165:	  16AB	13			DB	13H
 5166:	  16AC	19			DB	19H
 5167:					;
 5168:	  16AD	7F			DB	7FH
 5169:	  16AE	00			DB	00H
 5170:	  16AF	76			DB	76H
 5171:	  16B0	64			DB	64H
 5172:	  16B1	37			DB	37H
 5173:	  16B2	94			DB	94H
 5174:					;
 5175:	  16B3	80			DB	80H
 5176:	  16B4	00			DB	00H
 5177:	  16B5	07			DB	07H
 5178:	  16B6	22			DB	22H
 5179:	  16B7	75			DB	75H
 5180:	  16B8	17			DB	17H
 5181:					;
 5182:	  16B9	80			DB	80H
 5183:	  16BA	00			DB	00H
 5184:	  16BB	52			DB	52H
 5185:	  16BC	35			DB	35H
 5186:	  16BD	93			DB	93H
 5187:	  16BE	28			DB	28H
 5188:					;
 5189:	  16BF	80			DB	80H
 5190:	  16C0	00			DB	00H
 5191:	  16C1	71			DB	71H
 5192:	  16C2	91			DB	91H
 5193:	  16C3	85			DB	85H
 5194:	  16C4	86			DB	86H
 5195:					;
 5196:	  16C5	FF			DB	0FFH
 5197:					;
 5198:	  16C6	81			DB	81H
 5199:	  16C7	00			DB	00H
 5200:	  16C8	51			DB	51H
 5201:	  16C9	58			DB	58H
 5202:	  16CA	02			DB	02H
 5203:	  16CB	23			DB	23H
 5204:					;
 5205:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 127



 Line  I  Addr  Code            Source

 5206:					;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
 5207:					;
 5208:	  16CC			SINTAB:	; Sin lookup table
 5209:					;
 5210:					;SINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSINSIN
 5211:					;
 5212:	  16CC	77			DB	128-9
 5213:	  16CD	00			DB	00H
 5214:	  16CE	44			DB	44H
 5215:	  16CF	90			DB	90H
 5216:	  16D0	05			DB	05H
 5217:	  16D1	16			DB	16H
 5218:					;
 5219:	  16D2	79			DB	128-7
 5220:	  16D3	01			DB	01H
 5221:	  16D4	08			DB	08H
 5222:	  16D5	21			DB	21H
 5223:	  16D6	05			DB	05H
 5224:	  16D7	25			DB	25H
 5225:					;
 5226:	  16D8	7B			DB	128-5
 5227:	  16D9	00			DB	00H
 5228:	  16DA	19			DB	19H
 5229:	  16DB	73			DB	73H
 5230:	  16DC	55			DB	55H
 5231:	  16DD	27			DB	27H
 5232:					;
 5233:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 128



 Line  I  Addr  Code            Source

 5234:					;
 5235:	  16DE	7D			DB	128-3
 5236:	  16DF	01			DB	01H
 5237:	  16E0	70			DB	70H
 5238:	  16E1	12			DB	12H
 5239:	  16E2	84			DB	84H
 5240:	  16E3	19			DB	19H
 5241:					;
 5242:	  16E4	7E			DB	128-2
 5243:	  16E5	00			DB	00H
 5244:	  16E6	33			DB	33H
 5245:	  16E7	33			DB	33H
 5246:	  16E8	33			DB	33H
 5247:	  16E9	83			DB	83H
 5248:					;
 5249:	  16EA	80			DB	128
 5250:	  16EB	01			DB	01H
 5251:	  16EC	67			DB	67H
 5252:	  16ED	66			DB	66H
 5253:	  16EE	66			DB	66H
 5254:	  16EF	16			DB	16H
 5255:					;
 5256:	  16F0	81		FPONE:	DB	128+1
 5257:	  16F1	00			DB	00H
 5258:	  16F2	00			DB	00H
 5259:	  16F3	00			DB	00H
 5260:	  16F4	00			DB	00H
 5261:	  16F5	10			DB	10H
 5262:					;
 5263:	  16F6	FF			DB	0FFH		;END OF TABLE
 5264:					;
 5265:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 129



 Line  I  Addr  Code            Source

 5266:					;
 5267:	  16F7	12 0F E2	SBAUD:	CALL	AXTAL		;PUT CRYSTAL ON THE STACK
 5268:	  16FA	12 0F 4C		CALL	EXPRB		;PUT THE NUMBER AFTER BAUD ON STACK
 5269:	  16FD	74 0C			MOV	A,#12
 5270:	  16FF	91 A3			ACALL	TWO_R2		;TOS = 12
 5271:	  1701	31 A2			ACALL	AMUL		;TOS = 12*BAUD
 5272:	  1703	71 FC			ACALL	ADIV		;TOS = XTAL/(12*BAUD)
 5273:	  1705	51 15			ACALL	IFIX
 5274:	  1707	D1 79			ACALL	CBIAS
 5275:	  1709	90 01 24		MOV	DPTR,#SPV
 5276:					;
 5277:	  170C	02 05 FD	S31L:	JMP	S31DP
 5278:					;
 5279:	  170F	D1 41		AFREE:	CALL	PMTOP		;PUT MTOP ON STACK
 5280:	  1711	12 05 A1		CALL	G4		;GET END ADDRESS
 5281:	  1714	A8 82			MOV	R0,DPL
 5282:	  1716	AA 83			MOV	R2,DPH
 5283:	  1718	91 A6			ACALL	TWO_EY
 5284:					;
 5285:	  171A	12 19 95	ASUB:	LCALL	FP_BASE+2	;DO FP SUB
 5286:	  171D	01 24			AJMP	FPTST
 5287:					;
 5288:	  171F	12 05 16	ALEN:	CALL	CCAL		;CALCULATE THE LEN OF THE SELECTED PROGRAM
 5289:	  1722	AA 07			MOV	R2,R7B0		;SAVE THE HIGH BYTE
 5290:	  1724	EE			MOV	A,R6		;SAVE THE LOW BYTE
 5291:	  1725	81 A5			AJMP	TWO_EX		;PUT IT ON THE STACK
 5292:					;
 5293:	  1727	A2 AF		ATIME:	MOV	C,EA		;SAVE INTERRUTS
 5294:	  1729	C2 AF			CLR	EA
 5295:	  172B	C0 47			PUSH	MILLIV		;SAVE MILLI VALUE
 5296:	  172D	AA 48			MOV	R2,TVH		;GET THE TIMER
 5297:	  172F	E5 49			MOV	A,TVL
 5298:	  1731	92 AF			MOV	EA,C		;SAVE INTERRUPTS
 5299:	  1733	91 A5			ACALL	TWO_EX		;PUT TIMER ON THE STACK
 5300:	  1735	D0 E0			POP	ACC		;GET MILLI
 5301:	  1737	91 A3			ACALL	TWO_R2		;PUT MILLI ON STACK
 5302:	  1739	74 C8			MOV	A,#200
 5303:	  173B	91 A3			ACALL	TWO_R2		;DIVIDE MILLI BY 200
 5304:	  173D	71 FC			ACALL	ADIV
 5305:					;
 5306:	  173F	12 19 93	AADD:	LCALL	FP_BASE		;DO FP ADDITION
 5307:	  1742	01 24			AJMP	FPTST		;CHECK FOR ERRORS
 5308:					;
 5309:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 130



 Line  I  Addr  Code            Source

 5310:					;**************************************************************
 5311:					;
 5312:					; Here are some error messages that were moved
 5313:					;
 5314:					;**************************************************************
 5315:					;
 5316:					;
 5317:	  1744	42 41 44 20	E1X:	DB	'BAD SYNTAX"'
	  1748	53 59 4E 54
	  174C	41 58 22
 5318:	  174F	8A		E2X:	DB	128+10
 5319:	  1750	44 49 56 49		DB	'DIVIDE BY ZERO"'
	  1754	44 45 20 42
	  1758	59 20 5A 45
	  175C	52 4F 22
 5320:					;
 5321:	  175F	41 52 52 41	E6X:	DB	'ARRAY SIZE"'
	  1763	59 20 53 49
	  1767	5A 45 22
 5322:					;
 5323:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 131



 Line  I  Addr  Code            Source

 5324:					;**************************************************************
 5325:					;
 5326:	  176A			T_BUF:	; TXA gets IBUF
 5327:					;
 5328:					;**************************************************************
 5329:					;
 5330:	  176A	75 0A 00		MOV	TXAH,#HIGH IBUF
 5331:	  176D	75 08 07		MOV	TXAL,#LOW IBUF
 5332:	  1770	22			RET
 5333:					;
 5334:					;
 5335:					;***************************************************************
 5336:					;
 5337:	  1771			CXFER:	; Transfer a program from rom to ram
 5338:					;
 5339:					;***************************************************************
 5340:					;
 5341:	  1771	12 05 16		CALL	CCAL		;GET EVERYTHING SET UP
 5342:	  1774	7A 02			MOV	R2,#HIGH PSTART
 5343:	  1776	78 00			MOV	R0,#LOW PSTART
 5344:	  1778	B1 5F			ACALL	LMOV		;DO THE TRANSFER
 5345:	  177A	12 06 5C		CALL	RCLEAR		;CLEAR THE MEMORY
 5346:					;
 5347:					; Fall thru to CRAM
 5348:					;
 5349:					;***************************************************************
 5350:					;
 5351:	  177D			CRAM:	; The command action routine - RAM - Run out of ram
 5352:					;
 5353:					;***************************************************************
 5354:					;
 5355:	  177D	C2 17			CLR	CONB		;CAN'T CONTINUE IF MODE CHANGE
 5356:	  177F	75 13 02		MOV	BOFAH,#HIGH PSTART
 5357:	  1782	75 14 00		MOV	BOFAL,#LOW PSTART
 5358:					;
 5359:					; Fall thru to Command Processor
 5360:					;
 5361:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 132



 Line  I  Addr  Code            Source

 5362:					;***************************************************************
 5363:					;
 5364:	  1785			CMND1:	; The entry point for the command processor
 5365:					;
 5366:					;***************************************************************
 5367:					;
 5368:	  1785	12 0C 39		LCALL	SPRINT+4	;WASTE AT AND HEX
 5369:	  1788	C2 2D			CLR	XBIT		;TO RESET IF NEEDED
 5370:	  178A	E4			CLR	A
 5371:	  178B	90 20 02		MOV	DPTR,#2002H	;CHECK FOR EXTERNAL TRAP PACKAGE
 5372:	  178E	93			MOVC	A,@A+DPTR
 5373:	  178F	B4 5A 03		CJNE	A,#5AH,$+6
 5374:	  1792	12 20 48		LCALL	2048H		;IF PRESENT JUMP TO LOCATION 200BH
 5375:	  1795	90 00 FB		MOV	DPTR,#RDYS	;PRINT THE READY MESSAGE
 5376:	  1798	12 06 A5		CALL	CRP		;DO A CR, THEN, PRINT FROM THE ROM
 5377:					;
 5378:	  179B	D2 2F		CMNDR:	SETB	DIRF		;SET THE DIRECT INPUT BIT
 5379:	  179D	85 3E 81		MOV	SP,SPSAV	;LOAD THE STACK
 5380:	  17A0	11 89			ACALL	CL7		;DO A CRLF
 5381:					;
 5382:	  17A2	C2 18		CMNX:	CLR	GTRD		;CLEAR BREAK
 5383:	  17A4	90 00 5E		MOV	DPTR,#5EH	;DO RUN TRAP
 5384:	  17A7	E0			MOVX	A,@DPTR
 5385:	  17A8	64 34			XRL	A,#52
 5386:	  17AA	70 03			JNZ	$+5
 5387:	  17AC	02 08 06		LJMP	CRUN
 5388:	  17AF	7D 3E			MOV	R5,#'>'		;OUTPUT A PROMPT
 5389:	  17B1	12 07 09		LCALL	TEROT
 5390:	  17B4	12 06 D0		CALL	INLINE		;INPUT A LINE INTO IBUF
 5391:	  17B7	B1 AC			CALL	PP		;PRE-PROCESS THE LINE
 5392:	  17B9	20 D5 0F		JB	F0,CMND3	;NO LINE NUMBER
 5393:	  17BC	91 E2			CALL	LINE		;PROCESS THE LINE
 5394:	  17BE	12 05 DF		LCALL	LCLR
 5395:	  17C1	20 15 DE		JB	LINEB,CMNX	;DON'T CLEAR MEMORY IF NO NEED
 5396:	  17C4	D2 15			SETB	LINEB
 5397:	  17C6	12 06 5C		LCALL	RCLEAR		;CLEAR THE MEMORY
 5398:	  17C9	80 D7			SJMP	CMNX		;LOOP BACK
 5399:					;
 5400:	  17CB	F1 6A		CMND3:	CALL	T_BUF		;SET UP THE TEXT POINTER
 5401:	  17CD	12 0E EA		CALL	DELTST		;GET THE CHARACTER
 5402:	  17D0	60 C9			JZ	CMNDR		;IF CR, EXIT
 5403:	  17D2	90 01 0D		MOV	DPTR,#CMNDD	;POINT AT THE COMMAND LOOKUP
 5404:	  17D5	B4 F0 00		CJNE	A,#T_CMND,$+3	;PROCESS STATEMENT IF NOT A COMMAND
 5405:	  17D8	40 0A			JC	CMND5
 5406:	  17DA	12 0E E0		CALL	GCI1		;BUMP TXA
 5407:	  17DD	54 0F			ANL	A,#0FH		;STRIP MSB'S FOR LOOKUP
 5408:	  17DF	12 09 64		LCALL	ISTA1		;PROCESS COMMAND
 5409:	  17E2	80 B7			SJMP	CMNDR
 5410:					;
 5411:	  17E4	02 08 17	CMND5:	LJMP	ILOOP		;CHECK FOR A POSSIBLE BREAK
 5412:					;
 5413:					;
 5414:					;
 5415:					;CONSTANTS
 5416:					;
 5417:	  17E7	88		XTALV:	DB	128+8		; DEFAULT CRYSTAL VALUE

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 133



 Line  I  Addr  Code            Source

 5418:	  17E8	00			DB	00H
 5419:	  17E9	00			DB	00H
 5420:	  17EA	92			DB	92H
 5421:	  17EB	05			DB	05H
 5422:	  17EC	11			DB	11H
 5423:					;
 5424:	  17ED	85		EXP11:	DB	85H
 5425:	  17EE	00			DB	00H
 5426:	  17EF	42			DB	42H
 5427:	  17F0	41			DB	41H
 5428:	  17F1	87			DB	87H
 5429:	  17F2	59			DB	59H
 5430:					;
 5431:	  17F3	81		EXP1:	DB	128+1		; EXP(1)
 5432:	  17F4	00			DB	00H
 5433:	  17F5	18			DB	18H
 5434:	  17F6	28			DB	28H
 5435:	  17F7	18			DB	18H
 5436:	  17F8	27			DB	27H
 5437:					;
 5438:	  17F9	7C		IPTIME:	DB	128-4		;FPROG TIMING
 5439:	  17FA	00			DB	00H
 5440:	  17FB	00			DB	00H
 5441:	  17FC	00			DB	00H
 5442:	  17FD	75			DB	75H
 5443:	  17FE	83			DB	83H
 5444:					;
 5445:	  17FF	81		PIE:	DB	128+1		;PI
 5446:	  1800	00			DB	00H
 5447:	  1801	26			DB	26H
 5448:	  1802	59			DB	59H
 5449:	  1803	41			DB	41H
 5450:	  1804	31			DB	31H		; 3.1415926
 5451:					;
 5452:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 134



 Line  I  Addr  Code            Source

 5453:					;***************************************************************
 5454:					;
 5455:					; The error messages, some have been moved
 5456:					;
 5457:					;***************************************************************
 5458:					;
 5459:	  1805	9E		E7X:	DB	128+30
 5460:	  1806	41 52 49 54		DB	'ARITH. UNDERFLOW"'
	  180A	48 2E 20 55
	  180E	4E 44 45 52
	  1812	46 4C 4F 57
	  1816	22
 5461:					;
 5462:	  1817	4D 45 4D 4F	E5X:	DB	'MEMORY ALLOCATION"'
	  181B	52 59 20 41
	  181F	4C 4C 4F 43
	  1823	41 54 49 4F
	  1827	4E 22
 5463:					;
 5464:	  1829	A8		E3X:	DB	128+40
 5465:	  182A	42 41 44 20		DB	'BAD ARGUMENT"'
	  182E	41 52 47 55
	  1832	4D 45 4E 54
	  1836	22
 5466:					;
 5467:	  1837	49 2D 53 54	EXI:	DB	'I-STACK"'
	  183B	41 43 4B 22
 5468:					;
 5469:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 135



 Line  I  Addr  Code            Source

 5470:					;***************************************************************
 5471:					;
 5472:					; The command action routine - CONTINUE
 5473:					;
 5474:					;***************************************************************
 5475:					;
 5476:	  183F	90 1F A6	CCONT:	MOV	DPTR,#E15X
 5477:	  1842	30 17 4B		JNB	CONB,ERROR	;ERROR IF CONTINUE IS NOT SET
 5478:					;
 5479:	  1845			CC1:	;used for input statement entry
 5480:					;
 5481:	  1845	85 42 0A		MOV	TXAH,INTXAH	;RESTORE TXA
 5482:	  1848	85 43 08		MOV	TXAL,INTXAL
 5483:	  184B	02 08 13		JMP	CILOOP		;EXECUTE
 5484:					;
 5485:	  184E	85 0F 83	DTEMP:	MOV	DPH,TEMP5	;RESTORE DPTR
 5486:	  1851	85 0E 82		MOV	DPL,TEMP4
 5487:	  1854	22			RET
 5488:					;
 5489:	  1855	85 83 0F	TEMPD:	MOV	TEMP5,DPH
 5490:	  1858	85 82 0E		MOV	TEMP4,DPL
 5491:	  185B	22			RET
 5492:					;
 5493:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 136



 Line  I  Addr  Code            Source

 5494:					;**************************************************************
 5495:					;
 5496:	  185C			I_DL:	; IDLE
 5497:					;
 5498:					;**************************************************************
 5499:					;
 5500:	  185C	20 2F 27		JB	DIRF,E1XX	;SYNTAX ERROR IN DIRECT INPUT
 5501:	  185F	C2 96			CLR	DACK		;ACK IDLE
 5502:					;
 5503:	  1861	43		U_ID1:	DB	01000011B	;ORL DIRECT OP CODE
 5504:	  1862	87			DB	87H		;PCON ADDRESS
 5505:	  1863	01			DB	01H		;SET IDLE BIT
 5506:	  1864	20 16 0B		JB	INTPEN,I_RET	;EXIT IF EXTERNAL INTERRUPT
 5507:	  1867	10 21 08		JBC	U_IDL,I_RET	;EXIT IF USER WANTS TO
 5508:	  186A	30 10 F4		JNB	OTS,U_ID1	;LOOP IF TIMER NOT ENABLED
 5509:	  186D	12 07 E7		LCALL	T_CMP		;CHECK THE TIMER
 5510:	  1870	40 EF			JC	U_ID1		;LOOP IF TIME NOT BIG ENOUGH
 5511:					;
 5512:	  1872	D2 96		I_RET:	SETB	DACK		;RESTORE EXECUTION
 5513:	  1874	22			RET			;EXIT IF IT IS
 5514:					;
 5515:					;
 5516:					;
 5517:	  1875	A3		ER0:	INC	DPTR		;BUMP TO TEXT
 5518:	  1876	20 2F 23		JB	DIRF,ERROR0	;CAN'T GET OUT OF DIRECT MODE
 5519:	  1879	30 13 20		JNB	ON_ERR,ERROR0	;IF ON ERROR ISN'T SET, GO BACK
 5520:	  187C	90 01 01		MOV	DPTR,#ERRLOC	;SAVE THE ERROR CODE
 5521:	  187F	12 06 6B		CALL	RC2		;SAVE ERROR AND SET UP THE STACKS
 5522:	  1882	A3			INC	DPTR		;POINT AT ERRNUM
 5523:	  1883	02 08 48		JMP	ERL4		;LOAD ERR NUM AND EXIT
 5524:					;
 5525:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 137



 Line  I  Addr  Code            Source

 5526:					;
 5527:					; Syntax error
 5528:					;
 5529:	  1886	A2 2F		E1XX:	MOV	C,DIRF		;SEE IF IN DIRECT MODE
 5530:	  1888	90 17 44		MOV	DPTR,#E1X	;ERROR MESSAGE
 5531:	  188B	80 04			SJMP	ERROR+1		;TRAP ON SET DIRF
 5532:					;
 5533:	  188D	90 18 37		MOV	DPTR,#EXI	;STACK ERROR
 5534:					;
 5535:					; Falls through
 5536:					;
 5537:					;***************************************************************
 5538:					;
 5539:					;ERROR PROCESSOR - PRINT OUT THE ERROR TYPE, CHECK TO SEE IF IN
 5540:					;                  RUN OR COMMAND MODE, FIND AND PRINT OUT THE
 5541:					;                  LINE NUMBER IF IN RUN MODE
 5542:					;
 5543:					;***************************************************************
 5544:					;
 5545:	  1890	C3		ERROR:	CLR	C		;RESET STACK
 5546:	  1891	85 3E 81		MOV	SP,SPSAV	;RESET THE STACK
 5547:	  1894	12 0C 39		LCALL	SPRINT+4	;CLEAR LINE AND AT MODE
 5548:	  1897	E4			CLR	A		;SET UP TO GET ERROR CODE
 5549:	  1898	93			MOVC	A,@A+DPTR
 5550:	  1899	10 E7 D9		JBC	ACC.7,ER0	;PROCESS ERROR
 5551:					;
 5552:	  189C	11 55		ERROR0:	ACALL	TEMPD		;SAVE THE DATA POINTER
 5553:	  189E	40 03			JC	$+5		;NO RESET IF CARRY IS SET
 5554:	  18A0	12 06 67		LCALL	RC1		;RESET THE STACKS
 5555:	  18A3	12 06 9B		CALL	CRLF2		;DO TWO CARRIAGE RET - LINE FEED
 5556:	  18A6	90 1F F8		MOV	DPTR,#ERS	;OUTPUT ERROR MESSAGE
 5557:	  18A9	12 06 A7		CALL	ROM_P
 5558:	  18AC	11 4E			CALL	DTEMP		;GET THE ERROR MESSAGE BACK
 5559:					;
 5560:	  18AE	12 06 A7	ERRS:	CALL	ROM_P		;PRINT ERROR TYPE
 5561:	  18B1	30 2F 05		JNB	DIRF,ER1	;DO NOT PRINT IN LINE IF DIRF=1
 5562:					;
 5563:	  18B4	C2 20		SERR1:	CLR	STOPBIT		;PRINT STOP THEN EXIT, FOR LIST
 5564:	  18B6	02 17 85		JMP	CMND1
 5565:					;
 5566:	  18B9	90 01 01	ER1:	MOV	DPTR,#INS	;OUTPUT IN LINE
 5567:	  18BC	12 06 A7		CALL	ROM_P
 5568:					;
 5569:					;NOW, FIND THE LINE NUMBER
 5570:					;
 5571:					;
 5572:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 138



 Line  I  Addr  Code            Source

 5573:					;
 5574:					;
 5575:	  18BF	12 0E A4		CALL	DP_B		;GET THE FIRST ADDRESS OF THE PROGRAM
 5576:	  18C2	E4			CLR	A		;FOR INITIALIZATION
 5577:					;
 5578:	  18C3	11 55		ER2:	ACALL	TEMPD		;SAVE THE DPTR
 5579:	  18C5	12 05 D6		CALL	ADDPTR		;ADD ACC TO DPTR
 5580:	  18C8	11 FC			ACALL	ER4		;R3:R1 = TXA-DPTR
 5581:	  18CA	40 06		 JC	ER3		;EXIT IF DPTR>TXA
 5582:	  18CC	60 04			JZ	ER3		;EXIT IF DPTR=TXA
 5583:	  18CE	E0			MOVX	A,@DPTR		;GET LENGTH
 5584:	  18CF	B4 01 F1		CJNE	A,#EOF,ER2	;SEE IF AT THE END
 5585:					;
 5586:	  18D2	11 4E		ER3:	ACALL	DTEMP		;PUT THE LINE IN THE DPTR
 5587:	  18D4	11 FC			ACALL	ER4		;R3:R1 = TXA - BEGINNING OF LINE
 5588:	  18D6	E9			MOV	A,R1		;GET LENGTH
 5589:	  18D7	24 0A		  	ADD	A,#10		;ADD 10 TO LENGTH, DPTR STILL HAS ADR
 5590:	  18D9	F5 45			MOV	MT1,A		;SAVE THE COUNT
 5591:	  18DB	A3			INC	DPTR		;POINT AT LINE NUMBER HIGH BYTE
 5592:	  18DC	12 16 44		CALL	PMTOP+3		;LOAD R2:R0, PUT IT ON THE STACK
 5593:	  18DF	31 A1			ACALL	FP_BASE+14	;OUTPUT IT
 5594:	  18E1	20 20 D0		JB	STOPBIT,SERR1	;EXIT IF STOP BIT SET
 5595:	  18E4	12 06 9B		CALL	CRLF2		;DO SOME CRLF'S
 5596:	  18E7	11 4E			CALL	DTEMP
 5597:	  18E9	12 10 8F		CALL	UPPL		;UNPROCESS THE LINE
 5598:	  18EC	12 10 80		CALL	CL6		;PRINT IT
 5599:	  18EF	7D 2D			MOV	R5,#'-'		;OUTPUT DASHES, THEN AN X
 5600:	  18F1	31 90			ACALL	T_L		;PRINT AN X IF ERROR CHARACTER FOUND
 5601:	  18F3	D5 45 F9		DJNZ	MT1,$-4		;LOOP UNTIL DONE
 5602:	  18F6	7D 58			MOV	R5,#'X'
 5603:	  18F8	31 90			ACALL	T_L
 5604:	  18FA	01 B4			AJMP	SERR1
 5605:					;
 5606:	  18FC	AB 0A		ER4:	MOV	R3,TXAH		;GET TEXT POINTER AND PERFORM SUBTRACTION
 5607:	  18FE	A9 08			MOV	R1,TXAL
 5608:	  1900	02 0A 0A		JMP	DUBSUB
 5609:					;
 5610:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 139



 Line  I  Addr  Code            Source

 5611:					;**************************************************************
 5612:					;
 5613:					; Interrupt driven timer
 5614:					;
 5615:					;**************************************************************
 5616:					;
 5617:	  1903	85 4A 8C	I_DR:	MOV	TH0,SAVE_T	;LOAD THE TIMER
 5618:	  1906	C5 47			XCH	A,MILLIV	;SAVE A, GET MILLI COUNTER
 5619:	  1908	04			INC	A		;BUMP COUNTER
 5620:	  1909	B4 C8 08		CJNE	A,#200,TR	;CHECK OUT TIMER VALUE
 5621:	  190C	E4			CLR	A		;FORCE ACC TO BE ZERO
 5622:	  190D	05 49			INC	TVL		;INCREMENT LOW TIMER
 5623:	  190F	B5 49 02		CJNE	A,TVL,TR	;CHECK LOW VALUE
 5624:	  1912	05 48			INC	TVH		;BUMP TIMER HIGH
 5625:					;
 5626:	  1914	C5 47		TR:	XCH	A,MILLIV
 5627:	  1916	D0 D0			POP	PSW
 5628:	  1918	32			RETI
 5629:					;
 5630:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 140



 Line  I  Addr  Code            Source

 5631:				;$INCLUDE(:F2:BAS52.CLK)
 5632:				;BEGINNING
 5633:					;**************************************************************
 5634:					;
 5635:					; The statement action routine - CLOCK
 5636:					;
 5637:					;**************************************************************
 5638:					;
 5639:	  1919	31 36		SCLOCK:	ACALL	OTST		;GET CHARACTER AFTER CLOCK TOKEN
 5640:	  191B	C2 A9			CLR	ET0
 5641:	  191D	C2 2E			CLR	C_BIT
 5642:	  191F	50 0A			JNC	SC_R		;EXIT IF A ZERO
 5643:	  1921	53 89 F0		ANL	TMOD,#0F0H	;SET UP THE MODE
 5644:	  1924	D2 2E			SETB	C_BIT		;USER INTERRUPTS
 5645:	  1926	43 A8 82		ORL	IE,#82H		;ENABLE ET0 AND EA
 5646:	  1929	D2 8C			SETB	TR0		;TURN ON THE TIMER
 5647:					;
 5648:	  192B	22		SC_R:	RET
 5649:					;
 5650:
 5651:				;END
 5652:				;$INCLUDE(:F2:BAS52.CLK)
 5653:					;***************************************************************
 5654:					;
 5655:	  192C			SUI:	; Statement USER IN action routine
 5656:					;
 5657:					;***************************************************************
 5658:					;
 5659:	  192C	31 36			ACALL	OTST
 5660:	  192E	92 1E			MOV	CIUB,C		;SET OR CLEAR CIUB
 5661:	  1930	22			RET
 5662:					;
 5663:					;***************************************************************
 5664:					;
 5665:	  1931			SUO:	; Statement USER OUT action routine
 5666:					;
 5667:					;***************************************************************
 5668:					;
 5669:	  1931	31 36			ACALL	OTST
 5670:	  1933	92 1C			MOV	COUB,C
 5671:	  1935	22			RET
 5672:					;
 5673:	  1936			OTST:	; Check for a one
 5674:					;
 5675:	  1936	12 0E DE		LCALL	GCI		;GET THE CHARACTER, CLEARS CARRY
 5676:	  1939	94 31			SUBB	A,#'1'		;SEE IF A ONE
 5677:	  193B	B3			CPL	C		;SETS CARRY IF ONE, CLEARS IT IF ZERO
 5678:	  193C	22			RET
 5679:					;
 5680:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 141



 Line  I  Addr  Code            Source

 5681:					;**************************************************************
 5682:					;
 5683:					; IBLK - EXECUTE USER SUPPLIED TOKEN
 5684:					;
 5685:					;**************************************************************
 5686:					;
 5687:	  193D	20 D4 FC	IBLK:	JB	PSW.4,IBLK-1	;EXIT IF REGISTER BANK <> 0
 5688:	  1940	20 D3 F9		JB	PSW.3,IBLK-1
 5689:	  1943	10 E7 06		JBC	ACC.7,$+9	;SEE IF BIT SEVEN IS SET
 5690:	  1946	90 00 47		MOV	DPTR,#USENT	;USER ENTRY LOCATION
 5691:	  1949	02 09 64		LJMP	ISTA1
 5692:					;
 5693:	  194C	20 E0 50		JB	ACC.0,199FH	;FLOATING POINT INPUT
 5694:	  194F	60 3F			JZ	T_L		;DO OUTPUT ON 80H
 5695:	  1951	90 19 91		MOV	DPTR,#FP_BASE-2
 5696:	  1954	73			JMP	@A+DPTR
 5697:					;
 5698:					;
 5699:					;**************************************************************
 5700:					;
 5701:					; GET_NUM - GET A NUMBER, EITHER HEX OR FLOAT
 5702:					;
 5703:					;**************************************************************
 5704:					;
 5705:	  1955	31 9D		GET_NUM:ACALL	FP_BASE+10	;SCAN FOR HEX
 5706:	  1957	50 46			JNC	FP_BASE+12	;DO FP INPUT
 5707:					;
 5708:	  1959	31 A5			ACALL	FP_BASE+18	;ASCII STRING TO R2:R0
 5709:	  195B	70 36			JNZ	H_RET
 5710:	  195D	C0 83			PUSH	DPH		;SAVE THE DATA_POINTER
 5711:	  195F	C0 82			PUSH	DPL
 5712:	  1961	31 AB			ACALL	FP_BASE+24	;PUT R2:R0 ON THE STACK
 5713:	  1963	D0 82			POP	DPL		;RESTORE THE DATA_POINTER
 5714:	  1965	D0 83			POP	DPH
 5715:	  1967	E4			CLR	A		;NO ERRORS
 5716:	  1968	22			RET			;EXIT
 5717:					;
 5718:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 142



 Line  I  Addr  Code            Source

 5719:					;**************************************************************
 5720:					;
 5721:					; WB - THE EGO MESSAGE
 5722:					;
 5723:					;**************************************************************
 5724:					;
 5725:	  1969	D7 D2		WB:	DB	'W'+80H,'R'+80H
 5726:	  196B	C9 D4 54 C5		DB	'I'+80H,'T'+80H,'T','E'+80H,'N'+80H
	  196F	CE
 5727:	  1970	20 C2 D9 20		DB	' ','B'+80H,'Y'+80H,' '
 5728:	  1974	CA CF C8 CE		DB	'J'+80H,'O'+80H,'H'+80H,'N'+80H,' '+80H
	  1978	A0
 5729:	  1979	4B C1 D4 C1		DB	'K','A'+80H,'T'+80H,'A'+80H,'U'+80H
	  197D	D5
 5730:	  197E	53 CB D9		DB	'S','K'+80H,'Y'+80H
 5731:	  1981	2C 20 49 CE		DB	', I','N'+80H,'T'+80H,'E'+80H,'L'+80H
	  1985	D4 C5 CC
 5732:	  1988	A0 C3 CF D2		DB	' '+80H,'C'+80H,'O'+80H,'R'+80H,'P'+80H
	  198C	D0
 5733:	  198D	2E 20 31 B9		DB	'. 1','9'+80H,'85'
	  1991	38 35
 5734:	  1993	22		H_RET:	RET
 5735:					;
 5736:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 143



 Line  I  Addr  Code            Source

 5737:		N      1990		ORG	1990H
 5738:					;
 5739:	  1990	02 07 09	T_L:	LJMP	TEROT
 5740:					;
 5741:		N      1F78		ORG	1F78H
 5742:					;
 5743:	  1F78	20 1A 03	CKS_I:	JB	CKS_B,CS_I
 5744:	  1F7B	02 40 1B		LJMP	401BH
 5745:					;
 5746:	  1F7E	02 20 88	CS_I:	LJMP	2088H
 5747:					;
 5748:	  1F81	4E 4F 20 44	E14X:	DB	'NO DATA"'
	  1F85	41 54 41 22
 5749:					;
 5750:	  1F89	94		E11X:	DB	128+20
 5751:	  1F8A	41 52 49 54		DB	'ARITH. OVERFLOW"'
	  1F8E	48 2E 20 4F
	  1F92	56 45 52 46
	  1F96	4C 4F 57 22
 5752:					;
 5753:	  1F9A	50 52 4F 47	E16X:	DB	'PROGRAMMING"'
	  1F9E	52 41 4D 4D
	  1FA2	49 4E 47 22
 5754:					;
 5755:	  1FA6	43 41 4E	E15X:	DB	'CAN'
 5756:	  1FA9	27			DB	27H
 5757:	  1FAA	54 20 43 4F		DB	'T CONTINUE"'
	  1FAE	4E 54 49 4E
	  1FB2	55 45 22
 5758:					;
 5759:	  1FB5	49 4E 56 41	E10X:	DB	'INVALID LINE NUMBER"'
	  1FB9	4C 49 44 20
	  1FBD	4C 49 4E 45
	  1FC1	20 4E 55 4D
	  1FC5	42 45 52 22
 5760:					;
 5761:	  1FC9	50 52 4F 4D	NOROM:	DB	'PROM MODE"'
	  1FCD	20 4D 4F 44
	  1FD1	45 22
 5762:					;
 5763:	  1FD3	2A 4D 43 53	S_N:	DB	'*MCS-51(tm) BASIC V1.1*"'
	  1FD7	2D 35 31 28
	  1FDB	74 6D 29 20
	  1FDF	42 41 53 49
	  1FE3	43 20 56 31
	  1FE7	2E 31 2A 22
 5764:					;
 5765:		N      1FF8		ORG	1FF8H
 5766:					;
 5767:	  1FF8	45 52 52 4F	ERS:	DB	'ERROR: "'
	  1FFC	52 3A 20 22
 5768:					;
 5769:				$EJECT

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 144



 Line  I  Addr  Code            Source

 5770:					;***************************************************************
 5771:					;
 5772:					XSEG	;External Ram
 5773:					;
 5774:					;***************************************************************
 5775:					;
 5776:	  0000	N      0004		DS	4
 5777:	  0004	N      0001	IBCNT:	DS	1		;LENGTH OF A LINE
 5778:	  0005	N      0002	IBLN:	DS	2		;THE LINE NUMBER
 5779:	  0007	N      0049	IBUF:	DS	LINLEN		;THE INPUT BUFFER
 5780:	  0050	N      000F	CONVT:	DS	15		;CONVERSION LOCATION FOR FPIN
 5781:					;
 5782:		N      0100		ORG	100H
 5783:					;
 5784:	  0100	N      0001	GTB:	DS	1		;GET LOCATION
 5785:	  0101	N      0001	ERRLOC:	DS	1		;ERROR TYPE
 5786:	  0102	N      0002	ERRNUM:	DS	2		;WHERE TO GO ON AN ERROR
 5787:	  0104	N      0002	VARTOP:	DS	2		;TOP OF VARIABLE STORAGE
 5788:	  0106	N      0002	ST_ALL:	DS	2		;STORAGE ALLOCATION
 5789:	  0108	N      0002	MT_ALL:	DS	2		;MATRIX ALLOCATION
 5790:	  010A	N      0002	MEMTOP:	DS	2		;TOP OF MEMORY
 5791:	  010C	N      0002	RCELL:	DS	2		;RANDOM NUMBER CELL
 5792:	  010E	N      0005		DS	FPSIZ-1
 5793:	  0113	N      0001	CXTAL:	DS	1		;CRYSTAL
 5794:	  0114	N      0005		DS	FPSIZ-1
 5795:	  0119	N      0001	FPT1:	DS	1		;FLOATINP POINT TEMP 1
 5796:	  011A	N      0005		DS	FPSIZ-1
 5797:	  011F	N      0001	FPT2:	DS	1		;FLOATING POINT TEMP 2
 5798:	  0120	N      0002	INTLOC:	DS	2		;LOCATION TO GO TO ON INTERRUPT
 5799:	  0122	N      0002	STR_AL:	DS	2		;STRING ALLOCATION
 5800:	  0124	N      0002	SPV:	DS	2		;SERIAL PORT BAUD RATE
 5801:	  0126	N      0002	TIV:	DS	2		;TIMER INTERRUPT NUM AND LOC
 5802:	  0128	N      0002	PROGS:	DS	2		;PROGRAM A PROM TIME OUT
 5803:	  012A	N      0002	IPROGS:	DS	2		;INTELLIGENT PROM PROGRAMMER TIMEOUT
 5804:	  012C	N      0001	TM_TOP:	DS	1
 5805:
 5806:					END





                     register banks used:  ---

                     no errors




ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 145





	       L I S T   O F   S Y M B O L S
	       =============================


SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
AABS				  CODE	    1381	4337
AADD				  CODE	    173F	5306
AANL				  CODE	    1476	4631
AATAN				  CODE	    11D2	3992
AC				  BIT	      D6
AC1				  CODE	    0974	2205
ACBYTE				  CODE	    139F	4383
ACC				  DATA	      E0
ACOS				  CODE	    115F	3887
ADBYTE				  CODE	    13A8	4395
ADDPTR				  CODE	    05D6	1479
ADIV				  CODE	    13FC	4484
AEL1				  CODE	    1274	4131
AELP				  CODE	    1262	4119
AEQ				  CODE	    13CD	4445
AETOX				  CODE	    1319	4256
AEXL				  CODE	    1340	4279
AEXP				  CODE	    131D	4259
AFREE				  CODE	    170F	5279
AGE				  CODE	    13D9	4453
AGET				  CODE	    149B	4665
AGT				  CODE	    13B7	4427
AI1				  CODE	    136C	4315
AI2				  CODE	    1374	4322
AI3				  CODE	    1380	4332
AINT				  CODE	    135F	4304
AL				  CODE	    0D58	3007
ALE				  CODE	    13DD	4456
ALED				  BIT	      93	 285
ALEN				  CODE	    171F	5288
ALN				  CODE	    12B2	4188
ALN11				  CODE	    12E1	4217
ALNE				  CODE	    12D7	4211
ALNL				  CODE	    12C5	4201
ALNO				  CODE	    12EA	4223
ALPAR				  CODE	    139E	4378
ALT				  CODE	    13C8	4441
AMUL				  CODE	    11A2	3943
ANE				  CODE	    13D3	4449
ANEG				  CODE	    1393	4366
ANOT				  CODE	    1488	4647
ANU				  CODE	    0D4D	3001
AORL				  CODE	    147F	4639
AP1				  CODE	    14D7	4726
APCON				  CODE	    14DB	4729
ARCAP2				  CODE	    14D1	4720
ARGF				  BIT	      24	 261
ARND				  CODE	    13E3	4463
ASGN				  CODE	    1387	4349
ASIN				  CODE	    1163	3896

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 146



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
ASQR				  CODE	    127F	4145
ASTKA				  NUMBER    0009	 199
ASTKAH				  NUMBER    0001	 334
ASUB				  CODE	    171A	5285
AT2CON				  CODE	    14C5	4710
ATAN				  CODE	    11C2	3976
ATCON				  CODE	    14C9	4714
ATIM0				  CODE	    14B3	4696
ATIM1				  CODE	    14B9	4700
ATIM2				  CODE	    14BF	4704
ATIME				  CODE	    1727	5293
ATMOD				  CODE	    14CD	4717
ATTAB				  CODE	    111C	3801
AXBYTE				  CODE	    13B0	4406
AXRL				  CODE	    148A	4649
AXTAL				  CODE	    0FE2	3554
AXTAL0				  CODE	    1649	5087
AXTAL1				  CODE	    164E	5090
AXTAL2				  CODE	    1677	5110
AXTAL3				  CODE	    1211	4043
A_D				  CODE	    1252	4103
A_IE				  CODE	    14AB	4690
A_IP				  CODE	    14AF	4693
B				  DATA	      F0
BABC				  NUMBER    0027	 292
BCHR				  CODE	    0833	1993
BCK				  CODE	    0785	1860
BELL				  NUMBER    0007	 322
BG1				  CODE	    041C	1063
BG2				  CODE	    0424	1069
BG3				  CODE	    0437	1077
BI				  BIT	      32	 275
BO				  BIT	      2C	 269
BOFAH				  NUMBER    0013	 220
BOFAL				  NUMBER    0014	 221
BR0				  CODE	    07F5	1945
BR2				  CODE	    0842	1999
BS				  NUMBER    0008	 323
B_C				  CODE	    0AAC	2450
B_TXA				  CODE	    0F2C	3410
C0				  CODE	    0CFF	2950
C0C				  CODE	    1011	3610
C0ORX1				  BIT	      34	 277
C1				  CODE	    0D06	2954
C1C				  CODE	    101C	3616
C2				  CODE	    0D0F	2959
C2C				  CODE	    101B	3614
C3C				  CODE	    1021	3620
CBIAS				  CODE	    1679	5112
CC1				  CODE	    1845	5479
CCAL				  CODE	    0516	1236
CCLR3				  CODE	    0684	1664
CCONT				  CODE	    183F	5476
CILOOP				  CODE	    0813	1973
CIPROG				  CODE	    045A	1111
CIUB				  BIT	      1E	 253

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 147



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
CI_RET				  CODE	    07BA	1893
CKS_B				  BIT	      1A	 245
CKS_I				  CODE	    1F78	5743
CL1				  CODE	    105B	3659
CL2				  CODE	    1060	3662
CL3				  CODE	    107E	3678
CL6				  CODE	    1080	3680
CL7				  CODE	    1089	3684
CLIST				  CODE	    103A	3642
CLN_UP				  CODE	    0F20	3402
CL_1				  CODE	    0675	1652
CL_2				  CODE	    0683	1662
CMND1				  CODE	    1785	5364
CMND3				  CODE	    17CB	5400
CMND5				  CODE	    17E4	5411
CMNDD				  CODE	    010D	 495
CMNDLK				  CODE	    0859	2012
CMNDR				  CODE	    179B	5378
CMNDSP				  NUMBER    004D	 314
CMNX				  CODE	    17A2	5382
CMPLK				  CODE	    11FA	4021
CN0				  CODE	    1008	3605
CNEW				  CODE	    0654	1616
CNTRLC				  NUMBER    0003	 324
CNTRLD				  NUMBER    0004	 325
CNT_S				  BIT	      35	 278
CNULL				  CODE	    0B10	2560
CNX				  CODE	    1002	3602
COB				  BIT	      1B	 246
CONB				  BIT	      17	 242
CONST				  CODE	    0FF8	3593
CONVT				  XDATA	    0050	5780
COUB				  BIT	      1C	 249
CPROG				  CODE	    0461	1115
CPS				  CODE	    0EB2	3269
CR				  NUMBER    000D	 320
CR0				  CODE	    03E3	1033
CR1				  CODE	    03F4	1044
CR2				  CODE	    0400	1050
CRAM				  CODE	    177D	5351
CRLF				  CODE	    069D	1697
CRLF2				  CODE	    069B	1695
CROM				  CODE	    0536	1279
CRP				  CODE	    06A5	1706
CRS				  CODE	    03D7	1027
CRST				  CODE	    0387	 973
CRUN				  CODE	    0806	1965
CS1				  CODE	    0B4F	2631
CSC				  CODE	    0BC5	2717
CSETUP				  CODE	    0B53	2634
CSTAKA				  CODE	    141E	4527
CSTAKA2				  CODE	    141C	4525
CSTKA				  NUMBER    0011	 215
CSTKAH				  NUMBER    0000	 335
CSTS				  CODE	    07C4	1910
CSY				  CODE	    0A26	2346

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 148



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
CS_I				  CODE	    1F7E	5746
CXFER				  CODE	    1771	5337
CXTAL				  XDATA	    0113	5793
CY				  BIT	      D7
C_1				  CODE	    0F1B	3399
C_2				  CODE	    0F16	3396
C_BIT				  BIT	      2E	 271
C_EX				  CODE	    07D8	1926
C_K				  CODE	    053A	1286
C_T2				  CODE	    145E	4599
C_TST				  CODE	    0ECF	3296
D1				  CODE	    05D4	1468
DACK				  BIT	      96	 282
DBTWO				  CODE	    1186	3917
DCMPX				  CODE	    05C4	1456
DEC3210				  CODE	    157D	4881
DEC76				  CODE	    1639	5063
DECDP				  CODE	    05BA	1437
DECDP2				  CODE	    05B8	1435
DEC_ASTKA			  CODE	    11FD	4025
DEC_R				  CODE	    157B	4878
DELTST				  CODE	    0EEA	3333
DIGIT				  NUMBER    0004	 344
DIRF				  BIT	      2F	 272
DLD				  CODE	    0623	1562
DPH				  DATA	      83
DPL				  DATA	      82
DP_B				  CODE	    0EA4	3261
DP_T				  CODE	    0EAB	3265
DRQ				  BIT	      31	 274
DT1				  CODE	    0EF1	3338
DTEMP				  CODE	    184E	5485
DTYPE				  NUMBER    0003	 338
DUBSUB				  CODE	    0A0A	2315
D_CHK				  CODE	    0DD5	3090
D_L1				  CODE	    0B00	2537
E10X				  CODE	    1FB5	5759
E11X				  CODE	    1F89	5750
E14X				  CODE	    1F81	5748
E15X				  CODE	    1FA6	5755
E16X				  CODE	    1F9A	5753
E1X				  CODE	    1744	5317
E1XX				  CODE	    1886	5529
E2X				  CODE	    174F	5318
E3X				  CODE	    1829	5464
E3XX				  CODE	    09C5	2265
E4XX				  CODE	    0BC9	2720
E4YY				  CODE	    120C	4039
E5X				  CODE	    1817	5462
E6X				  CODE	    175F	5321
E7X				  CODE	    1805	5459
EA				  BIT	      AF
EATC				  CODE	    0CEE	2933
EBIAS				  CODE	    1253	4111
EIG				  CODE	    0369	 961
EIGP				  CODE	    0E57	3172

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 149



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
EK				  CODE	    0C16	2784
ENDBIT				  BIT	      29	 266
EOF				  NUMBER    0001	 333
EP1				  CODE	    0F4E	3454
EP2				  CODE	    0F52	3457
EP3				  CODE	    0F78	3476
EP4				  CODE	    0F7A	3478
EP5				  CODE	    0F8B	3487
ER0				  CODE	    1875	5517
ER1				  CODE	    18B9	5566
ER2				  CODE	    18C3	5578
ER3				  CODE	    18D2	5586
ER4				  CODE	    18FC	5606
ERL4				  CODE	    0848	2003
ERPAR				  CODE	    0CEC	2931
ERRLK				  CODE	    04D3	1181
ERRLOC				  XDATA	    0101	5785
ERRNUM				  XDATA	    0102	5786
ERROR				  CODE	    1890	5545
ERROR0				  CODE	    189C	5552
ERRS				  CODE	    18AE	5560
ERS				  CODE	    1FF8	5767
ES				  BIT	      AC
ET0				  BIT	      A9
ET1				  BIT	      AB
EX0				  BIT	      A8
EX1				  BIT	      AA
EXA				  CODE	    0377	 963
EXC				  CODE	    037F	 965
EXI				  CODE	    1837	5467
EXP1				  CODE	    17F3	5431
EXP11				  CODE	    17ED	5424
EXPRB				  CODE	    0F4C	3452
EXTI0				  CODE	    0003
EXTI1				  CODE	    0013
E_FIND				  CODE	    0A9B	2440
F0				  BIT	      D5
FCMP				  CODE	    11F4	4017
FINDC				  CODE	    0EF7	3351
FINDCR				  CODE	    0EF5	3349
FL1				  CODE	    0ADB	2502
FL2				  CODE	    0AF4	2520
FL3				  CODE	    0AE4	2509
FNDCL2				  CODE	    0EFF	3357
FORMAT				  NUMBER    0017	 224
FPONE				  CODE	    16F0	5256
FPSIZ				  NUMBER    0006	 343
FPT1				  XDATA	    0119	5795
FPT2				  XDATA	    011F	5797
FPTS				  CODE	    1037	3633
FPTST				  CODE	    1024	3622
FP_BASE				  NUMBER    1993	 346
FS				  CODE	    13C2	4434
FSIZE				  NUMBER    0011	 348
FSTK				  CODE	    13BD	4431
FTYPE				  NUMBER    0001	 336

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 150



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
FUL1				  CODE	    15A2	4936
FULL				  CODE	    159A	4929
F_VAR				  CODE	    0611	1549
F_VAR0				  CODE	    0618	1553
F_VAR1				  CODE	    062E	1570
F_VAR2				  CODE	    063B	1582
G1				  CODE	    0587	1375
G2				  CODE	    059A	1385
G3				  CODE	    059E	1388
G4				  CODE	    05A1	1391
G5				  CODE	    05A4	1393
GC				  CODE	    0ED6	3309
GCI				  CODE	    0EDE	3315
GCI1				  CODE	    0EE0	3319
GETEND				  CODE	    0582	1371
GETLIN				  CODE	    0584	1373
GET_NUM				  CODE	    1955	5705
GLN				  CODE	    0AD9	2500
GTB				  XDATA	    0100	5784
GTRD				  BIT	      18	 243
GTX				  CODE	    1539	4806
GTYPE				  NUMBER    0002	 337
HMODE				  BIT	      37	 280
H_RET				  CODE	    1993	5734
I2				  CODE	    122D	4073
IAN				  CODE	    00F1	 483
IAT				  CODE	    0913	2149
IBCNT				  XDATA	    0004	5777
IBLK				  CODE	    193D	5687
IBLN				  XDATA	    0005	5778
IBUF				  XDATA	    0007	5779
ICLR				  CODE	    0692	1679
IE				  DATA	      A8
IE0				  BIT	      89
IE1				  BIT	      8B
IFIX				  CODE	    1215	4051
IFIXL				  CODE	    0E99	3241
IGC				  CODE	    0ED4	3307
ILOOP				  CODE	    0817	1978
IMOV				  CODE	    1558	4831
IN2				  CODE	    0E06	3128
IN2A				  CODE	    0E0B	3131
IN3				  CODE	    0E18	3137
IN3A				  CODE	    0E29	3147
IN5				  CODE	    0E49	3164
IN6				  CODE	    0E52	3168
INBIT				  BIT	      1D	 252
INC3210				  CODE	    1568	4853
INCH1				  CODE	    07A2	1881
INCHAR				  CODE	    0789	1870
INC_ASTKA			  CODE	    1241	4088
INL0				  CODE	    06CE	1741
INL1				  CODE	    06D5	1746
INL2				  CODE	    06CB	1739
INL2B				  CODE	    06E4	1755
INL6				  CODE	    06F6	1765

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 151



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
INLINE				  CODE	    06D0	1743
INLX				  CODE	    06E0	1752
INPROG				  BIT	      11	 236
INP_B				  BIT	      22	 259
INS				  CODE	    0101	 487
INSR				  CODE	    1509	4772
INT0				  BIT	      B2
INT1				  BIT	      B3
INTBIT				  BIT	      12	 237
INTELB				  BIT	      33	 276
INTERR				  CODE	    0F39	3428
INTERX				  CODE	    0940	2175
INTGER				  CODE	    0F3E	3432
INTLOC				  XDATA	    0120	5798
INTPEN				  BIT	      16	 241
INTXAH				  NUMBER    0042	 304
INTXAL				  NUMBER    0043	 305
IP				  DATA	      B8
IPROGS				  XDATA	    012A	5803
IPTIME				  CODE	    17F9	5438
IRAMTOP				  NUMBER    00FF	 315
ISAV				  BIT	      2B	 268
ISTA0				  CODE	    0958	2187
ISTA1				  CODE	    0964	2193
ISTAT				  CODE	    0900	2140
ISTAX				  CODE	    0924	2158
ISTAX1				  CODE	    0929	2161
ISTAY				  CODE	    092D	2165
IST_CAL				  CODE	    09EF	2300
IT0				  BIT	      88
IT1				  BIT	      8A
ITRAP				  CODE	    086E	2036
ITRET				  CODE	    0F49	3438
I_DL				  CODE	    185C	5496
I_DR				  CODE	    1903	5617
I_L				  CODE	    084D	2006
I_PI				  CODE	    0E9E	3248
I_RET				  CODE	    1872	5512
I_S				  CODE	    093B	2172
I_T0				  BIT	      26	 263
JKBIT				  BIT	      28	 265
L20DPI				  CODE	    056B	1320
L31DPI				  CODE	    05B2	1422
LCLR				  CODE	    05DF	1488
LDPTRI				  CODE	    05A8	1406
LD_A				  CODE	    0FF2	3582
LD_T				  CODE	    057A	1347
LF				  NUMBER    000A	 321
LIN1				  CODE	    154E	4819
LINE				  CODE	    14E2	4745
LINEB				  BIT	      15	 240
LINLEN				  NUMBER    0049	 332
LMOV				  CODE	    155F	4847
LNTAB				  CODE	    16A7	5157
LN_D				  CODE	    130D	4241
LP				  BIT	      97	 281

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 152



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
LPB				  BIT	      19	 244
LTOUT1				  CODE	    0742	1818
LTX				  CODE	    151A	4787
L_RET				  CODE	    0EF4	3340
MEMTOP				  XDATA	    010A	5790
MILLIV				  NUMBER    0047	 308
MT1				  NUMBER    0045	 306
MT2				  NUMBER    0046	 307
MT_ALL				  XDATA	    0108	5789
MU1				  CODE	    135D	4295
N4				  CODE	    0BCE	2723
NLC				  CODE	    0772	1846
NMOV				  CODE	    158F	4911
NOGO				  CODE	    0566	1314
NOPASS				  CODE	    0F2A	3407
NOROM				  CODE	    1FC9	5761
NO_C				  BIT	      30	 273
NTWO				  CODE	    1153	3866
NULL				  NUMBER    0000	 326
NULLCT				  NUMBER    0015	 222
NUMC				  CODE	    0C21	2791
NUMC1				  CODE	    0C2A	2796
ONE				  CODE	    0E97	3235
ON_ERR				  BIT	      13	 238
OOPS				  CODE	    0D43	2986
OPBOL				  CODE	    00CD	 440
OPTAB				  CODE	    0057	 372
OTI				  BIT	      14	 239
OTS				  BIT	      10	 235
OTST				  CODE	    1936	5673
OV				  BIT	      D2
P				  BIT	      D0
P0				  DATA	      80
P1				  DATA	      90
P2				  DATA	      A0
P3				  DATA	      B0
PAREN_INT			  CODE	    0EA0	3254
PCL				  CODE	    142B	4542
PCON				  DATA	      87
PG1				  CODE	    0495	1144
PG11				  CODE	    0505	1213
PG2				  CODE	    049D	1149
PG3				  CODE	    04A5	1154
PG4				  CODE	    04B1	1161
PG5				  CODE	    04C3	1172
PG6				  CODE	    04C8	1176
PG7				  CODE	    04D6	1184
PG8				  CODE	    043F	1094
PG9				  CODE	    04F0	1202
PGR				  CODE	    0491	1141
PGU				  CODE	    050C	1223
PHEAD				  NUMBER    0016	 223
PIE				  CODE	    17FF	5445
PIPI				  CODE	    1471	4621
PLNEXP				  CODE	    1422	4530
PMTOP				  CODE	    1641	5076

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 153



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
PN0				  CODE	    06BB	1724
PN1				  CODE	    06B1	1715
POLY1				  CODE	    1195	3935
POLYC				  CODE	    118D	3926
POPAS				  CODE	    0FDC	3551
POP_T1				  CODE	    143A	4559
POTWO				  CODE	    1184	3915
PP				  CODE	    15AC	4953
PPL				  CODE	    15BF	4964
PPL1				  CODE	    15C4	4967
PPL2				  CODE	    15C9	4972
PPL3				  CODE	    15E2	4989
PPL4				  CODE	    15E7	4995
PPL6				  CODE	    1614	5028
PPL7				  CODE	    1621	5036
PPL9				  CODE	    1635	5049
PPLX				  CODE	    15FB	5013
PPLY				  CODE	    1608	5019
PPX				  CODE	    15D7	4980
PRNTCR				  CODE	    06B9	1722
PROGS				  XDATA	    0128	5802
PROMP				  BIT	      94	 284
PROMV				  BIT	      95	 283
PS				  BIT	      BC
PSTART				  NUMBER    0200	 347
PSW				  DATA	      D0
PT0				  BIT	      B9
PT1				  BIT	      BB
PTIME				  CODE	    0701	1772
PUSHAS				  CODE	    0FE6	3561
PUSHC				  CODE	    1425	4538
PUSHCS				  CODE	    0BB9	2708
PUSH_ONE			  CODE	    1435	4552
PUSH_T1				  CODE	    1441	4565
PX0				  BIT	      B8
PX1				  BIT	      BA
P_E				  CODE	    0CE8	2928
P_T2				  CODE	    1448	4571
P_Z				  CODE	    1367	4312
R0B0				  NUMBER    0000	 186
R1B0				  NUMBER    0001	 187
R2B0				  NUMBER    0002	 188
R3B0				  NUMBER    0003	 189
R3CK				  CODE	    09DD	2281
R4B0				  NUMBER    0004	 190
R5B0				  NUMBER    0005	 191
R6B0				  NUMBER    0006	 192
R76S				  CODE	    0DF8	3108
R7B0				  NUMBER    0007	 193
RB8				  BIT	      9A
RC1				  CODE	    0667	1636
RC2				  CODE	    066B	1639
RCELL				  XDATA	    010C	5791
RCL				  CODE	    0889	2055
RCL1				  CODE	    0890	2059
RCLEAR				  CODE	    065C	1630

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 154



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
RD				  BIT	      B7
RDYS				  CODE	    00FB	 485
RECIP				  CODE	    126E	4127
REN				  BIT	      9C
RESET				  CODE	    0000
RETBIT				  BIT	      25	 262
RF1				  CODE	    0556	1301
RF2				  CODE	    055D	1307
RF3				  CODE	    0563	1312
RFX				  CODE	    055C	1305
RI				  BIT	      98
RL1				  CODE	    0AFC	2533
RLINE				  CODE	    0AFA	2531
RMOV				  CODE	    1573	4873
RO1				  CODE	    053D	1288
ROMADR				  NUMBER    8000	 339
ROMFD				  CODE	    0553	1299
ROM_P				  CODE	    06A7	1708
RROM				  CODE	    07BC	1902
RS0				  BIT	      D3
RS1				  BIT	      D4
RTST				  CODE	    0ACF	2482
RTXAH				  NUMBER    0012	 216
RTXAL				  NUMBER    0010	 214
RV				  CODE	    11A7	3948
RXD				  BIT	      B0
S13				  CODE	    0D46	2988
S20DP				  CODE	    1416	4511
S31DP				  CODE	    05FD	1517
S31DP2				  CODE	    05FB	1515
S31L				  CODE	    170C	5277
SA				  CODE	    0D24	2973
SAVE_T				  NUMBER    004A	 311
SBAUD				  CODE	    16F7	5267
SBUF				  DATA	      99
SCALL				  CODE	    0E6C	3192
SCLOCK				  CODE	    1919	5639
SCLR				  CODE	    0687	1668
SCON				  DATA	      98
SC_R				  CODE	    192B	5648
SD0				  CODE	    0D65	3015
SDI				  CODE	    0DC5	3081
SDIMX				  CODE	    0D6A	3018
SE0				  CODE	    0CC7	2894
SERR1				  CODE	    18B4	5563
SETREG				  CODE	    1245	4095
SF2				  CODE	    0A5B	2387
SF3				  CODE	    0A7A	2404
SFOR				  CODE	    0A44	2375
SGOSUB				  CODE	    0B35	2610
SGOTO				  CODE	    0AB2	2462
SGS0				  CODE	    0B37	2612
SGS1				  CODE	    0B3D	2616
SGT1				  CODE	    0AB4	2464
SGT2				  CODE	    0AC1	2472
SIF				  CODE	    0A8E	2433

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 155



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
SIN0				  CODE	    11EE	4006
SINPUT				  CODE	    0DFE	3122
SINT				  CODE	    0023
SINTAB				  CODE	    16CC	5208
SLET				  CODE	    0976	2215
SLET0				  CODE	    09CA	2268
SLET1				  CODE	    09CE	2271
SLET2				  CODE	    09D0	2273
SM				  CODE	    0C67	2844
SM0				  BIT	      9F
SM1				  BIT	      9E
SM2				  BIT	      9D
SNEXT				  CODE	    0B67	2652
SONERR				  CODE	    1401	4490
SONEXT				  CODE	    140B	4502
SOT				  CODE	    0E5F	3178
SP				  DATA	      81
SP0				  CODE	    0C44	2821
SP1				  CODE	    0C4B	2826
SP2				  CODE	    0C47	2823
SP4				  CODE	    0C4F	2829
SP6				  CODE	    0C5A	2835
SP7				  CODE	    0C5F	2838
SP8				  CODE	    0C7E	2855
SP9				  CODE	    0CE0	2915
SP9A				  CODE	    0CE7	2920
SPEOP				  CODE	    09E1	2284
SPH0				  CODE	    0C31	2807
SPH1				  CODE	    0C33	2809
SPINT				  BIT	      1F	 256
SPOP				  CODE	    0A85	2420
SPRINT				  CODE	    0C35	2811
SPSAV				  NUMBER    003E	 300
SPUSH				  CODE	    0A7E	2414
SPV				  XDATA	    0124	5800
SP_H				  NUMBER    004B	 312
SP_L				  NUMBER    004C	 313
SQ				  CODE	    0C85	2859
SQR1				  CODE	    1295	4158
SQR2				  CODE	    129C	4165
SQR4				  CODE	    129F	4170
SQ_ERR				  CODE	    127C	4136
SR0				  CODE	    0B1C	2586
SRD				  CODE	    0BF1	2762
SRD0				  CODE	    0BED	2759
SRD1				  CODE	    0BFA	2767
SRD2				  CODE	    0BFC	2769
SRD4				  CODE	    0C07	2776
SRD5				  CODE	    0C0E	2780
SRD6				  CODE	    0C19	2786
SREAD				  CODE	    0BEB	2757
SRESTR				  CODE	    0BD6	2733
SRETI				  CODE	    0B16	2575
SRETRN				  CODE	    0B18	2583
SRT				  CODE	    120B	4037
SS				  CODE	    0D1B	2968

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 156



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
SSOOP				  CODE	    09A5	2243
SSTOP				  CODE	    085C	2020
SSTOP0				  CODE	    0864	2024
STACKTP				  NUMBER    00FE	 316
STATD				  CODE	    0121	 513
STEROT				  CODE	    0707	1789
STESIZ				  NUMBER    0009	 345
STJ				  CODE	    0020	 123
STK				  CODE	    0041	 167
STONE				  CODE	    1684	5129
STONE1				  CODE	    1689	5136
STOPBIT				  BIT	      20	 257
STP				  CODE	    00EC	 481
STQ				  CODE	    0033	 159
STRING				  CODE	    0604	1528
STRIP				  CODE	    11CC	3982
STR_AL				  XDATA	    0122	5799
STS				  CODE	    003E	 165
STU				  CODE	    0044	 170
ST_A				  CODE	    0FEE	3572
ST_ALL				  XDATA	    0106	5788
SUI				  CODE	    192C	5655
SUNTIL				  CODE	    0B09	2551
SUO				  CODE	    1931	5665
SWAP_ASTKA			  CODE	    144C	4576
SWHILE				  CODE	    0B04	2547
SX				  CODE	    0C8A	2862
S_0				  CODE	    098A	2226
S_1				  CODE	    09BA	2258
S_3				  CODE	    0999	2236
S_4				  CODE	    09A7	2245
S_5				  CODE	    09B5	2255
S_C				  CODE	    0EC8	3284
S_C_1				  CODE	    0E7B	3204
S_DO				  CODE	    0F0E	3383
S_E				  CODE	    0994	2232
S_L				  CODE	    1453	4586
S_LEN				  NUMBER    003F	 301
S_N				  CODE	    1FD3	5763
S_ON				  CODE	    0CF4	2940
S_WU				  CODE	    0B0B	2553
T0				  BIT	      B4
T1				  BIT	      B5
TB				  CODE	    15A7	4939
TB8				  BIT	      9B
TBR				  CODE	    158B	4898
TBYTE				  CODE	    1588	4895
TCON				  DATA	      88
TEMP1				  NUMBER    000B	 204
TEMP2				  NUMBER    000C	 205
TEMP3				  NUMBER    000D	 206
TEMP4				  NUMBER    000E	 207
TEMP5				  NUMBER    000F	 208
TEMPD				  CODE	    1855	5489
TEMP_COMP			  CODE	    130E	4245
TEROT				  CODE	    0709	1791

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 157



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
TEROT1				  CODE	    075E	1834
TEROT2				  CODE	    076B	1841
TF0				  BIT	      8D
TF1				  BIT	      8F
TH0				  DATA	      8C
TH1				  DATA	      8D
THREE				  CODE	    0E81	3211
TI				  BIT	      99
TIMER0				  CODE	    000B
TIMER1				  CODE	    001B
TIMER_LOAD			  CODE	    0527	1261
TIV				  XDATA	    0126	5801
TL0				  DATA	      8A
TL1				  DATA	      8B
TMOD				  DATA	      89
TMR0				  NUMBER    00C8	 868
TMR1				  NUMBER    00C9	 872
TMR2				  NUMBER    00CA	 876
TM_TOP				  XDATA	    012C	5804
TOKTAB				  CODE	    0173	 562
TR				  CODE	    1914	5626
TR0				  BIT	      8C
TR1				  BIT	      8E
TRC2				  NUMBER    00CE	 896
TT2C				  NUMBER    00CB	 884
TTC				  NUMBER    00CC	 888
TTIME				  CODE	    1159	3873
TTM				  NUMBER    00CD	 892
TVH				  NUMBER    0048	 309
TVL				  NUMBER    0049	 310
TWO				  CODE	    0E8E	3224
TWOL				  CODE	    1493	4657
TWO_EX				  CODE	    14A5	4677
TWO_EY				  CODE	    14A6	4680
TWO_R2				  CODE	    14A3	4674
TXAH				  NUMBER    000A	 200
TXAL				  NUMBER    0008	 198
TXD				  BIT	      B1
TXX				  CODE	    0757	1830
T_1				  CODE	    0732	1809
T_ADD				  NUMBER    00E3	 749
T_ASC				  NUMBER    00D1	 908
T_BIT				  BIT	      92	 286
T_BUF				  CODE	    176A	5326
T_CHR				  NUMBER    00D3	 918
T_CMND				  NUMBER    00F0	 923
T_CMP				  CODE	    07E7	1934
T_CR				  NUMBER    00AA	 717
T_DATA				  NUMBER    009C	 664
T_DIR				  NUMBER    0090	 627
T_DP				  CODE	    0EC1	3278
T_ELSE				  NUMBER    00A8	 709
T_EQU				  NUMBER    00EA	 771
T_F1				  CODE	    0AA6	2446
T_GOSB				  NUMBER    009F	 674
T_GOTO				  NUMBER    0083	 577

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 158



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
T_HH				  NUMBER    0040	 302
T_IE				  NUMBER    00C6	 860
T_IP				  NUMBER    00C7	 864
T_L				  CODE	    1990	5739
T_LAST				  NUMBER    00A4	 691
T_LL				  NUMBER    0041	 303
T_LPAR				  NUMBER    00E0	 739
T_MTOP				  NUMBER    00C4	 856
T_NEG				  NUMBER    00E9	 769
T_P1				  NUMBER    00CF	 900
T_PC				  NUMBER    00D0	 904
T_REM				  NUMBER    0096	 645
T_SPC				  NUMBER    00A9	 713
T_STEP				  NUMBER    00A7	 705
T_STOP				  NUMBER    0090	 623
T_SUB				  NUMBER    00E5	 756
T_T				  CODE	    08BB	2097
T_T1				  CODE	    08D9	2111
T_T2				  CODE	    08E7	2119
T_TAB				  NUMBER    00A4	 693
T_THEN				  NUMBER    00A5	 697
T_TIME				  NUMBER    00C5	 880
T_TO				  NUMBER    00A6	 701
T_TRAP				  CODE	    08ED	2124
T_ULAST				  NUMBER    00BE	 835
T_UOP				  NUMBER    00B0	 791
T_USE				  NUMBER    00D2	 912
T_XTAL				  NUMBER    00C3	 852
T_X_S				  CODE	    0B41	2619
U3				  CODE	    0CA4	2874
U4				  CODE	    0CA8	2877
U5				  CODE	    0CB2	2882
U5A				  CODE	    0CC9	2896
U6				  CODE	    0CD6	2908
U7				  CODE	    0CD8	2910
U8				  CODE	    0CD2	2905
U8A				  CODE	    0CCD	2900
U8B				  CODE	    0CCF	2902
UBIT				  BIT	      2A	 267
UE				  CODE	    1505	4767
UOPBOL				  CODE	    00DE	 459
UPB				  BIT	      27	 264
UPP0				  CODE	    10A0	3704
UPP1				  CODE	    10CF	3729
UPP1A				  CODE	    10CB	3726
UPP2				  CODE	    10DE	3736
UPP3				  CODE	    10F3	3749
UPP4				  CODE	    10FF	3757
UPP7				  CODE	    1113	3769
UPP7A				  CODE	    1111	3767
UPP8				  CODE	    1115	3771
UPP9				  CODE	    10BF	3719
UPPL				  CODE	    108F	3695
UPRNT				  CODE	    06B7	1720
UP_2				  CODE	    10E9	3743
UP_3				  CODE	    10EC	3745

ASEM-51 V1.2                                        Copyright (c) 1996 by W.W. Heinz                                        PAGE 159



SYMBOL				  TYPE     VALUE	LINE
------------------------------------------------------------
USENT				  CODE	    0047	 353
U_ID1				  CODE	    1861	5503
U_IDL				  BIT	      21	 258
V4				  CODE	    0DBD	3074
VAR				  CODE	    0D6E	3021
VAR1				  CODE	    0D70	3023
VAR2				  CODE	    0DA3	3055
VARB				  CODE	    0A15	2331
VARCOP				  CODE	    1464	4611
VARD				  CODE	    0A18	2333
VARTOP				  XDATA	    0104	5787
VAR_ER				  CODE	    0F0A	3373
VX				  CODE	    0D89	3042
VY				  CODE	    0D7D	3032
V_C				  CODE	    1466	4613
WB				  CODE	    1969	5725
WCR				  CODE	    0F05	3362
WE				  CODE	    0F4A	3441
WR				  BIT	      B6
X3120				  CODE	    0DB6	3066
X31DP				  CODE	    0571	1333
XBILT				  CODE	    0FC1	3528
XBIT				  BIT	      2D	 270
XLPAR				  CODE	    0FCD	3534
XOP				  CODE	    0F8F	3492
XOP1				  CODE	    0F99	3498
XOP2				  CODE	    0FB8	3521
XOP3				  CODE	    0FD3	3538
XPOP				  CODE	    0FDA	3543
XTALV				  CODE	    17E7	5417
XXI				  CODE	    0B6F	2657
X_TR				  CODE	    0BDE	2740
ZRO				  CODE	    04E0	1190
ZSURP				  BIT	      36	 279
