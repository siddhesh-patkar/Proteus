MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  1


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00001               LIST    p=16F84 ; PIC16F844 is the target processor
                    00002 
                    00003               #include "P16F84.INC" ; Include header file
                    00001         LIST
                    00002 ; P16F84.INC  Standard Header File, Version 2.00    Microchip Technology, Inc.
                    00136         LIST
                    00004 
                    00005               CBLOCK 0x10   ; Temporary storage
  00000010          00006                  state
  00000011          00007                  secs
  00000012          00008                  mins
  00000013          00009                  hours
  00000014          00010                  ticks
  00000015          00011                  idc
  00000016          00012                  bcd
                    00013               ENDC
                    00014 
                    00015 ; Constants for bit allocation. The BIT_x constants are actual bit numbers and
                    00016 ; the MASK_x are bit masks for the same bit.
  00000000          00017 BIT_HSEL      EQU H'0000'
  00000001          00018 BIT_TSET      EQU H'0001'
  00000002          00019 BIT_HSET      EQU H'0002'
  00000003          00020 BIT_MSET      EQU H'0003'
                    00021 
  00000000          00022 BIT_H24       EQU H'0000'
  00000001          00023 BIT_PM        EQU H'0001'
  00000002          00024 BIT_SET       EQU H'0002'
  00000003          00025 BIT_HSB       EQU H'0003'
                    00026 
  00000001          00027 MASK_H24      EQU H'0001'
  00000002          00028 MASK_PM       EQU H'0002'
  00000004          00029 MASK_SET      EQU H'0004'
  00000008          00030 MASK_HSB      EQU H'0008'
                    00031 
                    00032 
                    00033 ; Macro to generate a MOVLW instruction that also causes a model break:
                    00034 break         MACRO arg
                    00035               DW    0x3100 | (arg & H'FF')
                    00036               ENDM
                    00037 
0000                00038               ORG   0
0000 2805           00039 entrypoint    goto  initialise
                    00040 
0004                00041               ORG   4
0004 2821           00042 intvector     goto    clock
                    00043 
0005                00044 initialise    ; Register set up:
0005 0103           00045               clrw                    ; Zero.
0006 0085           00046               movwf   PORTA           ; Ensure PORTA is zero before we enable it.
0007 0086           00047               movwf   PORTB           ; Ensure PORTB is zero before we enable it.
0008 1683           00048               bsf     STATUS,RP0      ; Select Bank 1
0009 301F           00049               movlw   H'1F'           ; Mask for PORTA inputs/outputs.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  2


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

000A 0085           00050               movwf   TRISA           ; Set TRISA register.
000B 3001           00051               movlw   H'01'           ; Mask for PORTA inputs/outputs.
Message[302]: Register in operand not in bank 0.  Ensure that bank bits are correct.
000C 0086           00052               movwf   TRISB           ; Set TRISB register.
000D 1283           00053               bcf     STATUS,RP0      ; Reselect Bank 0.
                    00054 
                    00055               ; Initialise clock:
000E 0190           00056               clrf    state
000F 1590           00057               bsf     state,BIT_HSB
0010 3000           00058               movlw   D'0'
0011 0093           00059               movwf   hours
0012 3000           00060               movlw   D'0'
0013 0092           00061               movwf   mins
0014 3000           00062               movlw   D'0'
0015 0091           00063               movwf   secs
                    00064 
                    00065               ; Clear 50Hz tick count:
0016 0194           00066               clrf    ticks
                    00067 
                    00068               ; Clear interrupt disable count (idc) semaphore:
0017 0195           00069               clrf    idc
                    00070 
                    00071               ; Initialise display:
0018 20CE           00072               call    wr_hours
0019 20BF           00073               call    wr_mins
001A 20B0           00074               call    wr_secs
001B 20DD           00075               call    wr_state
                    00076 
                    00077               ; Finally initialise interrupts for clock on RB0/INT pin:
001C 3090           00078               movlw   H'90'
001D 008B           00079               movwf   INTCON
                    00080 
001E                00081 start         ; When not processing an interrupt we sit and check input pins:
001E 2075           00082               call    chk_tset        ; Time set select active?
001F 2044           00083               call    chk_hsel        ; H12/H24 display format select active?
0020 281E           00084               goto    start
                    00085 
                    00086 
                    00087 ;------------------------------------------------------------------------------
                    00088 ; Interrupt handler. We come here for every tick of the time base.
                    00089 
0021                00090 clock         ; Toggle half-second flag and set state outputs:
0021 0A94           00091               incf    ticks,F         ; Increment clock ticks.
0022 0814           00092               movf    ticks,W         ; Get ticks value.
0023 3C19           00093               sublw   D'25'           ; Is it 25 (W=25-W)?
0024 1D03           00094               btfss   STATUS,Z        ; Test zero flag.
0025 2841           00095               goto    endclock        ; Return.
                    00096 
0026                00097 toggle_hs     ; Half second - toggle HS flag, write it and return:
0026 0194           00098               clrf    ticks           ; Reset timebase,
0027 0810           00099               movf    state,W         ; Get state.
0028 3A08           00100               xorlw   MASK_HSB        ; Toggle half-second bit.
0029 0090           00101               movwf   state           ; Save it back to register.
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  3


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

002A 20DD           00102               call    wr_state        ; Display it.
002B 0810           00103               movf    state,W         ; Get state.
002C 1D90           00104               btfss   state,BIT_HSB   ; Is bit now clear?
002D 2841           00105               goto    endclock        ; Return.
                    00106 
002E                00107 inc_secs      ; Incrmement seconds...
002E 0A91           00108               incf    secs,F          ; Increment seconds count.
002F 0811           00109               movf    secs,W          ; Get it into W.
0030 3C3C           00110               sublw   D'60'           ; Is it 60 (W=60-W)?
0031 1903           00111               btfsc   STATUS,Z        ; Test zero flag, skip clear if no set.
0032 2835           00112               goto    reset_secs      ; Clear seconds, increment minutes.
0033 20B0           00113               call    wr_secs         ; Write seconds it to display.
0034 2841           00114               goto    endclock        ; Done.
                    00115 
0035 0191           00116 reset_secs    clrf    secs
0036 20B0           00117               call    wr_secs         ; Write seconds to display.
                    00118 
0037 0A92           00119               incf    mins,F          ; Increment minute count.
0038 0812           00120               movf    mins,W          ; Get it into W.
0039 3C3C           00121               sublw   D'60'           ; Is it 60 (W=60-W)?
003A 1903           00122               btfsc   STATUS,Z        ; Test zero flag, skip clear if no set.
003B 283E           00123               goto    reset_mins      ; Clear minutes, increment hours.
003C 20BF           00124               call    wr_mins         ; Write minutes it to display.
003D 2841           00125               goto    endclock        ; Done.
                    00126 
003E 0192           00127 reset_mins    clrf    mins            ; Reset minute count to zero.
003F 20BF           00128               call    wr_mins         ; Write minutes to display.
                    00129 
0040 2099           00130               call    inc_hours       ; Increment hours, display it with PM flag.
                    00131               
0041 3090           00132 endclock      movlw   H'90'
0042 008B           00133               movwf   INTCON
0043 0009           00134               retfie                  ; Return
                    00135 
                    00136 ;------------------------------------------------------------------------------
                    00137 ; Subroutine. Check the state of the HSEL input and set h12/h24 format as
                    00138 ; required.
                    00139 
0044 1805           00140 chk_hsel      btfsc   PORTA,BIT_HSEL  ; Test 12/24 select.
0045 2857           00141               goto    set_h12         ; H12 set so switch to 12 hour format.
                    00142               ; fall through          ; H12 not set so switch to 24 hour format.
                    00143 
0046 1810           00144 set_h24       btfsc   state,BIT_H24   ; Are we on 12 hour format?
0047 3400           00145               retlw   0               ; No, so no need to do anything...
                    00146 
0048 138B           00147               bcf     INTCON,GIE      ; Disable interrupts.
0049 0A95           00148               incf    idc,F           ; Increment count of number of disables.
004A 1410           00149               bsf     state,BIT_H24   ; Clear h12 flag.
                    00150 
004B 0813           00151               movf    hours,W         ; Get hours value.
004C 3C0C           00152               sublw   D'12'           ; Is it 12:xx?
004D 1903           00153               btfsc   STATUS,Z        ; Test zero flag.
004E 0193           00154               clrf    hours           ; Reset to zero.
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  4


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

004F 0813           00155               movf    hours,W         ; Get hours value.
0050 1890           00156               btfsc   state,BIT_PM    ; Is the PM indicator set?
0051 3E0C           00157               addlw   D'12'           ; Add 12 to get 24 hour value.
0052 0093           00158               movwf   hours           ; Save result (does nothing for AM).
0053 1090           00159               bcf     state,BIT_PM    ; Clear PM flag.
0054 20CE           00160               call    wr_hours        ; Write hours.
0055 20DD           00161               call    wr_state        ; Write H12 state and PM state.
0056 2870           00162               goto    chk_hsel_iec    ; Done.
                    00163 
0057 1C10           00164 set_h12       btfss   state,BIT_H24   ; Are we on 12 hour format?
0058 3400           00165               retlw   0               ; Yes, so no need to do anything...
                    00166 
0059 138B           00167               bcf     INTCON,GIE      ; Disable interrupts.
005A 0A95           00168               incf    idc,F           ; Increment count of number of disables.
005B 1010           00169               bcf     state,BIT_H24   ; Set h12 flag.
                    00170 
005C 0813           00171               movf    hours,W         ; Get hour value.
005D 3C0B           00172               sublw   D'11'           ; W=11-W. C is clear for a borrow (W>=12).
005E 1C03           00173               btfss   STATUS,C        ; Test carry flag.
005F 2868           00174               goto    set_h12_pm      ; Set PM.
                    00175 
0060 1090           00176 set_h12_am    bcf     state,BIT_PM    ; Clear PM bit.
0061 0813           00177               movf    hours,W         ; Get hours.
0062 1903           00178               btfsc   STATUS,Z        ; Is it zero?
0063 3E0C           00179               addlw   D'12'           ; Yes, add 12 to get 00:xx to 12:xx.
0064 0093           00180               movwf   hours           ; Save any result.
0065 20CE           00181               call    wr_hours        ; Display hours.
0066 20DD           00182               call    wr_state        ; Display H12 and PM states.
0067 2870           00183               goto    chk_hsel_iec    ; Done.
                    00184 
0068 1490           00185 set_h12_pm    bsf     state,BIT_PM    ; Set PM bit.
0069 300C           00186               movlw   D'12'           ; Constant.
006A 0293           00187               subwf   hours,F         ; hours=hours-12 (23..12 -> 11..0).
006B 1903           00188               btfsc   STATUS,Z        ; Zero set?
006C 0093           00189               movwf   hours           ; Yes, so reset to '12'.
006D 20CE           00190               call    wr_hours        ; No, so leave hours alone and display it.
006E 20DD           00191               call    wr_state        ; Display H12 and PM states.
006F 2870           00192               goto    chk_hsel_iec    ; Done.
                    00193 
0070 0B95           00194 chk_hsel_iec  decfsz  idc,F           ; Decrement idc. If zero we can reenable interrupts.
0071 3401           00195               retlw   1               ; Return without enabling interrupts.
                    00196 
0072 3090           00197 chk_hsel_done movlw   H'90'           ; Constant for GIE and T0IE.
0073 008B           00198               movwf   INTCON          ; Set interrupt register.
0074 3401           00199               retlw   1               ; Return.
                    00200 
                    00201 ;------------------------------------------------------------------------------
0075 1885           00202 chk_tset      btfsc   PORTA,BIT_TSET  ; Set mode?
0076 3400           00203               retlw   0
                    00204 
0077 138B           00205               bcf     INTCON,GIE      ; Disable interrupts.
0078 0A95           00206               incf    idc,F           ; Increment count of number of disables.
0079 1510           00207               bsf     state,BIT_SET   ; Set the 'set mode' bit.
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  5


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

007A 0191           00208               clrf    secs            ; Setting time resets seconds count.
007B 20B0           00209               call    wr_secs         ; Display it.
007C 1190           00210               bcf     state,BIT_HSB   ; Clear seconds toggle.
007D 20DD           00211               call    wr_state        ; Update the state output latch.
                    00212 
007E 2044           00213 set_loop      call    chk_hsel        ; Check for H12/H24 display change.
007F 1D85           00214               btfss   PORTA,BIT_MSET  ; If pin is high then switch is open.
0080 288C           00215               goto    set_mins        ; Bit not set, switch closed, set minutes.
0081 1D05           00216               btfss   PORTA,BIT_HSET  ; If pin is high then switch is open.
0082 2895           00217               goto    set_hours       ; Bit not set, switch closed, set hours.
0083 1C85           00218               btfss   PORTA,BIT_TSET  ; If pin is high then switch is open.
0084 287E           00219               goto    set_loop        ; Bit not set, switch closed, loop.
                    00220 
0085 1110           00221               bcf     state,BIT_SET   ; Clear the 'set mode' bit.
0086 20DD           00222               call    wr_state        ; Update the state output latch.
                    00223 
0087 0B95           00224 chk_tset_idc  decfsz  idc,F           ; Decrement idc. If zero we can reenable interrupts.
0088 3401           00225               retlw   1               ; Return without enabling interrupts.
0089 3090           00226 chk_tset_done movlw   H'90'           ; Constant for GIE and T0IE.
008A 008B           00227               movwf   INTCON          ; Set interrupt register.
008B 3401           00228               retlw   1               ; Return.
                    00229 
008C 0A92           00230 set_mins      incf    mins,F          ; Increment minute count.
008D 0812           00231               movf    mins,W          ; Get it into W.
008E 3C3C           00232               sublw   D'60'           ; Is it 60 (W=60-W)?
008F 1903           00233               btfsc   STATUS,Z        ; Test zero flag, skip clear if no set.
0090 0192           00234               clrf    mins            ; Clear minutes.
0091 20BF           00235               call    wr_mins         ; Write minutes.
                    00236 
0092 1D85           00237 debounce_mset btfss   PORTA,BIT_MSET  ; Wait for MSET button to be released.
0093 2892           00238               goto    debounce_mset   ; Loop.
0094 287E           00239               goto    set_loop        ; Released so recheck buttons.
                    00240 
0095 2099           00241 set_hours     call    inc_hours       ; Increment hours and display.
0096 1D05           00242 debounce_hset btfss   PORTA,BIT_HSET  ; Wait for HSET button to be released.
0097 2896           00243               goto    debounce_hset   ; Loop.
0098 287E           00244               goto    set_loop        ; Released so recheck buttons.
                    00245 
                    00246 ;------------------------------------------------------------------------------
                    00247 ; Increment hours, set PM indicator bit as necessary.
                    00248 
0099 1810           00249 inc_hours     btfsc   state,BIT_H24   ; 12h display?
009A 28A9           00250               goto    reset_on24      ; No,  so we reset when we get to 24.
                    00251 
009B 0813           00252 reset_on12    movf    hours,W         ; Get hours
009C 3C0C           00253               sublw   D'12'           ; Is it 12 (W=12-W)?
009D 1903           00254               btfsc   STATUS,Z        ; Test zero flag, skip clear if no set.
009E 0193           00255               clrf    hours           ; Clear hours.
009F 0A93           00256               incf    hours,F         ; Increment hours.
00A0 20CE           00257               call    wr_hours        ; Write it.
00A1 0813           00258               movf    hours,W         ; Get hours
00A2 3C0C           00259               sublw   D'12'           ; Is it 12 (W=12-W)?
00A3 1D03           00260               btfss   STATUS,Z        ; Test zero flag.
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  6


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00A4 0008           00261               return                  ; Zero not set, so not 12, so return.
00A5 3002           00262               movlw   MASK_PM         ; Get PM state bit mask.
00A6 0690           00263               xorwf   state,F         ; Toggle PM state bit in state.
00A7 20DD           00264               call    wr_state        ; Update state outputs.
00A8 0008           00265               return                  ; Return.
                    00266 
00A9 0A93           00267 reset_on24    incf    hours,F         ; Incrment hours.
00AA 0813           00268               movf    hours,W         ; Get it in W.
00AB 3C18           00269               sublw   D'24'           ; Is it 24 (W=24-W)?
00AC 1903           00270               btfsc   STATUS,Z        ; Test zero flag, skip clear if no set.
00AD 0193           00271               clrf    hours           ; Clear hours 24->0.
00AE 20CE           00272               call    wr_hours        ; Write hours to display.
00AF 0008           00273               return
                    00274 
                    00275 ;------------------------------------------------------------------------------
                    00276 ; Get seconds value, split to get BCD pair and write to port.
00B0 0811           00277 wr_secs       movf    secs,W          ; Get seconds.
00B1 2100           00278               call    bin2bcd         ; Convert to BCD.
00B2 0096           00279               movwf   bcd             ; Save result.
00B3 39F0           00280               andlw   0xF0            ; Mask BCD pair to leave upper digit in W upper nibble.
00B4 380A           00281               iorlw   0x0A            ; Select strobe.
00B5 0086           00282               movwf   PORTB           ; Write to PORTB.
00B6 39F0           00283               andlw   0xF0            ; Clear strobe (by selecting Q0).
00B7 0086           00284               movwf   PORTB           ; Write to PORTB.
00B8 0E16           00285               swapf   bcd,W           ; Get lower BCD digit in to W upper nibble.
00B9 39F0           00286               andlw   0xF0            ; Mask of strobe selection bits.
00BA 380C           00287               iorlw   0x0C            ; Set WR strobe.
00BB 0086           00288               movwf   PORTB           ; Write to PORTB.
00BC 39F0           00289               andlw   0xF0            ; Clear strobe.
00BD 0086           00290               movwf   PORTB           ; Write to PORTB.
00BE 0008           00291               return                  ; Return.
                    00292 
                    00293 ;------------------------------------------------------------------------------
                    00294 ; Get minutes value, split to get BCD pair and write to port.
00BF 0812           00295 wr_mins       movf    mins,W          ; Get minutes value.
00C0 2100           00296               call    bin2bcd         ; Convert to BCD.
00C1 0096           00297               movwf   bcd             ; Save result.
00C2 39F0           00298               andlw   0xF0            ; Mask BCD pair to leave upper digit in W upper nibble.
00C3 3806           00299               iorlw   0x06            ; Select strobe.
00C4 0086           00300               movwf   PORTB           ; Write to PORTB.
00C5 39F0           00301               andlw   0xF0            ; Clear strobe (by selecting Q0).
00C6 0086           00302               movwf   PORTB           ; Write to PORTB.
00C7 0E16           00303               swapf   bcd,W           ; Get lower BCD digit in to W upper nibble.
00C8 39F0           00304               andlw   0xF0            ; Mask of strobe selection bits.
00C9 3808           00305               iorlw   0x08            ; Set WR strobe.
00CA 0086           00306               movwf   PORTB           ; Write to PORTB.
00CB 39F0           00307               andlw   0xF0            ; Clear strobe.
00CC 0086           00308               movwf   PORTB           ; Write to PORTB.
00CD 0008           00309               return                  ; Return.
                    00310 
                    00311 ;------------------------------------------------------------------------------
                    00312 ; Get hours value, split to get BCD pair and write to port.
00CE 0813           00313 wr_hours      movf    hours,W         ; Get hours value/
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  7


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

00CF 2100           00314               call    bin2bcd         ; Convert to BCD.
00D0 0096           00315               movwf   bcd             ; Save result.
00D1 39F0           00316               andlw   0xF0            ; Mask BCD pair to leave upper digit in W upper nibble.
00D2 3802           00317               iorlw   0x02            ; Select strobe.
00D3 0086           00318               movwf   PORTB           ; Write to PORTB.
00D4 39F0           00319               andlw   0xF0            ; Clear strobe (by selecting Q0).
00D5 0086           00320               movwf   PORTB           ; Write to PORTB.
00D6 0E16           00321               swapf   bcd,W           ; Get lower BCD digit in to W upper nibble.
00D7 39F0           00322               andlw   0xF0            ; Mask of strobe selection bits.
00D8 3804           00323               iorlw   0x04            ; Set WR strobe.
00D9 0086           00324               movwf   PORTB           ; Write to PORTB.
00DA 39F0           00325               andlw   0xF0            ; Clear strobe.
00DB 0086           00326               movwf   PORTB           ; Write to PORTB.
00DC 0008           00327               return                  ; Return.
                    00328 
                    00329 ;------------------------------------------------------------------------------
                    00330 ; Write state bits to state latch.
00DD 0E10           00331 wr_state      swapf   state,W         ; Get state bits in to W<4:1>.
00DE 380E           00332               iorlw   0x0E            ; Set WR strobe.
00DF 0086           00333               movwf   PORTB           ; Write to PORTB.
00E0 39F0           00334               andlw   0xF0            ; Clear strobe by selecting Q0.
00E1 0086           00335               movwf   PORTB           ; Write to PORTB.
00E2 0008           00336               return
                    00337 
                    00338 ;------------------------------------------------------------------------------
                    00339 ; Routine to convert a binary value  (0..63) in to a BCD pair. The result is
                    00340 ; returned in W. The lookup is done as a 'calculated goto' by modifying PCL
                    00341 ; (the lower eight bits of the program counter). PCL is only eight bits wide
                    00342 ; with the top five bits coming from the PCLATH register. We use an ORG
                    00343 ; statement to ensure that addition of the offset (0..63) to the table address
                    00344 ; doesn't overflow the PCL register (any overflow would be lost and would result
                    00345 ; in a jump to some other part of the code).
                    00346 
0100                00347               ORG     0x0100
                    00348 
0100 018A           00349 bin2bcd       clrf    PCLATH          ; Clear PCLATH.
0101 140A           00350               bsf     PCLATH,0        ; Set bit zero so that goto yields an
                    00351                                       ; address 0x01xx.
0102 393F           00352               andlw   H'3F'           ; Ensure we limit lookup.
0103 0782           00353               addwf   PCL,F           ; Add offset in W to PCL to calc. goto.
                    00354 
0104 3400           00355               retlw   0x00
0105 3401           00356               retlw   0x01
0106 3402           00357               retlw   0x02
0107 3403           00358               retlw   0x03
0108 3404           00359               retlw   0x04
0109 3405           00360               retlw   0x05
010A 3406           00361               retlw   0x06
010B 3407           00362               retlw   0x07
010C 3408           00363               retlw   0x08
010D 3409           00364               retlw   0x09
010E 3410           00365               retlw   0x10
010F 3411           00366               retlw   0x11
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  8


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

0110 3412           00367               retlw   0x12
0111 3413           00368               retlw   0x13
0112 3414           00369               retlw   0x14
0113 3415           00370               retlw   0x15
0114 3416           00371               retlw   0x16
0115 3417           00372               retlw   0x17
0116 3418           00373               retlw   0x18
0117 3419           00374               retlw   0x19
0118 3420           00375               retlw   0x20
0119 3421           00376               retlw   0x21
011A 3422           00377               retlw   0x22
011B 3423           00378               retlw   0x23
011C 3424           00379               retlw   0x24
011D 3425           00380               retlw   0x25
011E 3426           00381               retlw   0x26
011F 3427           00382               retlw   0x27
0120 3428           00383               retlw   0x28
0121 3429           00384               retlw   0x29
0122 3430           00385               retlw   0x30
0123 3431           00386               retlw   0x31
0124 3432           00387               retlw   0x32
0125 3433           00388               retlw   0x33
0126 3434           00389               retlw   0x34
0127 3435           00390               retlw   0x35
0128 3436           00391               retlw   0x36
0129 3437           00392               retlw   0x37
012A 3438           00393               retlw   0x38
012B 3439           00394               retlw   0x39
012C 3440           00395               retlw   0x40
012D 3441           00396               retlw   0x41
012E 3442           00397               retlw   0x42
012F 3443           00398               retlw   0x43
0130 3444           00399               retlw   0x44
0131 3445           00400               retlw   0x45
0132 3446           00401               retlw   0x46
0133 3447           00402               retlw   0x47
0134 3448           00403               retlw   0x48
0135 3449           00404               retlw   0x49
0136 3450           00405               retlw   0x50
0137 3451           00406               retlw   0x51
0138 3452           00407               retlw   0x52
0139 3453           00408               retlw   0x53
013A 3454           00409               retlw   0x54
013B 3455           00410               retlw   0x55
013C 3456           00411               retlw   0x56
013D 3457           00412               retlw   0x57
013E 3458           00413               retlw   0x58
013F 3459           00414               retlw   0x59
0140 3460           00415               retlw   0x60
0141 3461           00416               retlw   0x61
0142 3462           00417               retlw   0x62
0143 3463           00418               retlw   0x63
                    00419 
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE  9


LOC  OBJECT CODE     LINE SOURCE TEXT
  VALUE

                    00420               END
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE 10


SYMBOL TABLE
  LABEL                             VALUE 

BIT_H24                           00000000
BIT_HSB                           00000003
BIT_HSEL                          00000000
BIT_HSET                          00000002
BIT_MSET                          00000003
BIT_PM                            00000001
BIT_SET                           00000002
BIT_TSET                          00000001
C                                 00000000
DC                                00000001
EEADR                             00000009
EECON1                            00000088
EECON2                            00000089
EEDATA                            00000008
EEIE                              00000006
EEIF                              00000004
F                                 00000001
FSR                               00000004
GIE                               00000007
INDF                              00000000
INTCON                            0000000B
INTE                              00000004
INTEDG                            00000006
INTF                              00000001
IRP                               00000007
MASK_H24                          00000001
MASK_HSB                          00000008
MASK_PM                           00000002
MASK_SET                          00000004
NOT_PD                            00000003
NOT_RBPU                          00000007
NOT_TO                            00000004
OPTION_REG                        00000081
PCL                               00000002
PCLATH                            0000000A
PORTA                             00000005
PORTB                             00000006
PS0                               00000000
PS1                               00000001
PS2                               00000002
PSA                               00000003
RBIE                              00000003
RBIF                              00000000
RD                                00000000
RP0                               00000005
RP1                               00000006
STATUS                            00000003
T0CS                              00000005
T0IE                              00000005
T0IF                              00000002
T0SE                              00000004
TMR0                              00000001
TRISA                             00000085
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE 11


SYMBOL TABLE
  LABEL                             VALUE 

TRISB                             00000086
W                                 00000000
WR                                00000001
WREN                              00000002
WRERR                             00000003
Z                                 00000002
_CP_OFF                           00003FFF
_CP_ON                            0000000F
_HS_OSC                           00003FFE
_LP_OSC                           00003FFC
_PWRTE_OFF                        00003FFF
_PWRTE_ON                         00003FF7
_RC_OSC                           00003FFF
_WDT_OFF                          00003FFB
_WDT_ON                           00003FFF
_XT_OSC                           00003FFD
__16F84                           00000001
bcd                               00000016
bin2bcd                           00000100
break                             
chk_hsel                          00000044
chk_hsel_done                     00000072
chk_hsel_iec                      00000070
chk_tset                          00000075
chk_tset_done                     00000089
chk_tset_idc                      00000087
clock                             00000021
debounce_hset                     00000096
debounce_mset                     00000092
endclock                          00000041
entrypoint                        00000000
hours                             00000013
idc                               00000015
inc_hours                         00000099
inc_secs                          0000002E
initialise                        00000005
intvector                         00000004
mins                              00000012
reset_mins                        0000003E
reset_on12                        0000009B
reset_on24                        000000A9
reset_secs                        00000035
secs                              00000011
set_h12                           00000057
set_h12_am                        00000060
set_h12_pm                        00000068
set_h24                           00000046
set_hours                         00000095
set_loop                          0000007E
set_mins                          0000008C
start                             0000001E
state                             00000010
ticks                             00000014
MPASM 02.30 Released         PICCLOCK.ASM   4-13-2000  14:45:46         PAGE 12


SYMBOL TABLE
  LABEL                             VALUE 

toggle_hs                         00000026
wr_hours                          000000CE
wr_mins                           000000BF
wr_secs                           000000B0
wr_state                          000000DD


MEMORY USAGE MAP ('X' = Used,  '-' = Unused)

0000 : X---XXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0040 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0080 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
00C0 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXX------------- ----------------
0100 : XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX XXXXXXXXXXXXXXXX
0140 : XXXX------------ ---------------- ---------------- ----------------

All other memory blocks unused.

Program Memory Words Used:   292
Program Memory Words Free:   732


Errors   :     0
Warnings :     0 reported,     0 suppressed
Messages :     2 reported,     0 suppressed

