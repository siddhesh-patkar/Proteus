

HI-TECH Software PICC Macro Assembler V9.60
                                                      Tue Oct 30 19:54:29 2007


     1                           	processor	16F887
     2                           	opt	pw 79
     3                           	psect	text0,local,class=CODE,delta=2
     4                           	psect	text1,local,class=CODE,delta=2
     5                           	psect	text2,local,class=CODE,delta=2
     6                           	psect	text3,local,class=CODE,delta=2
     7                           	psect	text4,local,class=CODE,delta=2
     8                           	psect	temp,global,ovrld,class=BANK0,space=1,de
      +                          lta=1
     9  0000                     
    10  0000                     
    11  0000                     
    12  0000                     
    13  0000                     
    14  0000                     
    15  0000                     
    16  0000                     
    17  0000                     
    18  0000                     
    19                           
    20                           	psect	text0
    21  03C3                     _SSPInit
    22                           ;ssp.c: 37: void SSPInit(void) {
    23  03C3  1683               	bsf	3,5
    24  03C4  1303               	bcf	3,6	;carry unused
    25  03C5  1607               	bsf	7,4
    26                           ;ssp.c: 43: TRISC3 = 1;
    27  03C6  1587               	bsf	7,3
    28                           ;ssp.c: 46: SSPCON = 0x00;
    29  03C7  1283               	bcf	3,5
    30  03C8  0194               	clrf	20	;volatile
    31                           ;ssp.c: 47: SSPEN = 1;
    32  03C9  1694               	bsf	20,5
    33                           ;ssp.c: 48: CKP = 1;
    34  03CA  1614               	bsf	20,4
    35                           ;ssp.c: 49: SSPM3 = 1;
    36  03CB  1594               	bsf	20,3
    37                           ;ssp.c: 50: SSPM2 = 1;
    38  03CC  1514               	bsf	20,2
    39                           ;ssp.c: 51: SSPM1 = 1;
    40  03CD  1494               	bsf	20,1
    41                           ;ssp.c: 55: SSPADD = 0x42;
    42  03CE  3042               	movlw	66
    43  03CF  1683               	bsf	3,5
    44  03D0  0093               	movwf	19
    45                           ;ssp.c: 56: SMP = 1;
    46  03D1  1794               	bsf	20,7
    47                           ;ssp.c: 58: SSPIF = 0;
    48  03D2  1283               	bcf	3,5
    49  03D3  118C               	bcf	12,3
    50                           ;ssp.c: 59: SSPIE = 1;
    51  03D4  1683               	bsf	3,5
    52  03D5  158C               	bsf	12,3
    53                           ;ssp.c: 60: PEIE = 1;
    54  03D6  170B               	bsf	11,6
    55                           ;ssp.c: 65: EEIndex = 0;
    56  03D7  1283               	bcf	3,5
    57  03D8  01A3               	clrf	_EEIndex
    58                           ;ssp.c: 66: Flags.SSPBF = 0;
    59  03D9  1025               	bcf	_Flags,0
    60                           ;ssp.c: 67: ByteCount = 0;
    61  03DA  01A2               	clrf	_ByteCount
    62                           ;ssp.c: 68: }
    63  03DB  0008               	return	;W free
    64                           
    65                           	psect	text1
    66  037C                     _SSPISR
    67                           ;ssp.c: 79: void SSPISR(void) {
    68  037C  0183               	clrf	3	;select bank 0
    69  037D  118C               	bcf	12,3
    70                           ;ssp.c: 88: if (STOP == 1) {
    71  037E  1683               	bsf	3,5
    72  037F  1E14               	btfss	20,4
    73  0380  2B86               	goto	l5
    74                           ;ssp.c: 90: Flags.SSPBF = 0;
    75  0381  1283               	bcf	3,5
    76  0382  1025               	bcf	_Flags,0
    77                           ;ssp.c: 93: SSPOV = 0;
    78  0383  1314               	bcf	20,6
    79                           ;ssp.c: 94: CKP = 1;
    80  0384  1614               	bsf	20,4
    81                           ;ssp.c: 95: return;
    82  0385  0008               	return
    83  0386                     l5
    84  0386  1D14               	btfss	20,2
    85  0387  1814               	btfsc	20,0
    86  0388  2B8E               	goto	l6
    87                           ;ssp.c: 99: Flags.SSPBF = 1;
    88  0389  1283               	bcf	3,5
    89  038A  1425               	bsf	_Flags,0
    90                           ;ssp.c: 101: SSPOV = 0;
    91  038B  1314               	bcf	20,6
    92                           ;ssp.c: 102: CKP = 1;
    93  038C  1614               	bsf	20,4
    94                           ;ssp.c: 103: return;
    95  038D  0008               	return
    96  038E                     l6
    97                           ;ssp.c: 104: }
    98  038E  1A94               	btfsc	20,5
    99  038F  2B97               	goto	l8
   100                           ;ssp.c: 110: if (RW == 0) {
   101  0390  1914               	btfsc	20,2
   102  0391  2BA3               	goto	l12
   103                           ;ssp.c: 111: ByteCount = SSPBUF;
   104  0392  1283               	bcf	3,5
   105  0393  0813               	movf	19,w	;volatile
   106  0394  00A2               	movwf	_ByteCount
   107                           ;ssp.c: 112: ByteCount = 0;
   108  0395  01A2               	clrf	_ByteCount
   109                           ;ssp.c: 114: } else {
   110  0396  2BA6               	goto	l11
   111                           ;ssp.c: 116: CKP = 0;
   112                           ;ssp.c: 117: LoadSSPBUF();
   113                           ;ssp.c: 118: }
   114  0397                     l8
   115                           ;ssp.c: 122: if (RW == 0) {
   116  0397  1914               	btfsc	20,2
   117  0398  2BA3               	goto	l12
   118                           ;ssp.c: 124: if (ByteCount == 0) {
   119  0399  1283               	bcf	3,5
   120  039A  08A2               	movf	_ByteCount
   121  039B  1D03               	btfss	3,2
   122  039C  2BA1               	goto	l13
   123                           ;ssp.c: 125: EEIndex = SSPBUF;
   124  039D  0813               	movf	19,w	;volatile
   125  039E  00A3               	movwf	_EEIndex
   126                           ;ssp.c: 126: ByteCount++;
   127  039F  0AA2               	incf	_ByteCount
   128                           ;ssp.c: 128: } else {
   129  03A0  2BA6               	goto	l11
   130  03A1                     l13
   131                           ;ssp.c: 130: UnloadSSPBUF();
   132  03A1  22BC               	call	_UnloadSSPBUF
   133                           ;ssp.c: 131: }
   134  03A2  2BA6               	goto	l11
   135  03A3                     l12
   136                           ;ssp.c: 135: CKP = 0;
   137  03A3  1283               	bcf	3,5
   138  03A4  1214               	bcf	20,4
   139                           ;ssp.c: 136: LoadSSPBUF();
   140  03A5  234D               	call	_LoadSSPBUF
   141  03A6                     l11
   142                           ;ssp.c: 137: }
   143  03A6  1314               	bcf	20,6
   144                           ;ssp.c: 143: CKP = 1;
   145  03A7  1614               	bsf	20,4
   146                           ;ssp.c: 145: }
   147  03A8  0008               	return	;W free
   148                           
   149                           	psect	text2
   150  034D                     _LoadSSPBUF
   151                           ;ssp.c: 157: void LoadSSPBUF(void) {
   152  034D  1003               	bcf	3,0
   153  034E  1283               	bcf	3,5
   154  034F  1303               	bcf	3,6	;carry unused
   155  0350  0C23               	rrf	_EEIndex,w
   156  0351  00A7               	movwf	_TempIndex
   157                           ;ssp.c: 162: if (TempIndex < 4)
   158  0352  3004               	movlw	4
   159  0353  0227               	subwf	_TempIndex,w
   160  0354  1803               	btfsc	3,0
   161  0355  2B60               	goto	l17
   162                           ;ssp.c: 163: SSPBUF = (EEIndex % 2) ? RAW[TempI
      +                          ndex] : RAW[TempIndex] >> 8;
   163  0356  1823               	btfsc	_EEIndex,0
   164  0357  2B5C               	goto	u116
   165  0358  0827               	movf	_TempIndex,w
   166  0359  0727               	addwf	_TempIndex,w
   167  035A  3E3E               	addlw	_RAW
   168  035B  2B6A               	goto	L2
   169  035C                     u116
   170  035C  0827               	movf	_TempIndex,w
   171  035D  0727               	addwf	_TempIndex,w
   172  035E  3E3E               	addlw	_RAW
   173  035F  2B76               	goto	L1
   174  0360                     l17
   175                           ;ssp.c: 164: else if (TempIndex < 2*4)
   176  0360  3008               	movlw	8
   177  0361  0227               	subwf	_TempIndex,w
   178  0362  1803               	btfsc	3,0
   179  0363  2B7A               	goto	l18
   180                           ;ssp.c: 165: SSPBUF = (EEIndex % 2) ? AVERAGE[T
      +                          empIndex - 4] : AVERAGE[TempIndex - 4] >> 8;
   181  0364  1823               	btfsc	_EEIndex,0
   182  0365  2B72               	goto	u146
   183  0366  0827               	movf	_TempIndex,w
   184  0367  0727               	addwf	_TempIndex,w
   185  0368  3EF8               	addlw	-8
   186  0369  3E36               	addlw	_AVERAGE
   187  036A                     L2
   188  036A  0084               	movwf	4
   189  036B  1383               	bcf	3,7
   190  036C  0800               	movf	0,w
   191  036D  00F4               	movwf	btemp
   192  036E  0A84               	incf	4
   193  036F  0800               	movf	0,w
   194  0370  00F5               	movwf	btemp+1
   195  0371  2B79               	goto	u147
   196  0372                     u146
   197  0372  0827               	movf	_TempIndex,w
   198  0373  0727               	addwf	_TempIndex,w
   199  0374  3EF8               	addlw	-8
   200  0375  3E36               	addlw	_AVERAGE
   201  0376                     L1
   202  0376  0084               	movwf	4
   203  0377  1383               	bcf	3,7
   204  0378  0800               	movf	0,w
   205  0379                     u147
   206  0379  0093               	movwf	19	;volatile
   207  037A                     l18
   208                           ;ssp.c: 168: EEIndex++;
   209  037A  0AA3               	incf	_EEIndex
   210                           ;ssp.c: 169: }
   211  037B  0008               	return	;W free
   212                           
   213                           	psect	text3
   214  02BC                     _UnloadSSPBUF
   215                           ;ssp.c: 190: void UnloadSSPBUF(void) {
   216  02BC  1003               	bcf	3,0
   217  02BD  1283               	bcf	3,5
   218  02BE  1303               	bcf	3,6	;carry unused
   219  02BF  0C23               	rrf	_EEIndex,w
   220  02C0  00A7               	movwf	_TempIndex
   221                           ;ssp.c: 194: TempInt = SSPBUF;
   222  02C1  0813               	movf	19,w	;volatile
   223  02C2  00AC               	movwf	_TempInt
   224  02C3  01AD               	clrf	_TempInt+1
   225                           ;ssp.c: 200: if (TempIndex < 4)
   226  02C4  3004               	movlw	4
   227  02C5  0227               	subwf	_TempIndex,w
   228                           ;ssp.c: 198: if ( !(EEIndex % 2) ) {
   229  02C6  1823               	btfsc	_EEIndex,0
   230  02C7  2AE4               	goto	L5
   231  02C8  1803               	btfsc	3,0
   232  02C9  2AD1               	goto	l22
   233                           ;ssp.c: 201: RAW[TempIndex] = TempInt*256;
   234  02CA  082C               	movf	_TempInt,w
   235  02CB  00F5               	movwf	btemp+1
   236  02CC  01F4               	clrf	btemp
   237  02CD  0827               	movf	_TempIndex,w
   238  02CE  0727               	addwf	_TempIndex,w
   239  02CF  3E3E               	addlw	_RAW
   240  02D0  2ADC               	goto	L3
   241  02D1                     l22
   242                           ;ssp.c: 202: else if (TempIndex < 2*4)
   243  02D1  3008               	movlw	8
   244  02D2  0227               	subwf	_TempIndex,w
   245  02D3  1803               	btfsc	3,0
   246  02D4  2B07               	goto	l25
   247                           ;ssp.c: 203: AVERAGE[TempIndex - 4] = TempInt*2
      +                          56;
   248  02D5  082C               	movf	_TempInt,w
   249  02D6  00F5               	movwf	btemp+1
   250  02D7  01F4               	clrf	btemp
   251  02D8  0827               	movf	_TempIndex,w
   252  02D9  0727               	addwf	_TempIndex,w
   253  02DA  3EF8               	addlw	-8
   254  02DB  3E36               	addlw	_AVERAGE
   255  02DC                     L3
   256  02DC  0084               	movwf	4
   257  02DD  1383               	bcf	3,7
   258  02DE  0874               	movf	btemp,w
   259  02DF  0080               	movwf	0
   260  02E0  0A84               	incf	4
   261  02E1  0875               	movf	btemp+1,w
   262  02E2  0080               	movwf	0
   263                           ;ssp.c: 205: } else {
   264  02E3  2B07               	goto	l25
   265                           ;ssp.c: 207: if (TempIndex < 4) {
   266  02E4                     L5
   267  02E4  1803               	btfsc	3,0
   268  02E5  2AF1               	goto	l26
   269                           ;ssp.c: 208: RAW[TempIndex] &= 0xFF00;
   270  02E6  0827               	movf	_TempIndex,w
   271  02E7  0727               	addwf	_TempIndex,w
   272  02E8  3E3E               	addlw	_RAW
   273  02E9  0084               	movwf	4
   274  02EA  1383               	bcf	3,7
   275  02EB  0180               	clrf	0
   276  02EC  0A84               	incf	4
   277                           ;ssp.c: 209: RAW[TempIndex] |= TempInt;
   278  02ED  0827               	movf	_TempIndex,w
   279  02EE  0727               	addwf	_TempIndex,w
   280  02EF  3E3E               	addlw	_RAW
   281  02F0  2B01               	goto	L4
   282                           ;ssp.c: 210: } else if (TempIndex < 2*4) {
   283  02F1                     l26
   284  02F1  3008               	movlw	8
   285  02F2  0227               	subwf	_TempIndex,w
   286  02F3  1803               	btfsc	3,0
   287  02F4  2B07               	goto	l25
   288                           ;ssp.c: 211: AVERAGE[TempIndex - 4] &= 0xFF00;
   289  02F5  0827               	movf	_TempIndex,w
   290  02F6  0727               	addwf	_TempIndex,w
   291  02F7  3EF8               	addlw	-8
   292  02F8  3E36               	addlw	_AVERAGE
   293  02F9  0084               	movwf	4
   294  02FA  1383               	bcf	3,7
   295  02FB  0180               	clrf	0
   296  02FC  0A84               	incf	4
   297                           ;ssp.c: 212: AVERAGE[TempIndex - 4] |= TempInt;
   298  02FD  0827               	movf	_TempIndex,w
   299  02FE  0727               	addwf	_TempIndex,w
   300  02FF  3EF8               	addlw	-8
   301  0300  3E36               	addlw	_AVERAGE
   302  0301                     L4
   303  0301  0084               	movwf	4
   304  0302  082C               	movf	_TempInt,w
   305  0303  0480               	iorwf	0
   306  0304  0A84               	incf	4
   307  0305  082D               	movf	_TempInt+1,w
   308  0306  0480               	iorwf	0
   309  0307                     l25
   310                           ;ssp.c: 213: }
   311  0307  0AA3               	incf	_EEIndex
   312                           ;ssp.c: 217: }
   313  0308  0008               	return	;W free
   314                           
   315                           	psect	text4
   316  0000                     
   317  0000                     
   318  0000                     
   319  0000                     
   320  0000                     
   321  0000                     
   322  0000                     
   323  0000                     
   324  0000                     
   325  0000                     
   326  0000                     
   327  0000                     
   328  0000                     
   329  0000                     
   330  0000                     
   331  0000                     
   332  0000                     
   333  0000                     
   334  0000                     
   335  0000                     
   336  0000                     
   337  0000                     
   338  0000                     
   339  0000                     
   340  0000                     
   341  0000                     
   342  0000                     
   343  0000                     
   344  0000                     
   345  0000                     
   346  0000                     
   347  0000                     
   348  0000                     
   349  0000                     
   350  0000                     
   351  0000                     
   352  0000                     
   353  0000                     
   354  0000                     
   355  0000                     
   356  0000                     
   357  0000                     
   358  0000                     
   359  0000                     
   360  0000                     
   361  0000                     
   362  0000                     
   363  0000                     
   364  0000                     
   365  0000                     
   366  0000                     
   367  0000                     
   368  0000                     
   369  0000                     
   370  0000                     
   371  0000                     
   372  0000                     
   373  0000                     
   374  0000                     
   375  0000                     
   376  0000                     
   377  0000                     
   378  0000                     
   379  0000                     
   380  0000                     
   381  0000                     
   382  0000                     
   383  0000                     
   384  0000                     
   385  0000                     
   386  0000                     
   387  0000                     
   388  0000                     
   389  0000                     
   390  0000                     
   391  0000                     
   392  0000                     
   393  0000                     
   394  0000                     
   395  0000                     
   396  0000                     
   397  0000                     
   398  0000                     
   399  0000                     
   400  0000                     
   401  0000                     
   402  0000                     
   403  0000                     
   404  0000                     
   405  0000                     
   406  0000                     
   407  0000                     
   408  0000                     
   409  0000                     
   410  0000                     
   411  0000                     
   412  0000                     
   413  0000                     
   414  0000                     
   415  0000                     
   416  0000                     
   417  0000                     
   418  0000                     
   419  0000                     
   420  0000                     
   421  0000                     
   422  0000                     
   423  0000                     
   424  0000                     
   425  0000                     
   426  0000                     
   427  0000                     
   428  0000                     
   429  0000                     
   430  0000                     
   431  0000                     
   432  0000                     
   433  0000                     
   434  0000                     
   435  0000                     
   436  0000                     
   437  0000                     
   438  0000                     
   439  0000                     
   440  0000                     
   441  0000                     
   442  0000                     
   443  0000                     
   444  0000                     
   445  0000                     
   446  0000                     
   447  0000                     
   448  0000                     
   449  0000                     
   450  0000                     
   451  0000                     
   452  0000                     
   453  0000                     
   454  0000                     
   455  0000                     
   456  0000                     
   457  0000                     
   458  0000                     
   459  0000                     
   460  0000                     
   461  0000                     
   462  0000                     
   463  0000                     
   464  0000                     
   465  0000                     
   466  0000                     
   467  0000                     
   468  0000                     
   469  0000                     
   470  0000                     
   471  0000                     
   472  0000                     
   473  0000                     
   474  0000                     
   475  0000                     
   476  0000                     
   477  0000                     
   478  0000                     
   479  0000                     
   480  0000                     
   481  0000                     
   482  0000                     
   483  0000                     
   484  0000                     
   485  0000                     
   486  0000                     
   487  0000                     
   488  0000                     
   489  0000                     
   490  0000                     
   491  0000                     
   492  0000                     
   493  0000                     
   494  0000                     
   495  0000                     
   496  0000                     
   497  0000                     
   498  0000                     
   499  0000                     
   500  0000                     
   501  0000                     
   502  0000                     
   503  0000                     
   504  0000                     
   505  0000                     
   506  0000                     
   507  0000                     
   508  0000                     
   509  0000                     
   510  0000                     
   511  0000                     
   512  0000                     
   513  0000                     
   514  0000                     
   515  0000                     
   516  0000                     
   517  0000                     
   518  0000                     
   519  0000                     
   520  0000                     
   521  0000                     
   522  0000                     
   523  0000                     
   524  0000                     
   525  0000                     
   526  0000                     
   527  0000                     
   528  0000                     
   529  0000                     
   530  0000                     
   531  0000                     
   532  0000                     
   533  0000                     
   534  0000                     
   535  0000                     
   536  0000                     
   537  0000                     
   538  0000                     
   539  0000                     
   540  0000                     
   541  0000                     
   542  0000                     
   543  0000                     
   544  0000                     
   545  0000                     
   546  0000                     
   547  0000                     
   548  0000                     
   549  0000                     
   550  0000                     
   551  0000                     
   552  0000                     
   553  0000                     
   554  0000                     
   555  0000                     
   556  0000                     
   557  0000                     
   558  0000                     
   559  0000                     
   560  0000                     
   561  0000                     
   562  0000                     
   563  0000                     
   564  0000                     
   565  0000                     
   566  0000                     
   567  0000                     
   568  0000                     
   569  0000                     
   570  0000                     
   571  0000                     
   572  0000                     
   573  0000                     
   574  0000                     
   575  0000                     
   576  0000                     
   577  0000                     
   578  0000                     
   579  0000                     
   580  0000                     
   581  0000                     
   582  0000                     
   583  0000                     
   584  0000                     
   585  0000                     
   586  0000                     
   587  0000                     
   588  0000                     
   589  0000                     
   590  0000                     
   591  0000                     
   592  0000                     
   593  0000                     
   594  0000                     
   595  0000                     
   596  0000                     
   597  0000                     
   598  0000                     
   599  0000                     
   600  0000                     
   601  0000                     
   602  0000                     
   603  0000                     
   604  0000                     
   605  0000                     
   606  0000                     
   607  0000                     
   608  0000                     
   609  0000                     
   610  0000                     
   611  0000                     
   612  0000                     
   613  0000                     
   614  0000                     
   615  0000                     
   616  0000                     
   617  0000                     
   618  0000                     
   619  0000                     
   620  0000                     
   621  0000                     
   622  0000                     
   623  0000                     
   624  0000                     
   625  0000                     
   626  0000                     
   627  0000                     
   628  0000                     
   629  0000                     
   630  0000                     
   631  0000                     
   632  0000                     
   633  0000                     
   634  0000                     
   635  0000                     
   636  0000                     
   637  0000                     
   638  0000                     
   639  0000                     
   640  0000                     
   641  0000                     
   642  0000                     
   643  0000                     
   644  0000                     
   645  0000                     
   646  0000                     
   647  0000                     
   648  0000                     
   649  0000                     
   650  0000                     
   651  0000                     
   652  0000                     
   653  0000                     
   654  0000                     
   655  0000                     
   656  0000                     
   657  0000                     
   658  0000                     
   659  0000                     
   660  0000                     
   661  0000                     
   662  0000                     
   663  0000                     
   664  0000                     
   665  0000                     
   666  0000                     
   667  0000                     
   668  0000                     
   669  0000                     
   670  0000                     
   671  0000                     
   672  0000                     
   673  0000                     
   674  0000                     
   675  0000                     
   676  0000                     
   677  0000                     
   678  0000                     
   679  0000                     
   680  0000                     
   681  0000                     
   682  0000                     
   683  0000                     
   684  0000                     
   685  0000                     
   686  0000                     
   687  0000                     
   688  0000                     
   689  0000                     
   690  0000                     
   691  0000                     
   692  0000                     
   693  0000                     
   694  0000                     
   695  0000                     
   696  0000                     
   697  0000                     
   698  0000                     
   699  0000                     
   700  0000                     
   701  0000                     
   702  0000                     
   703  0000                     
   704  0000                     
   705  0000                     
   706  0000                     
   707  0000                     
   708  0000                     
   709  0000                     
   710  0000                     
   711  0000                     
   712  0000                     
   713  0000                     
   714  0000                     
   715  0000                     
   716  0000                     
   717  0000                     
   718  0000                     
   719  0000                     
   720  0000                     
   721  0000                     
   722  0000                     
   723  0000                     
   724  0000                     
   725  0000                     
   726  0000                     
   727  0000                     
   728  0000                     
   729  0000                     
   730  0000                     
   731                           
   732                           	psect	temp
   733  0074                     btemp
                     btemp
   734  0074                     	ds	2


HI-TECH Software PICC Macro Assembler V9.60
Symbol Table                                          Tue Oct 30 19:54:29 2007

           l5 0386             l6 038E             l8 0397  
          l11 03A6            l12 03A3            l13 03A1  
          l22 02D1            l25 0307            l17 0360  
          l26 02F1            l18 037A            fsr 0004  
      _SSPISR 037C           u116 035C       _AVERAGE 0036  
         u146 0372           u147 0379           _RAW 003E  
     _EEIndex 0023       _SSPInit 03C3  _UnloadSSPBUF 02BC  
        btemp 0074       _TempInt 002C     _ByteCount 0022  
       _Flags 0025     _TempIndex 0027         status 0003  
  _LoadSSPBUF 034D    used_btemp0 0001    used_btemp1 0001  
